using System;
using System.Collections.Generic;
using System.Text;

namespace NetworkProtocols
{
	// Token: 0x02000478 RID: 1144
	public static class ArrayManager
	{
		// Token: 0x06001D5E RID: 7518 RVA: 0x0001597E File Offset: 0x00013B7E
		public static byte[] GetNewArray()
		{
			return new byte[128];
		}

		// Token: 0x06001D5F RID: 7519 RVA: 0x0001598A File Offset: 0x00013B8A
		public static void WriteByte(ref byte[] data, ref int offset, byte value)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 1);
			data[offset] = value;
			offset++;
		}

		// Token: 0x06001D60 RID: 7520 RVA: 0x000159A1 File Offset: 0x00013BA1
		public static byte ReadByte(byte[] data, ref int offset)
		{
			offset++;
			return data[offset - 1];
		}

		// Token: 0x06001D61 RID: 7521 RVA: 0x000C1DE0 File Offset: 0x000BFFE0
		public static void WriteListByte(ref byte[] data, ref int offset, List<byte> values)
		{
			int count = values.Count;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, count + 4);
			Array.Copy(BitConverter.GetBytes(count), 0, data, offset, 4);
			offset += 4;
			foreach (byte b in values)
			{
				data[offset] = b;
				offset++;
			}
		}

		// Token: 0x06001D62 RID: 7522 RVA: 0x000C1E64 File Offset: 0x000C0064
		public static List<byte> ReadListByte(byte[] data, ref int offset)
		{
			List<byte> list = new List<byte>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = offset; i < offset + num; i++)
			{
				list.Add(data[i]);
			}
			offset += num;
			return list;
		}

		// Token: 0x06001D63 RID: 7523 RVA: 0x000C1EAC File Offset: 0x000C00AC
		public static void WriteByteArray(ref byte[] data, ref int offset, byte[] value)
		{
			int length = value.GetLength(0);
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, length + 4);
			Array.Copy(BitConverter.GetBytes(length), 0, data, offset, 4);
			offset += 4;
			Array.Copy(value, 0, data, offset, length);
			offset += length;
		}

		// Token: 0x06001D64 RID: 7524 RVA: 0x000C1EF8 File Offset: 0x000C00F8
		public static byte[] ReadByteArray(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			return array;
		}

		// Token: 0x06001D65 RID: 7525 RVA: 0x000C1F30 File Offset: 0x000C0130
		public static void WriteListByteArray(ref byte[] data, ref int offset, List<byte[]> values)
		{
			int num = 0;
			foreach (byte[] array in values)
			{
				num += array.GetLength(0) + 4;
			}
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (byte[] array2 in values)
			{
				num = array2.GetLength(0);
				Array.Copy(BitConverter.GetBytes(num), 0, data, offset, 4);
				offset += 4;
				Array.Copy(array2, 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D66 RID: 7526 RVA: 0x000C2024 File Offset: 0x000C0224
		public static List<byte[]> ReadListByteArray(byte[] data, ref int offset)
		{
			List<byte[]> list = new List<byte[]>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				int num2 = BitConverter.ToInt32(data, offset);
				offset += 4;
				byte[] array = new byte[num2];
				Array.Copy(data, offset, array, 0, num2);
				offset += num2;
				list.Add(array);
			}
			return list;
		}

		// Token: 0x06001D67 RID: 7527 RVA: 0x000C208C File Offset: 0x000C028C
		public static void WriteGuid(ref byte[] data, ref int offset, Guid value)
		{
			int num = 16;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(value.ToByteArray(), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D68 RID: 7528 RVA: 0x000C20C0 File Offset: 0x000C02C0
		public static Guid ReadGuid(byte[] data, ref int offset)
		{
			int num = 16;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			Guid result = new Guid(array);
			offset += num;
			return result;
		}

		// Token: 0x06001D69 RID: 7529 RVA: 0x000C20F4 File Offset: 0x000C02F4
		public static void WriteListGuid(ref byte[] data, ref int offset, List<Guid> values)
		{
			int num = 16 * values.Count;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 16;
			foreach (Guid guid in values)
			{
				Array.Copy(guid.ToByteArray(), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D6A RID: 7530 RVA: 0x000C2190 File Offset: 0x000C0390
		public static List<Guid> ReadListGuid(byte[] data, ref int offset)
		{
			List<Guid> list = new List<Guid>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			int num2 = 16;
			for (int i = 0; i < num; i++)
			{
				byte[] array = new byte[num2];
				Array.Copy(data, offset, array, 0, num2);
				Guid item = new Guid(array);
				offset += num2;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D6B RID: 7531 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteInt32(ref byte[] data, ref int offset, int value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D6C RID: 7532 RVA: 0x000C2224 File Offset: 0x000C0424
		public static int ReadInt32(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return result;
		}

		// Token: 0x06001D6D RID: 7533 RVA: 0x000C2244 File Offset: 0x000C0444
		public static void WriteListInt32(ref byte[] data, ref int offset, List<int> values)
		{
			int num = values.Count * 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 4;
			foreach (int value in values)
			{
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D6E RID: 7534 RVA: 0x000C22DC File Offset: 0x000C04DC
		public static List<int> ReadListInt32(byte[] data, ref int offset)
		{
			List<int> list = new List<int>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				int item = BitConverter.ToInt32(data, offset);
				offset += 4;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D6F RID: 7535 RVA: 0x000C2328 File Offset: 0x000C0528
		public static void WriteUInt32(ref byte[] data, ref int offset, uint value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D70 RID: 7536 RVA: 0x000C2358 File Offset: 0x000C0558
		public static uint ReadUInt32(byte[] data, ref int offset)
		{
			uint result = BitConverter.ToUInt32(data, offset);
			offset += 4;
			return result;
		}

		// Token: 0x06001D71 RID: 7537 RVA: 0x000C2378 File Offset: 0x000C0578
		public static void WriteListUInt32(ref byte[] data, ref int offset, List<uint> values)
		{
			int num = values.Count * 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 4;
			foreach (uint value in values)
			{
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D72 RID: 7538 RVA: 0x000C2410 File Offset: 0x000C0610
		public static List<uint> ReadListUInt32(byte[] data, ref int offset)
		{
			List<uint> list = new List<uint>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				uint item = BitConverter.ToUInt32(data, offset);
				offset += 4;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D73 RID: 7539 RVA: 0x000C245C File Offset: 0x000C065C
		public static void WriteInt16(ref byte[] data, ref int offset, short value)
		{
			int num = 2;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D74 RID: 7540 RVA: 0x000C248C File Offset: 0x000C068C
		public static short ReadInt16(byte[] data, ref int offset)
		{
			short result = BitConverter.ToInt16(data, offset);
			offset += 2;
			return result;
		}

		// Token: 0x06001D75 RID: 7541 RVA: 0x000C24AC File Offset: 0x000C06AC
		public static void WriteListInt16(ref byte[] data, ref int offset, List<short> values)
		{
			int num = values.Count * 2;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 2;
			foreach (short value in values)
			{
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D76 RID: 7542 RVA: 0x000C2544 File Offset: 0x000C0744
		public static List<short> ReadListInt16(byte[] data, ref int offset)
		{
			List<short> list = new List<short>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				short item = BitConverter.ToInt16(data, offset);
				offset += 2;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D77 RID: 7543 RVA: 0x000C2590 File Offset: 0x000C0790
		public static void WriteUInt16(ref byte[] data, ref int offset, ushort value)
		{
			int num = 2;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D78 RID: 7544 RVA: 0x000C25C0 File Offset: 0x000C07C0
		public static ushort ReadUInt16(byte[] data, ref int offset)
		{
			ushort result = BitConverter.ToUInt16(data, offset);
			offset += 2;
			return result;
		}

		// Token: 0x06001D79 RID: 7545 RVA: 0x000C25E0 File Offset: 0x000C07E0
		public static void WriteListUInt16(ref byte[] data, ref int offset, List<ushort> values)
		{
			int num = values.Count * 2;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 2;
			foreach (ushort value in values)
			{
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D7A RID: 7546 RVA: 0x000C2678 File Offset: 0x000C0878
		public static List<ushort> ReadListUInt16(byte[] data, ref int offset)
		{
			List<ushort> list = new List<ushort>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ushort item = BitConverter.ToUInt16(data, offset);
				offset += 2;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D7B RID: 7547 RVA: 0x000C26C4 File Offset: 0x000C08C4
		public static void WriteInt64(ref byte[] data, ref int offset, long value)
		{
			int num = 8;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D7C RID: 7548 RVA: 0x000C26F4 File Offset: 0x000C08F4
		public static long ReadInt64(byte[] data, ref int offset)
		{
			long result = BitConverter.ToInt64(data, offset);
			offset += 8;
			return result;
		}

		// Token: 0x06001D7D RID: 7549 RVA: 0x000C2714 File Offset: 0x000C0914
		public static void WriteListInt64(ref byte[] data, ref int offset, List<long> values)
		{
			int num = values.Count * 8;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 8;
			foreach (long value in values)
			{
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D7E RID: 7550 RVA: 0x000C27AC File Offset: 0x000C09AC
		public static List<long> ReadListInt64(byte[] data, ref int offset)
		{
			List<long> list = new List<long>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				long item = BitConverter.ToInt64(data, offset);
				offset += 8;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D7F RID: 7551 RVA: 0x000C27F8 File Offset: 0x000C09F8
		public static void WriteUInt64(ref byte[] data, ref int offset, ulong value)
		{
			int num = 8;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D80 RID: 7552 RVA: 0x000C2828 File Offset: 0x000C0A28
		public static ulong ReadUInt64(byte[] data, ref int offset)
		{
			ulong result = BitConverter.ToUInt64(data, offset);
			offset += 8;
			return result;
		}

		// Token: 0x06001D81 RID: 7553 RVA: 0x000C2848 File Offset: 0x000C0A48
		public static void WriteListUInt64(ref byte[] data, ref int offset, List<ulong> values)
		{
			int num = values.Count * 8;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 8;
			foreach (ulong value in values)
			{
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D82 RID: 7554 RVA: 0x000C28E0 File Offset: 0x000C0AE0
		public static List<ulong> ReadListUInt64(byte[] data, ref int offset)
		{
			List<ulong> list = new List<ulong>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ulong item = BitConverter.ToUInt64(data, offset);
				offset += 8;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D83 RID: 7555 RVA: 0x000C292C File Offset: 0x000C0B2C
		public static void WriteBoolean(ref byte[] data, ref int offset, bool value)
		{
			int num = 1;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D84 RID: 7556 RVA: 0x000C295C File Offset: 0x000C0B5C
		public static bool ReadBoolean(byte[] data, ref int offset)
		{
			bool result = BitConverter.ToBoolean(data, offset);
			offset++;
			return result;
		}

		// Token: 0x06001D85 RID: 7557 RVA: 0x000C297C File Offset: 0x000C0B7C
		public static void WriteListBoolean(ref byte[] data, ref int offset, List<bool> values)
		{
			int num = values.Count * 1;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 1;
			foreach (bool value in values)
			{
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D86 RID: 7558 RVA: 0x000C2A14 File Offset: 0x000C0C14
		public static List<bool> ReadListBoolean(byte[] data, ref int offset)
		{
			List<bool> list = new List<bool>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				bool item = BitConverter.ToBoolean(data, offset);
				offset++;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D87 RID: 7559 RVA: 0x000C2A60 File Offset: 0x000C0C60
		public static void WriteFloat(ref byte[] data, ref int offset, float value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D88 RID: 7560 RVA: 0x000C2A90 File Offset: 0x000C0C90
		public static float ReadFloat(byte[] data, ref int offset)
		{
			float result = BitConverter.ToSingle(data, offset);
			offset += 4;
			return result;
		}

		// Token: 0x06001D89 RID: 7561 RVA: 0x000C2AB0 File Offset: 0x000C0CB0
		public static void WriteListFloat(ref byte[] data, ref int offset, List<float> values)
		{
			int num = values.Count * 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 4;
			foreach (float num2 in values)
			{
				float value = num2;
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D8A RID: 7562 RVA: 0x000C2B48 File Offset: 0x000C0D48
		public static List<float> ReadListFloat(byte[] data, ref int offset)
		{
			List<float> list = new List<float>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				float item = BitConverter.ToSingle(data, offset);
				offset += 4;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D8B RID: 7563 RVA: 0x000C2B94 File Offset: 0x000C0D94
		public static void WriteDouble(ref byte[] data, ref int offset, double value)
		{
			int num = 8;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D8C RID: 7564 RVA: 0x000C2BC4 File Offset: 0x000C0DC4
		public static double ReadDouble(byte[] data, ref int offset)
		{
			double result = BitConverter.ToDouble(data, offset);
			offset += 8;
			return result;
		}

		// Token: 0x06001D8D RID: 7565 RVA: 0x000C2BE4 File Offset: 0x000C0DE4
		public static void WriteListDouble(ref byte[] data, ref int offset, List<double> values)
		{
			int num = values.Count * 8;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 8;
			foreach (double num2 in values)
			{
				double value = num2;
				Array.Copy(BitConverter.GetBytes(value), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D8E RID: 7566 RVA: 0x000C2C7C File Offset: 0x000C0E7C
		public static List<double> ReadListDouble(byte[] data, ref int offset)
		{
			List<double> list = new List<double>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				double item = BitConverter.ToDouble(data, offset);
				offset += 8;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D8F RID: 7567 RVA: 0x000C2CC8 File Offset: 0x000C0EC8
		public static void WriteDecimal(ref byte[] data, ref int offset, decimal value)
		{
			int num = 16;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			int[] bits = decimal.GetBits(value);
			List<byte> list = new List<byte>();
			foreach (int value2 in bits)
			{
				list.AddRange(BitConverter.GetBytes(value2));
			}
			Array.Copy(list.ToArray(), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D90 RID: 7568 RVA: 0x000C2D34 File Offset: 0x000C0F34
		public static decimal ReadDecimal(byte[] data, ref int offset)
		{
			int[] array = new int[4];
			for (int i = 0; i <= 15; i += 4)
			{
				array[i / 4] = BitConverter.ToInt32(data, offset + i);
			}
			offset += 16;
			return new decimal(array);
		}

		// Token: 0x06001D91 RID: 7569 RVA: 0x000C2D78 File Offset: 0x000C0F78
		public static void WriteListDecimal(ref byte[] data, ref int offset, List<decimal> values)
		{
			int num = values.Count * 16;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num + 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			num = 16;
			foreach (decimal d in values)
			{
				int[] bits = decimal.GetBits(d);
				List<byte> list = new List<byte>();
				foreach (int value in bits)
				{
					list.AddRange(BitConverter.GetBytes(value));
				}
				Array.Copy(list.ToArray(), 0, data, offset, num);
				offset += num;
			}
		}

		// Token: 0x06001D92 RID: 7570 RVA: 0x000C2E54 File Offset: 0x000C1054
		public static List<decimal> ReadListDecimal(byte[] data, ref int offset)
		{
			List<decimal> list = new List<decimal>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				int[] array = new int[4];
				for (int j = 0; j <= 15; j += 4)
				{
					array[j / 4] = BitConverter.ToInt32(data, offset + j);
				}
				offset += 16;
				list.Add(new decimal(array));
			}
			return list;
		}

		// Token: 0x06001D93 RID: 7571 RVA: 0x000C2ECC File Offset: 0x000C10CC
		public static void WriteString(ref byte[] data, ref int offset, string value)
		{
			if (value == null)
			{
				ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
				Array.Copy(BitConverter.GetBytes(0), 0, data, offset, 4);
				offset += 4;
				return;
			}
			byte[] bytes = Encoding.UTF8.GetBytes(value);
			int length = bytes.GetLength(0);
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, length + 4);
			Array.Copy(BitConverter.GetBytes(length), 0, data, offset, 4);
			offset += 4;
			Array.Copy(bytes, 0, data, offset, length);
			offset += length;
		}

		// Token: 0x06001D94 RID: 7572 RVA: 0x000C2F48 File Offset: 0x000C1148
		public static string ReadString(byte[] data, ref int offset)
		{
			string result = string.Empty;
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			if (num == 0)
			{
				return string.Empty;
			}
			result = Encoding.UTF8.GetString(data, offset, num);
			offset += num;
			return result;
		}

		// Token: 0x06001D95 RID: 7573 RVA: 0x000C2F8C File Offset: 0x000C118C
		public static void WriteListString(ref byte[] data, ref int offset, List<string> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (string value in values)
			{
				ArrayManager.WriteString(ref data, ref offset, value);
			}
		}

		// Token: 0x06001D96 RID: 7574 RVA: 0x000C3008 File Offset: 0x000C1208
		public static List<string> ReadListString(byte[] data, ref int offset)
		{
			List<string> list = new List<string>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				int num2 = BitConverter.ToInt32(data, offset);
				offset += 4;
				string item = string.Empty;
				if (num2 > 0)
				{
					item = Encoding.UTF8.GetString(data, offset, num2);
					offset += num2;
				}
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D97 RID: 7575 RVA: 0x000159AF File Offset: 0x00013BAF
		public static void WriteDateTime(ref byte[] data, ref int offset, DateTime value)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 8);
			Array.Copy(BitConverter.GetBytes(value.ToBinary()), 0, data, offset, 8);
			offset += 8;
		}

		// Token: 0x06001D98 RID: 7576 RVA: 0x000C3078 File Offset: 0x000C1278
		public static DateTime ReadDateTime(byte[] data, ref int offset)
		{
			DateTime result = DateTime.MinValue;
			result = DateTime.FromBinary(BitConverter.ToInt64(data, offset));
			offset += 8;
			return result;
		}

		// Token: 0x06001D99 RID: 7577 RVA: 0x000C30A0 File Offset: 0x000C12A0
		public static void WriteListDateTime(ref byte[] data, ref int offset, List<DateTime> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DateTime value in values)
			{
				ArrayManager.WriteDateTime(ref data, ref offset, value);
			}
		}

		// Token: 0x06001D9A RID: 7578 RVA: 0x000C311C File Offset: 0x000C131C
		public static List<DateTime> ReadListDateTime(byte[] data, ref int offset)
		{
			List<DateTime> list = new List<DateTime>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DateTime item = DateTime.MinValue;
				item = DateTime.FromBinary(BitConverter.ToInt64(data, offset));
				offset += 8;
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001D9B RID: 7579 RVA: 0x000159D7 File Offset: 0x00013BD7
		private static void EnsureArrayIsLargeEnough(ref byte[] data, int offset, int lengthToAdd)
		{
			while (data.GetLength(0) < offset + lengthToAdd)
			{
				Array.Resize<byte>(ref data, data.GetLength(0) + 128);
			}
		}

		// Token: 0x06001D9C RID: 7580 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeChatRoomType(ref byte[] data, ref int offset, eChatRoomType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001D9D RID: 7581 RVA: 0x000C3174 File Offset: 0x000C1374
		public static void WriteListeChatRoomType(ref byte[] data, ref int offset, List<eChatRoomType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eChatRoomType value in values)
			{
				ArrayManager.WriteeChatRoomType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001D9E RID: 7582 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eChatRoomType ReadeChatRoomType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eChatRoomType)result;
		}

		// Token: 0x06001D9F RID: 7583 RVA: 0x000C31F0 File Offset: 0x000C13F0
		public static List<eChatRoomType> ReadListeChatRoomType(byte[] data, ref int offset)
		{
			List<eChatRoomType> list = new List<eChatRoomType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eChatRoomType item = ArrayManager.ReadeChatRoomType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DA0 RID: 7584 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeCreateChatRoomStatus(ref byte[] data, ref int offset, eCreateChatRoomStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DA1 RID: 7585 RVA: 0x000C3234 File Offset: 0x000C1434
		public static void WriteListeCreateChatRoomStatus(ref byte[] data, ref int offset, List<eCreateChatRoomStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eCreateChatRoomStatus value in values)
			{
				ArrayManager.WriteeCreateChatRoomStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DA2 RID: 7586 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eCreateChatRoomStatus ReadeCreateChatRoomStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eCreateChatRoomStatus)result;
		}

		// Token: 0x06001DA3 RID: 7587 RVA: 0x000C32B0 File Offset: 0x000C14B0
		public static List<eCreateChatRoomStatus> ReadListeCreateChatRoomStatus(byte[] data, ref int offset)
		{
			List<eCreateChatRoomStatus> list = new List<eCreateChatRoomStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eCreateChatRoomStatus item = ArrayManager.ReadeCreateChatRoomStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DA4 RID: 7588 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLeaveChatRoomStatus(ref byte[] data, ref int offset, eLeaveChatRoomStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DA5 RID: 7589 RVA: 0x000C32F4 File Offset: 0x000C14F4
		public static void WriteListeLeaveChatRoomStatus(ref byte[] data, ref int offset, List<eLeaveChatRoomStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLeaveChatRoomStatus value in values)
			{
				ArrayManager.WriteeLeaveChatRoomStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DA6 RID: 7590 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLeaveChatRoomStatus ReadeLeaveChatRoomStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLeaveChatRoomStatus)result;
		}

		// Token: 0x06001DA7 RID: 7591 RVA: 0x000C3370 File Offset: 0x000C1570
		public static List<eLeaveChatRoomStatus> ReadListeLeaveChatRoomStatus(byte[] data, ref int offset)
		{
			List<eLeaveChatRoomStatus> list = new List<eLeaveChatRoomStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLeaveChatRoomStatus item = ArrayManager.ReadeLeaveChatRoomStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DA8 RID: 7592 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeJoinDiscordChannelStatus(ref byte[] data, ref int offset, eJoinDiscordChannelStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DA9 RID: 7593 RVA: 0x000C33B4 File Offset: 0x000C15B4
		public static void WriteListeJoinDiscordChannelStatus(ref byte[] data, ref int offset, List<eJoinDiscordChannelStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eJoinDiscordChannelStatus value in values)
			{
				ArrayManager.WriteeJoinDiscordChannelStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DAA RID: 7594 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eJoinDiscordChannelStatus ReadeJoinDiscordChannelStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eJoinDiscordChannelStatus)result;
		}

		// Token: 0x06001DAB RID: 7595 RVA: 0x000C3430 File Offset: 0x000C1630
		public static List<eJoinDiscordChannelStatus> ReadListeJoinDiscordChannelStatus(byte[] data, ref int offset)
		{
			List<eJoinDiscordChannelStatus> list = new List<eJoinDiscordChannelStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eJoinDiscordChannelStatus item = ArrayManager.ReadeJoinDiscordChannelStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DAC RID: 7596 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLeaveDiscordChannelStatus(ref byte[] data, ref int offset, eLeaveDiscordChannelStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DAD RID: 7597 RVA: 0x000C3474 File Offset: 0x000C1674
		public static void WriteListeLeaveDiscordChannelStatus(ref byte[] data, ref int offset, List<eLeaveDiscordChannelStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLeaveDiscordChannelStatus value in values)
			{
				ArrayManager.WriteeLeaveDiscordChannelStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DAE RID: 7598 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLeaveDiscordChannelStatus ReadeLeaveDiscordChannelStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLeaveDiscordChannelStatus)result;
		}

		// Token: 0x06001DAF RID: 7599 RVA: 0x000C34F0 File Offset: 0x000C16F0
		public static List<eLeaveDiscordChannelStatus> ReadListeLeaveDiscordChannelStatus(byte[] data, ref int offset)
		{
			List<eLeaveDiscordChannelStatus> list = new List<eLeaveDiscordChannelStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLeaveDiscordChannelStatus item = ArrayManager.ReadeLeaveDiscordChannelStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DB0 RID: 7600 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeDiscordAuthenticationType(ref byte[] data, ref int offset, eDiscordAuthenticationType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DB1 RID: 7601 RVA: 0x000C3534 File Offset: 0x000C1734
		public static void WriteListeDiscordAuthenticationType(ref byte[] data, ref int offset, List<eDiscordAuthenticationType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eDiscordAuthenticationType value in values)
			{
				ArrayManager.WriteeDiscordAuthenticationType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DB2 RID: 7602 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eDiscordAuthenticationType ReadeDiscordAuthenticationType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eDiscordAuthenticationType)result;
		}

		// Token: 0x06001DB3 RID: 7603 RVA: 0x000C35B0 File Offset: 0x000C17B0
		public static List<eDiscordAuthenticationType> ReadListeDiscordAuthenticationType(byte[] data, ref int offset)
		{
			List<eDiscordAuthenticationType> list = new List<eDiscordAuthenticationType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eDiscordAuthenticationType item = ArrayManager.ReadeDiscordAuthenticationType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DB4 RID: 7604 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeRegistrationStatus(ref byte[] data, ref int offset, eRegistrationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DB5 RID: 7605 RVA: 0x000C35F4 File Offset: 0x000C17F4
		public static void WriteListeRegistrationStatus(ref byte[] data, ref int offset, List<eRegistrationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eRegistrationStatus value in values)
			{
				ArrayManager.WriteeRegistrationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DB6 RID: 7606 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eRegistrationStatus ReadeRegistrationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eRegistrationStatus)result;
		}

		// Token: 0x06001DB7 RID: 7607 RVA: 0x000C3670 File Offset: 0x000C1870
		public static List<eRegistrationStatus> ReadListeRegistrationStatus(byte[] data, ref int offset)
		{
			List<eRegistrationStatus> list = new List<eRegistrationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eRegistrationStatus item = ArrayManager.ReadeRegistrationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DB8 RID: 7608 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeBotDifficulty(ref byte[] data, ref int offset, eBotDifficulty value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DB9 RID: 7609 RVA: 0x000C36B4 File Offset: 0x000C18B4
		public static void WriteListeBotDifficulty(ref byte[] data, ref int offset, List<eBotDifficulty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eBotDifficulty value in values)
			{
				ArrayManager.WriteeBotDifficulty(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DBA RID: 7610 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eBotDifficulty ReadeBotDifficulty(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eBotDifficulty)result;
		}

		// Token: 0x06001DBB RID: 7611 RVA: 0x000C3730 File Offset: 0x000C1930
		public static List<eBotDifficulty> ReadListeBotDifficulty(byte[] data, ref int offset)
		{
			List<eBotDifficulty> list = new List<eBotDifficulty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eBotDifficulty item = ArrayManager.ReadeBotDifficulty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DBC RID: 7612 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeCommunityEventBoost(ref byte[] data, ref int offset, eCommunityEventBoost value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DBD RID: 7613 RVA: 0x000C3774 File Offset: 0x000C1974
		public static void WriteListeCommunityEventBoost(ref byte[] data, ref int offset, List<eCommunityEventBoost> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eCommunityEventBoost value in values)
			{
				ArrayManager.WriteeCommunityEventBoost(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DBE RID: 7614 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eCommunityEventBoost ReadeCommunityEventBoost(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eCommunityEventBoost)result;
		}

		// Token: 0x06001DBF RID: 7615 RVA: 0x000C37F0 File Offset: 0x000C19F0
		public static List<eCommunityEventBoost> ReadListeCommunityEventBoost(byte[] data, ref int offset)
		{
			List<eCommunityEventBoost> list = new List<eCommunityEventBoost>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eCommunityEventBoost item = ArrayManager.ReadeCommunityEventBoost(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DC0 RID: 7616 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGameType(ref byte[] data, ref int offset, eGameType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DC1 RID: 7617 RVA: 0x000C3834 File Offset: 0x000C1A34
		public static void WriteListeGameType(ref byte[] data, ref int offset, List<eGameType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGameType value in values)
			{
				ArrayManager.WriteeGameType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DC2 RID: 7618 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGameType ReadeGameType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGameType)result;
		}

		// Token: 0x06001DC3 RID: 7619 RVA: 0x000C38B0 File Offset: 0x000C1AB0
		public static List<eGameType> ReadListeGameType(byte[] data, ref int offset)
		{
			List<eGameType> list = new List<eGameType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGameType item = ArrayManager.ReadeGameType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DC4 RID: 7620 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeMapGameType(ref byte[] data, ref int offset, eMapGameType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DC5 RID: 7621 RVA: 0x000C38F4 File Offset: 0x000C1AF4
		public static void WriteListeMapGameType(ref byte[] data, ref int offset, List<eMapGameType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eMapGameType value in values)
			{
				ArrayManager.WriteeMapGameType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DC6 RID: 7622 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eMapGameType ReadeMapGameType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eMapGameType)result;
		}

		// Token: 0x06001DC7 RID: 7623 RVA: 0x000C3970 File Offset: 0x000C1B70
		public static List<eMapGameType> ReadListeMapGameType(byte[] data, ref int offset)
		{
			List<eMapGameType> list = new List<eMapGameType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eMapGameType item = ArrayManager.ReadeMapGameType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DC8 RID: 7624 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeMapPresentationStyle(ref byte[] data, ref int offset, eMapPresentationStyle value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DC9 RID: 7625 RVA: 0x000C39B4 File Offset: 0x000C1BB4
		public static void WriteListeMapPresentationStyle(ref byte[] data, ref int offset, List<eMapPresentationStyle> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eMapPresentationStyle value in values)
			{
				ArrayManager.WriteeMapPresentationStyle(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DCA RID: 7626 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eMapPresentationStyle ReadeMapPresentationStyle(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eMapPresentationStyle)result;
		}

		// Token: 0x06001DCB RID: 7627 RVA: 0x000C3A30 File Offset: 0x000C1C30
		public static List<eMapPresentationStyle> ReadListeMapPresentationStyle(byte[] data, ref int offset)
		{
			List<eMapPresentationStyle> list = new List<eMapPresentationStyle>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eMapPresentationStyle item = ArrayManager.ReadeMapPresentationStyle(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DCC RID: 7628 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLobbyRequestResult(ref byte[] data, ref int offset, eLobbyRequestResult value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DCD RID: 7629 RVA: 0x000C3A74 File Offset: 0x000C1C74
		public static void WriteListeLobbyRequestResult(ref byte[] data, ref int offset, List<eLobbyRequestResult> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLobbyRequestResult value in values)
			{
				ArrayManager.WriteeLobbyRequestResult(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DCE RID: 7630 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLobbyRequestResult ReadeLobbyRequestResult(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLobbyRequestResult)result;
		}

		// Token: 0x06001DCF RID: 7631 RVA: 0x000C3AF0 File Offset: 0x000C1CF0
		public static List<eLobbyRequestResult> ReadListeLobbyRequestResult(byte[] data, ref int offset)
		{
			List<eLobbyRequestResult> list = new List<eLobbyRequestResult>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLobbyRequestResult item = ArrayManager.ReadeLobbyRequestResult(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DD0 RID: 7632 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePlayerPresence(ref byte[] data, ref int offset, ePlayerPresence value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DD1 RID: 7633 RVA: 0x000C3B34 File Offset: 0x000C1D34
		public static void WriteListePlayerPresence(ref byte[] data, ref int offset, List<ePlayerPresence> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePlayerPresence value in values)
			{
				ArrayManager.WriteePlayerPresence(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DD2 RID: 7634 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePlayerPresence ReadePlayerPresence(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePlayerPresence)result;
		}

		// Token: 0x06001DD3 RID: 7635 RVA: 0x000C3BB0 File Offset: 0x000C1DB0
		public static List<ePlayerPresence> ReadListePlayerPresence(byte[] data, ref int offset)
		{
			List<ePlayerPresence> list = new List<ePlayerPresence>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePlayerPresence item = ArrayManager.ReadePlayerPresence(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DD4 RID: 7636 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeQuestRewardType(ref byte[] data, ref int offset, eQuestRewardType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DD5 RID: 7637 RVA: 0x000C3BF4 File Offset: 0x000C1DF4
		public static void WriteListeQuestRewardType(ref byte[] data, ref int offset, List<eQuestRewardType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eQuestRewardType value in values)
			{
				ArrayManager.WriteeQuestRewardType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DD6 RID: 7638 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eQuestRewardType ReadeQuestRewardType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eQuestRewardType)result;
		}

		// Token: 0x06001DD7 RID: 7639 RVA: 0x000C3C70 File Offset: 0x000C1E70
		public static List<eQuestRewardType> ReadListeQuestRewardType(byte[] data, ref int offset)
		{
			List<eQuestRewardType> list = new List<eQuestRewardType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eQuestRewardType item = ArrayManager.ReadeQuestRewardType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DD8 RID: 7640 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeServerRegion(ref byte[] data, ref int offset, eServerRegion value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DD9 RID: 7641 RVA: 0x000C3CB4 File Offset: 0x000C1EB4
		public static void WriteListeServerRegion(ref byte[] data, ref int offset, List<eServerRegion> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eServerRegion value in values)
			{
				ArrayManager.WriteeServerRegion(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DDA RID: 7642 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eServerRegion ReadeServerRegion(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eServerRegion)result;
		}

		// Token: 0x06001DDB RID: 7643 RVA: 0x000C3D30 File Offset: 0x000C1F30
		public static List<eServerRegion> ReadListeServerRegion(byte[] data, ref int offset)
		{
			List<eServerRegion> list = new List<eServerRegion>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eServerRegion item = ArrayManager.ReadeServerRegion(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DDC RID: 7644 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeClientHandshakeOutcome(ref byte[] data, ref int offset, eClientHandshakeOutcome value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DDD RID: 7645 RVA: 0x000C3D74 File Offset: 0x000C1F74
		public static void WriteListeClientHandshakeOutcome(ref byte[] data, ref int offset, List<eClientHandshakeOutcome> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eClientHandshakeOutcome value in values)
			{
				ArrayManager.WriteeClientHandshakeOutcome(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DDE RID: 7646 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eClientHandshakeOutcome ReadeClientHandshakeOutcome(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eClientHandshakeOutcome)result;
		}

		// Token: 0x06001DDF RID: 7647 RVA: 0x000C3DF0 File Offset: 0x000C1FF0
		public static List<eClientHandshakeOutcome> ReadListeClientHandshakeOutcome(byte[] data, ref int offset)
		{
			List<eClientHandshakeOutcome> list = new List<eClientHandshakeOutcome>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eClientHandshakeOutcome item = ArrayManager.ReadeClientHandshakeOutcome(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DE0 RID: 7648 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeConsumableTargetType(ref byte[] data, ref int offset, eConsumableTargetType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DE1 RID: 7649 RVA: 0x000C3E34 File Offset: 0x000C2034
		public static void WriteListeConsumableTargetType(ref byte[] data, ref int offset, List<eConsumableTargetType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eConsumableTargetType value in values)
			{
				ArrayManager.WriteeConsumableTargetType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DE2 RID: 7650 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eConsumableTargetType ReadeConsumableTargetType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eConsumableTargetType)result;
		}

		// Token: 0x06001DE3 RID: 7651 RVA: 0x000C3EB0 File Offset: 0x000C20B0
		public static List<eConsumableTargetType> ReadListeConsumableTargetType(byte[] data, ref int offset)
		{
			List<eConsumableTargetType> list = new List<eConsumableTargetType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eConsumableTargetType item = ArrayManager.ReadeConsumableTargetType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DE4 RID: 7652 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeConsumableType(ref byte[] data, ref int offset, eConsumableType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DE5 RID: 7653 RVA: 0x000C3EF4 File Offset: 0x000C20F4
		public static void WriteListeConsumableType(ref byte[] data, ref int offset, List<eConsumableType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eConsumableType value in values)
			{
				ArrayManager.WriteeConsumableType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DE6 RID: 7654 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eConsumableType ReadeConsumableType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eConsumableType)result;
		}

		// Token: 0x06001DE7 RID: 7655 RVA: 0x000C3F70 File Offset: 0x000C2170
		public static List<eConsumableType> ReadListeConsumableType(byte[] data, ref int offset)
		{
			List<eConsumableType> list = new List<eConsumableType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eConsumableType item = ArrayManager.ReadeConsumableType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DE8 RID: 7656 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeUnlockType(ref byte[] data, ref int offset, eUnlockType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DE9 RID: 7657 RVA: 0x000C3FB4 File Offset: 0x000C21B4
		public static void WriteListeUnlockType(ref byte[] data, ref int offset, List<eUnlockType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eUnlockType value in values)
			{
				ArrayManager.WriteeUnlockType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DEA RID: 7658 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eUnlockType ReadeUnlockType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eUnlockType)result;
		}

		// Token: 0x06001DEB RID: 7659 RVA: 0x000C4030 File Offset: 0x000C2230
		public static List<eUnlockType> ReadListeUnlockType(byte[] data, ref int offset)
		{
			List<eUnlockType> list = new List<eUnlockType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eUnlockType item = ArrayManager.ReadeUnlockType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DEC RID: 7660 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeChallengeStatus(ref byte[] data, ref int offset, eChallengeStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DED RID: 7661 RVA: 0x000C4074 File Offset: 0x000C2274
		public static void WriteListeChallengeStatus(ref byte[] data, ref int offset, List<eChallengeStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eChallengeStatus value in values)
			{
				ArrayManager.WriteeChallengeStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DEE RID: 7662 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eChallengeStatus ReadeChallengeStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eChallengeStatus)result;
		}

		// Token: 0x06001DEF RID: 7663 RVA: 0x000C40F0 File Offset: 0x000C22F0
		public static List<eChallengeStatus> ReadListeChallengeStatus(byte[] data, ref int offset)
		{
			List<eChallengeStatus> list = new List<eChallengeStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eChallengeStatus item = ArrayManager.ReadeChallengeStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DF0 RID: 7664 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeMissionStatus(ref byte[] data, ref int offset, eMissionStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DF1 RID: 7665 RVA: 0x000C4134 File Offset: 0x000C2334
		public static void WriteListeMissionStatus(ref byte[] data, ref int offset, List<eMissionStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eMissionStatus value in values)
			{
				ArrayManager.WriteeMissionStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DF2 RID: 7666 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eMissionStatus ReadeMissionStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eMissionStatus)result;
		}

		// Token: 0x06001DF3 RID: 7667 RVA: 0x000C41B0 File Offset: 0x000C23B0
		public static List<eMissionStatus> ReadListeMissionStatus(byte[] data, ref int offset)
		{
			List<eMissionStatus> list = new List<eMissionStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eMissionStatus item = ArrayManager.ReadeMissionStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DF4 RID: 7668 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeCampaignOperationStatus(ref byte[] data, ref int offset, eCampaignOperationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DF5 RID: 7669 RVA: 0x000C41F4 File Offset: 0x000C23F4
		public static void WriteListeCampaignOperationStatus(ref byte[] data, ref int offset, List<eCampaignOperationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eCampaignOperationStatus value in values)
			{
				ArrayManager.WriteeCampaignOperationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DF6 RID: 7670 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eCampaignOperationStatus ReadeCampaignOperationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eCampaignOperationStatus)result;
		}

		// Token: 0x06001DF7 RID: 7671 RVA: 0x000C4270 File Offset: 0x000C2470
		public static List<eCampaignOperationStatus> ReadListeCampaignOperationStatus(byte[] data, ref int offset)
		{
			List<eCampaignOperationStatus> list = new List<eCampaignOperationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eCampaignOperationStatus item = ArrayManager.ReadeCampaignOperationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DF8 RID: 7672 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeAuthRegisterUserStatus(ref byte[] data, ref int offset, eAuthRegisterUserStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DF9 RID: 7673 RVA: 0x000C42B4 File Offset: 0x000C24B4
		public static void WriteListeAuthRegisterUserStatus(ref byte[] data, ref int offset, List<eAuthRegisterUserStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eAuthRegisterUserStatus value in values)
			{
				ArrayManager.WriteeAuthRegisterUserStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DFA RID: 7674 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eAuthRegisterUserStatus ReadeAuthRegisterUserStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eAuthRegisterUserStatus)result;
		}

		// Token: 0x06001DFB RID: 7675 RVA: 0x000C4330 File Offset: 0x000C2530
		public static List<eAuthRegisterUserStatus> ReadListeAuthRegisterUserStatus(byte[] data, ref int offset)
		{
			List<eAuthRegisterUserStatus> list = new List<eAuthRegisterUserStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eAuthRegisterUserStatus item = ArrayManager.ReadeAuthRegisterUserStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001DFC RID: 7676 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeAuthLoginUserStatus(ref byte[] data, ref int offset, eAuthLoginUserStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001DFD RID: 7677 RVA: 0x000C4374 File Offset: 0x000C2574
		public static void WriteListeAuthLoginUserStatus(ref byte[] data, ref int offset, List<eAuthLoginUserStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eAuthLoginUserStatus value in values)
			{
				ArrayManager.WriteeAuthLoginUserStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001DFE RID: 7678 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eAuthLoginUserStatus ReadeAuthLoginUserStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eAuthLoginUserStatus)result;
		}

		// Token: 0x06001DFF RID: 7679 RVA: 0x000C43F0 File Offset: 0x000C25F0
		public static List<eAuthLoginUserStatus> ReadListeAuthLoginUserStatus(byte[] data, ref int offset)
		{
			List<eAuthLoginUserStatus> list = new List<eAuthLoginUserStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eAuthLoginUserStatus item = ArrayManager.ReadeAuthLoginUserStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E00 RID: 7680 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePartType(ref byte[] data, ref int offset, ePartType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E01 RID: 7681 RVA: 0x000C4434 File Offset: 0x000C2634
		public static void WriteListePartType(ref byte[] data, ref int offset, List<ePartType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePartType value in values)
			{
				ArrayManager.WriteePartType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E02 RID: 7682 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePartType ReadePartType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePartType)result;
		}

		// Token: 0x06001E03 RID: 7683 RVA: 0x000C44B0 File Offset: 0x000C26B0
		public static List<ePartType> ReadListePartType(byte[] data, ref int offset)
		{
			List<ePartType> list = new List<ePartType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePartType item = ArrayManager.ReadePartType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E04 RID: 7684 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeSceneID(ref byte[] data, ref int offset, eSceneID value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E05 RID: 7685 RVA: 0x000C44F4 File Offset: 0x000C26F4
		public static void WriteListeSceneID(ref byte[] data, ref int offset, List<eSceneID> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eSceneID value in values)
			{
				ArrayManager.WriteeSceneID(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E06 RID: 7686 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eSceneID ReadeSceneID(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eSceneID)result;
		}

		// Token: 0x06001E07 RID: 7687 RVA: 0x000C4570 File Offset: 0x000C2770
		public static List<eSceneID> ReadListeSceneID(byte[] data, ref int offset)
		{
			List<eSceneID> list = new List<eSceneID>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eSceneID item = ArrayManager.ReadeSceneID(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E08 RID: 7688 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeRecipeEntryType(ref byte[] data, ref int offset, eRecipeEntryType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E09 RID: 7689 RVA: 0x000C45B4 File Offset: 0x000C27B4
		public static void WriteListeRecipeEntryType(ref byte[] data, ref int offset, List<eRecipeEntryType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eRecipeEntryType value in values)
			{
				ArrayManager.WriteeRecipeEntryType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E0A RID: 7690 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eRecipeEntryType ReadeRecipeEntryType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eRecipeEntryType)result;
		}

		// Token: 0x06001E0B RID: 7691 RVA: 0x000C4630 File Offset: 0x000C2830
		public static List<eRecipeEntryType> ReadListeRecipeEntryType(byte[] data, ref int offset)
		{
			List<eRecipeEntryType> list = new List<eRecipeEntryType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eRecipeEntryType item = ArrayManager.ReadeRecipeEntryType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E0C RID: 7692 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeInventoryProtoType(ref byte[] data, ref int offset, eInventoryProtoType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E0D RID: 7693 RVA: 0x000C4674 File Offset: 0x000C2874
		public static void WriteListeInventoryProtoType(ref byte[] data, ref int offset, List<eInventoryProtoType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eInventoryProtoType value in values)
			{
				ArrayManager.WriteeInventoryProtoType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E0E RID: 7694 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eInventoryProtoType ReadeInventoryProtoType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eInventoryProtoType)result;
		}

		// Token: 0x06001E0F RID: 7695 RVA: 0x000C46F0 File Offset: 0x000C28F0
		public static List<eInventoryProtoType> ReadListeInventoryProtoType(byte[] data, ref int offset)
		{
			List<eInventoryProtoType> list = new List<eInventoryProtoType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eInventoryProtoType item = ArrayManager.ReadeInventoryProtoType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E10 RID: 7696 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePlayerBoostType(ref byte[] data, ref int offset, ePlayerBoostType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E11 RID: 7697 RVA: 0x000C4734 File Offset: 0x000C2934
		public static void WriteListePlayerBoostType(ref byte[] data, ref int offset, List<ePlayerBoostType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePlayerBoostType value in values)
			{
				ArrayManager.WriteePlayerBoostType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E12 RID: 7698 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePlayerBoostType ReadePlayerBoostType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePlayerBoostType)result;
		}

		// Token: 0x06001E13 RID: 7699 RVA: 0x000C47B0 File Offset: 0x000C29B0
		public static List<ePlayerBoostType> ReadListePlayerBoostType(byte[] data, ref int offset)
		{
			List<ePlayerBoostType> list = new List<ePlayerBoostType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePlayerBoostType item = ArrayManager.ReadePlayerBoostType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E14 RID: 7700 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeVanityType(ref byte[] data, ref int offset, eVanityType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E15 RID: 7701 RVA: 0x000C47F4 File Offset: 0x000C29F4
		public static void WriteListeVanityType(ref byte[] data, ref int offset, List<eVanityType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eVanityType value in values)
			{
				ArrayManager.WriteeVanityType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E16 RID: 7702 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eVanityType ReadeVanityType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eVanityType)result;
		}

		// Token: 0x06001E17 RID: 7703 RVA: 0x000C4870 File Offset: 0x000C2A70
		public static List<eVanityType> ReadListeVanityType(byte[] data, ref int offset)
		{
			List<eVanityType> list = new List<eVanityType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eVanityType item = ArrayManager.ReadeVanityType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E18 RID: 7704 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeAccountDataEventCodes(ref byte[] data, ref int offset, eAccountDataEventCodes value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E19 RID: 7705 RVA: 0x000C48B4 File Offset: 0x000C2AB4
		public static void WriteListeAccountDataEventCodes(ref byte[] data, ref int offset, List<eAccountDataEventCodes> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eAccountDataEventCodes value in values)
			{
				ArrayManager.WriteeAccountDataEventCodes(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E1A RID: 7706 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eAccountDataEventCodes ReadeAccountDataEventCodes(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eAccountDataEventCodes)result;
		}

		// Token: 0x06001E1B RID: 7707 RVA: 0x000C4930 File Offset: 0x000C2B30
		public static List<eAccountDataEventCodes> ReadListeAccountDataEventCodes(byte[] data, ref int offset)
		{
			List<eAccountDataEventCodes> list = new List<eAccountDataEventCodes>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eAccountDataEventCodes item = ArrayManager.ReadeAccountDataEventCodes(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E1C RID: 7708 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeDeckOperationResult(ref byte[] data, ref int offset, eDeckOperationResult value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E1D RID: 7709 RVA: 0x000C4974 File Offset: 0x000C2B74
		public static void WriteListeDeckOperationResult(ref byte[] data, ref int offset, List<eDeckOperationResult> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eDeckOperationResult value in values)
			{
				ArrayManager.WriteeDeckOperationResult(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E1E RID: 7710 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eDeckOperationResult ReadeDeckOperationResult(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eDeckOperationResult)result;
		}

		// Token: 0x06001E1F RID: 7711 RVA: 0x000C49F0 File Offset: 0x000C2BF0
		public static List<eDeckOperationResult> ReadListeDeckOperationResult(byte[] data, ref int offset)
		{
			List<eDeckOperationResult> list = new List<eDeckOperationResult>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eDeckOperationResult item = ArrayManager.ReadeDeckOperationResult(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E20 RID: 7712 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeRequestResult(ref byte[] data, ref int offset, eRequestResult value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E21 RID: 7713 RVA: 0x000C4A34 File Offset: 0x000C2C34
		public static void WriteListeRequestResult(ref byte[] data, ref int offset, List<eRequestResult> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eRequestResult value in values)
			{
				ArrayManager.WriteeRequestResult(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E22 RID: 7714 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eRequestResult ReadeRequestResult(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eRequestResult)result;
		}

		// Token: 0x06001E23 RID: 7715 RVA: 0x000C4AB0 File Offset: 0x000C2CB0
		public static List<eRequestResult> ReadListeRequestResult(byte[] data, ref int offset)
		{
			List<eRequestResult> list = new List<eRequestResult>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eRequestResult item = ArrayManager.ReadeRequestResult(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E24 RID: 7716 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteHardAwardTypes(ref byte[] data, ref int offset, HardAwardTypes value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E25 RID: 7717 RVA: 0x000C4AF4 File Offset: 0x000C2CF4
		public static void WriteListHardAwardTypes(ref byte[] data, ref int offset, List<HardAwardTypes> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HardAwardTypes value in values)
			{
				ArrayManager.WriteHardAwardTypes(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E26 RID: 7718 RVA: 0x000C2224 File Offset: 0x000C0424
		public static HardAwardTypes ReadHardAwardTypes(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (HardAwardTypes)result;
		}

		// Token: 0x06001E27 RID: 7719 RVA: 0x000C4B70 File Offset: 0x000C2D70
		public static List<HardAwardTypes> ReadListHardAwardTypes(byte[] data, ref int offset)
		{
			List<HardAwardTypes> list = new List<HardAwardTypes>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HardAwardTypes item = ArrayManager.ReadHardAwardTypes(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E28 RID: 7720 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePriceCurrencyType(ref byte[] data, ref int offset, ePriceCurrencyType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E29 RID: 7721 RVA: 0x000C4BB4 File Offset: 0x000C2DB4
		public static void WriteListePriceCurrencyType(ref byte[] data, ref int offset, List<ePriceCurrencyType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePriceCurrencyType value in values)
			{
				ArrayManager.WriteePriceCurrencyType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E2A RID: 7722 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePriceCurrencyType ReadePriceCurrencyType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePriceCurrencyType)result;
		}

		// Token: 0x06001E2B RID: 7723 RVA: 0x000C4C30 File Offset: 0x000C2E30
		public static List<ePriceCurrencyType> ReadListePriceCurrencyType(byte[] data, ref int offset)
		{
			List<ePriceCurrencyType> list = new List<ePriceCurrencyType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePriceCurrencyType item = ArrayManager.ReadePriceCurrencyType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E2C RID: 7724 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeOfferEntryCurrencyType(ref byte[] data, ref int offset, eOfferEntryCurrencyType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E2D RID: 7725 RVA: 0x000C4C74 File Offset: 0x000C2E74
		public static void WriteListeOfferEntryCurrencyType(ref byte[] data, ref int offset, List<eOfferEntryCurrencyType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eOfferEntryCurrencyType value in values)
			{
				ArrayManager.WriteeOfferEntryCurrencyType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E2E RID: 7726 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eOfferEntryCurrencyType ReadeOfferEntryCurrencyType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eOfferEntryCurrencyType)result;
		}

		// Token: 0x06001E2F RID: 7727 RVA: 0x000C4CF0 File Offset: 0x000C2EF0
		public static List<eOfferEntryCurrencyType> ReadListeOfferEntryCurrencyType(byte[] data, ref int offset)
		{
			List<eOfferEntryCurrencyType> list = new List<eOfferEntryCurrencyType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eOfferEntryCurrencyType item = ArrayManager.ReadeOfferEntryCurrencyType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E30 RID: 7728 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeStoreTransactionRequestStatus(ref byte[] data, ref int offset, eStoreTransactionRequestStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E31 RID: 7729 RVA: 0x000C4D34 File Offset: 0x000C2F34
		public static void WriteListeStoreTransactionRequestStatus(ref byte[] data, ref int offset, List<eStoreTransactionRequestStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eStoreTransactionRequestStatus value in values)
			{
				ArrayManager.WriteeStoreTransactionRequestStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E32 RID: 7730 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eStoreTransactionRequestStatus ReadeStoreTransactionRequestStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eStoreTransactionRequestStatus)result;
		}

		// Token: 0x06001E33 RID: 7731 RVA: 0x000C4DB0 File Offset: 0x000C2FB0
		public static List<eStoreTransactionRequestStatus> ReadListeStoreTransactionRequestStatus(byte[] data, ref int offset)
		{
			List<eStoreTransactionRequestStatus> list = new List<eStoreTransactionRequestStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eStoreTransactionRequestStatus item = ArrayManager.ReadeStoreTransactionRequestStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E34 RID: 7732 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeVirtualCurrencyTransactionStatus(ref byte[] data, ref int offset, eVirtualCurrencyTransactionStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E35 RID: 7733 RVA: 0x000C4DF4 File Offset: 0x000C2FF4
		public static void WriteListeVirtualCurrencyTransactionStatus(ref byte[] data, ref int offset, List<eVirtualCurrencyTransactionStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eVirtualCurrencyTransactionStatus value in values)
			{
				ArrayManager.WriteeVirtualCurrencyTransactionStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E36 RID: 7734 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eVirtualCurrencyTransactionStatus ReadeVirtualCurrencyTransactionStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eVirtualCurrencyTransactionStatus)result;
		}

		// Token: 0x06001E37 RID: 7735 RVA: 0x000C4E70 File Offset: 0x000C3070
		public static List<eVirtualCurrencyTransactionStatus> ReadListeVirtualCurrencyTransactionStatus(byte[] data, ref int offset)
		{
			List<eVirtualCurrencyTransactionStatus> list = new List<eVirtualCurrencyTransactionStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eVirtualCurrencyTransactionStatus item = ArrayManager.ReadeVirtualCurrencyTransactionStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E38 RID: 7736 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeContentSize(ref byte[] data, ref int offset, eContentSize value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E39 RID: 7737 RVA: 0x000C4EB4 File Offset: 0x000C30B4
		public static void WriteListeContentSize(ref byte[] data, ref int offset, List<eContentSize> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eContentSize value in values)
			{
				ArrayManager.WriteeContentSize(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E3A RID: 7738 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eContentSize ReadeContentSize(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eContentSize)result;
		}

		// Token: 0x06001E3B RID: 7739 RVA: 0x000C4F30 File Offset: 0x000C3130
		public static List<eContentSize> ReadListeContentSize(byte[] data, ref int offset)
		{
			List<eContentSize> list = new List<eContentSize>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eContentSize item = ArrayManager.ReadeContentSize(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E3C RID: 7740 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeContentType(ref byte[] data, ref int offset, eContentType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E3D RID: 7741 RVA: 0x000C4F74 File Offset: 0x000C3174
		public static void WriteListeContentType(ref byte[] data, ref int offset, List<eContentType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eContentType value in values)
			{
				ArrayManager.WriteeContentType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E3E RID: 7742 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eContentType ReadeContentType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eContentType)result;
		}

		// Token: 0x06001E3F RID: 7743 RVA: 0x000C4FF0 File Offset: 0x000C31F0
		public static List<eContentType> ReadListeContentType(byte[] data, ref int offset)
		{
			List<eContentType> list = new List<eContentType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eContentType item = ArrayManager.ReadeContentType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E40 RID: 7744 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeTabLink(ref byte[] data, ref int offset, eTabLink value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E41 RID: 7745 RVA: 0x000C5034 File Offset: 0x000C3234
		public static void WriteListeTabLink(ref byte[] data, ref int offset, List<eTabLink> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eTabLink value in values)
			{
				ArrayManager.WriteeTabLink(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E42 RID: 7746 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eTabLink ReadeTabLink(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eTabLink)result;
		}

		// Token: 0x06001E43 RID: 7747 RVA: 0x000C50B0 File Offset: 0x000C32B0
		public static List<eTabLink> ReadListeTabLink(byte[] data, ref int offset)
		{
			List<eTabLink> list = new List<eTabLink>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eTabLink item = ArrayManager.ReadeTabLink(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E44 RID: 7748 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePlayerAwardType(ref byte[] data, ref int offset, ePlayerAwardType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E45 RID: 7749 RVA: 0x000C50F4 File Offset: 0x000C32F4
		public static void WriteListePlayerAwardType(ref byte[] data, ref int offset, List<ePlayerAwardType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePlayerAwardType value in values)
			{
				ArrayManager.WriteePlayerAwardType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E46 RID: 7750 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePlayerAwardType ReadePlayerAwardType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePlayerAwardType)result;
		}

		// Token: 0x06001E47 RID: 7751 RVA: 0x000C5170 File Offset: 0x000C3370
		public static List<ePlayerAwardType> ReadListePlayerAwardType(byte[] data, ref int offset)
		{
			List<ePlayerAwardType> list = new List<ePlayerAwardType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePlayerAwardType item = ArrayManager.ReadePlayerAwardType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E48 RID: 7752 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeValidationField(ref byte[] data, ref int offset, eValidationField value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E49 RID: 7753 RVA: 0x000C51B4 File Offset: 0x000C33B4
		public static void WriteListeValidationField(ref byte[] data, ref int offset, List<eValidationField> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eValidationField value in values)
			{
				ArrayManager.WriteeValidationField(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E4A RID: 7754 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eValidationField ReadeValidationField(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eValidationField)result;
		}

		// Token: 0x06001E4B RID: 7755 RVA: 0x000C5230 File Offset: 0x000C3430
		public static List<eValidationField> ReadListeValidationField(byte[] data, ref int offset)
		{
			List<eValidationField> list = new List<eValidationField>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eValidationField item = ArrayManager.ReadeValidationField(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E4C RID: 7756 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGuildCreationField(ref byte[] data, ref int offset, eGuildCreationField value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E4D RID: 7757 RVA: 0x000C5274 File Offset: 0x000C3474
		public static void WriteListeGuildCreationField(ref byte[] data, ref int offset, List<eGuildCreationField> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGuildCreationField value in values)
			{
				ArrayManager.WriteeGuildCreationField(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E4E RID: 7758 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGuildCreationField ReadeGuildCreationField(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGuildCreationField)result;
		}

		// Token: 0x06001E4F RID: 7759 RVA: 0x000C52F0 File Offset: 0x000C34F0
		public static List<eGuildCreationField> ReadListeGuildCreationField(byte[] data, ref int offset)
		{
			List<eGuildCreationField> list = new List<eGuildCreationField>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGuildCreationField item = ArrayManager.ReadeGuildCreationField(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E50 RID: 7760 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGameABTestType(ref byte[] data, ref int offset, eGameABTestType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E51 RID: 7761 RVA: 0x000C5334 File Offset: 0x000C3534
		public static void WriteListeGameABTestType(ref byte[] data, ref int offset, List<eGameABTestType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGameABTestType value in values)
			{
				ArrayManager.WriteeGameABTestType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E52 RID: 7762 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGameABTestType ReadeGameABTestType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGameABTestType)result;
		}

		// Token: 0x06001E53 RID: 7763 RVA: 0x000C53B0 File Offset: 0x000C35B0
		public static List<eGameABTestType> ReadListeGameABTestType(byte[] data, ref int offset)
		{
			List<eGameABTestType> list = new List<eGameABTestType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGameABTestType item = ArrayManager.ReadeGameABTestType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E54 RID: 7764 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeCraftingOperationStatus(ref byte[] data, ref int offset, eCraftingOperationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E55 RID: 7765 RVA: 0x000C53F4 File Offset: 0x000C35F4
		public static void WriteListeCraftingOperationStatus(ref byte[] data, ref int offset, List<eCraftingOperationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eCraftingOperationStatus value in values)
			{
				ArrayManager.WriteeCraftingOperationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E56 RID: 7766 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eCraftingOperationStatus ReadeCraftingOperationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eCraftingOperationStatus)result;
		}

		// Token: 0x06001E57 RID: 7767 RVA: 0x000C5470 File Offset: 0x000C3670
		public static List<eCraftingOperationStatus> ReadListeCraftingOperationStatus(byte[] data, ref int offset)
		{
			List<eCraftingOperationStatus> list = new List<eCraftingOperationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eCraftingOperationStatus item = ArrayManager.ReadeCraftingOperationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E58 RID: 7768 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeQuestOperationStatus(ref byte[] data, ref int offset, eQuestOperationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E59 RID: 7769 RVA: 0x000C54B4 File Offset: 0x000C36B4
		public static void WriteListeQuestOperationStatus(ref byte[] data, ref int offset, List<eQuestOperationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eQuestOperationStatus value in values)
			{
				ArrayManager.WriteeQuestOperationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E5A RID: 7770 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eQuestOperationStatus ReadeQuestOperationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eQuestOperationStatus)result;
		}

		// Token: 0x06001E5B RID: 7771 RVA: 0x000C5530 File Offset: 0x000C3730
		public static List<eQuestOperationStatus> ReadListeQuestOperationStatus(byte[] data, ref int offset)
		{
			List<eQuestOperationStatus> list = new List<eQuestOperationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eQuestOperationStatus item = ArrayManager.ReadeQuestOperationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E5C RID: 7772 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeAchievementCategory(ref byte[] data, ref int offset, eAchievementCategory value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E5D RID: 7773 RVA: 0x000C5574 File Offset: 0x000C3774
		public static void WriteListeAchievementCategory(ref byte[] data, ref int offset, List<eAchievementCategory> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eAchievementCategory value in values)
			{
				ArrayManager.WriteeAchievementCategory(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E5E RID: 7774 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eAchievementCategory ReadeAchievementCategory(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eAchievementCategory)result;
		}

		// Token: 0x06001E5F RID: 7775 RVA: 0x000C55F0 File Offset: 0x000C37F0
		public static List<eAchievementCategory> ReadListeAchievementCategory(byte[] data, ref int offset)
		{
			List<eAchievementCategory> list = new List<eAchievementCategory>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eAchievementCategory item = ArrayManager.ReadeAchievementCategory(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E60 RID: 7776 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeTutorialProgressAnalytics(ref byte[] data, ref int offset, eTutorialProgressAnalytics value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E61 RID: 7777 RVA: 0x000C5634 File Offset: 0x000C3834
		public static void WriteListeTutorialProgressAnalytics(ref byte[] data, ref int offset, List<eTutorialProgressAnalytics> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eTutorialProgressAnalytics value in values)
			{
				ArrayManager.WriteeTutorialProgressAnalytics(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E62 RID: 7778 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eTutorialProgressAnalytics ReadeTutorialProgressAnalytics(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eTutorialProgressAnalytics)result;
		}

		// Token: 0x06001E63 RID: 7779 RVA: 0x000C56B0 File Offset: 0x000C38B0
		public static List<eTutorialProgressAnalytics> ReadListeTutorialProgressAnalytics(byte[] data, ref int offset)
		{
			List<eTutorialProgressAnalytics> list = new List<eTutorialProgressAnalytics>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eTutorialProgressAnalytics item = ArrayManager.ReadeTutorialProgressAnalytics(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E64 RID: 7780 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeReferralRewardEventType(ref byte[] data, ref int offset, eReferralRewardEventType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E65 RID: 7781 RVA: 0x000C56F4 File Offset: 0x000C38F4
		public static void WriteListeReferralRewardEventType(ref byte[] data, ref int offset, List<eReferralRewardEventType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eReferralRewardEventType value in values)
			{
				ArrayManager.WriteeReferralRewardEventType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E66 RID: 7782 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eReferralRewardEventType ReadeReferralRewardEventType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eReferralRewardEventType)result;
		}

		// Token: 0x06001E67 RID: 7783 RVA: 0x000C5770 File Offset: 0x000C3970
		public static List<eReferralRewardEventType> ReadListeReferralRewardEventType(byte[] data, ref int offset)
		{
			List<eReferralRewardEventType> list = new List<eReferralRewardEventType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eReferralRewardEventType item = ArrayManager.ReadeReferralRewardEventType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E68 RID: 7784 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeClaimMessageItemsStatus(ref byte[] data, ref int offset, eClaimMessageItemsStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E69 RID: 7785 RVA: 0x000C57B4 File Offset: 0x000C39B4
		public static void WriteListeClaimMessageItemsStatus(ref byte[] data, ref int offset, List<eClaimMessageItemsStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eClaimMessageItemsStatus value in values)
			{
				ArrayManager.WriteeClaimMessageItemsStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E6A RID: 7786 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eClaimMessageItemsStatus ReadeClaimMessageItemsStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eClaimMessageItemsStatus)result;
		}

		// Token: 0x06001E6B RID: 7787 RVA: 0x000C5830 File Offset: 0x000C3A30
		public static List<eClaimMessageItemsStatus> ReadListeClaimMessageItemsStatus(byte[] data, ref int offset)
		{
			List<eClaimMessageItemsStatus> list = new List<eClaimMessageItemsStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eClaimMessageItemsStatus item = ArrayManager.ReadeClaimMessageItemsStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E6C RID: 7788 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeNameplateOperationStatus(ref byte[] data, ref int offset, eNameplateOperationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E6D RID: 7789 RVA: 0x000C5874 File Offset: 0x000C3A74
		public static void WriteListeNameplateOperationStatus(ref byte[] data, ref int offset, List<eNameplateOperationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eNameplateOperationStatus value in values)
			{
				ArrayManager.WriteeNameplateOperationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E6E RID: 7790 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eNameplateOperationStatus ReadeNameplateOperationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eNameplateOperationStatus)result;
		}

		// Token: 0x06001E6F RID: 7791 RVA: 0x000C58F0 File Offset: 0x000C3AF0
		public static List<eNameplateOperationStatus> ReadListeNameplateOperationStatus(byte[] data, ref int offset)
		{
			List<eNameplateOperationStatus> list = new List<eNameplateOperationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eNameplateOperationStatus item = ArrayManager.ReadeNameplateOperationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E70 RID: 7792 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGoalType(ref byte[] data, ref int offset, eGoalType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E71 RID: 7793 RVA: 0x000C5934 File Offset: 0x000C3B34
		public static void WriteListeGoalType(ref byte[] data, ref int offset, List<eGoalType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGoalType value in values)
			{
				ArrayManager.WriteeGoalType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E72 RID: 7794 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGoalType ReadeGoalType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGoalType)result;
		}

		// Token: 0x06001E73 RID: 7795 RVA: 0x000C59B0 File Offset: 0x000C3BB0
		public static List<eGoalType> ReadListeGoalType(byte[] data, ref int offset)
		{
			List<eGoalType> list = new List<eGoalType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGoalType item = ArrayManager.ReadeGoalType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E74 RID: 7796 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeKeystoneRerollStatus(ref byte[] data, ref int offset, eKeystoneRerollStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E75 RID: 7797 RVA: 0x000C59F4 File Offset: 0x000C3BF4
		public static void WriteListeKeystoneRerollStatus(ref byte[] data, ref int offset, List<eKeystoneRerollStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eKeystoneRerollStatus value in values)
			{
				ArrayManager.WriteeKeystoneRerollStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E76 RID: 7798 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eKeystoneRerollStatus ReadeKeystoneRerollStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eKeystoneRerollStatus)result;
		}

		// Token: 0x06001E77 RID: 7799 RVA: 0x000C5A70 File Offset: 0x000C3C70
		public static List<eKeystoneRerollStatus> ReadListeKeystoneRerollStatus(byte[] data, ref int offset)
		{
			List<eKeystoneRerollStatus> list = new List<eKeystoneRerollStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eKeystoneRerollStatus item = ArrayManager.ReadeKeystoneRerollStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E78 RID: 7800 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeStreamerAPIResponseStatus(ref byte[] data, ref int offset, eStreamerAPIResponseStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E79 RID: 7801 RVA: 0x000C5AB4 File Offset: 0x000C3CB4
		public static void WriteListeStreamerAPIResponseStatus(ref byte[] data, ref int offset, List<eStreamerAPIResponseStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eStreamerAPIResponseStatus value in values)
			{
				ArrayManager.WriteeStreamerAPIResponseStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E7A RID: 7802 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eStreamerAPIResponseStatus ReadeStreamerAPIResponseStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eStreamerAPIResponseStatus)result;
		}

		// Token: 0x06001E7B RID: 7803 RVA: 0x000C5B30 File Offset: 0x000C3D30
		public static List<eStreamerAPIResponseStatus> ReadListeStreamerAPIResponseStatus(byte[] data, ref int offset)
		{
			List<eStreamerAPIResponseStatus> list = new List<eStreamerAPIResponseStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eStreamerAPIResponseStatus item = ArrayManager.ReadeStreamerAPIResponseStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E7C RID: 7804 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLeaderboardType(ref byte[] data, ref int offset, eLeaderboardType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E7D RID: 7805 RVA: 0x000C5B74 File Offset: 0x000C3D74
		public static void WriteListeLeaderboardType(ref byte[] data, ref int offset, List<eLeaderboardType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLeaderboardType value in values)
			{
				ArrayManager.WriteeLeaderboardType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E7E RID: 7806 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLeaderboardType ReadeLeaderboardType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLeaderboardType)result;
		}

		// Token: 0x06001E7F RID: 7807 RVA: 0x000C5BF0 File Offset: 0x000C3DF0
		public static List<eLeaderboardType> ReadListeLeaderboardType(byte[] data, ref int offset)
		{
			List<eLeaderboardType> list = new List<eLeaderboardType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLeaderboardType item = ArrayManager.ReadeLeaderboardType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E80 RID: 7808 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLeaderboardSearchType(ref byte[] data, ref int offset, eLeaderboardSearchType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E81 RID: 7809 RVA: 0x000C5C34 File Offset: 0x000C3E34
		public static void WriteListeLeaderboardSearchType(ref byte[] data, ref int offset, List<eLeaderboardSearchType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLeaderboardSearchType value in values)
			{
				ArrayManager.WriteeLeaderboardSearchType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E82 RID: 7810 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLeaderboardSearchType ReadeLeaderboardSearchType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLeaderboardSearchType)result;
		}

		// Token: 0x06001E83 RID: 7811 RVA: 0x000C5CB0 File Offset: 0x000C3EB0
		public static List<eLeaderboardSearchType> ReadListeLeaderboardSearchType(byte[] data, ref int offset)
		{
			List<eLeaderboardSearchType> list = new List<eLeaderboardSearchType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLeaderboardSearchType item = ArrayManager.ReadeLeaderboardSearchType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E84 RID: 7812 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLeaderboardFilter(ref byte[] data, ref int offset, eLeaderboardFilter value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E85 RID: 7813 RVA: 0x000C5CF4 File Offset: 0x000C3EF4
		public static void WriteListeLeaderboardFilter(ref byte[] data, ref int offset, List<eLeaderboardFilter> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLeaderboardFilter value in values)
			{
				ArrayManager.WriteeLeaderboardFilter(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E86 RID: 7814 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLeaderboardFilter ReadeLeaderboardFilter(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLeaderboardFilter)result;
		}

		// Token: 0x06001E87 RID: 7815 RVA: 0x000C5D70 File Offset: 0x000C3F70
		public static List<eLeaderboardFilter> ReadListeLeaderboardFilter(byte[] data, ref int offset)
		{
			List<eLeaderboardFilter> list = new List<eLeaderboardFilter>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLeaderboardFilter item = ArrayManager.ReadeLeaderboardFilter(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E88 RID: 7816 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeSabotageTiers(ref byte[] data, ref int offset, eSabotageTiers value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E89 RID: 7817 RVA: 0x000C5DB4 File Offset: 0x000C3FB4
		public static void WriteListeSabotageTiers(ref byte[] data, ref int offset, List<eSabotageTiers> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eSabotageTiers value in values)
			{
				ArrayManager.WriteeSabotageTiers(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E8A RID: 7818 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eSabotageTiers ReadeSabotageTiers(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eSabotageTiers)result;
		}

		// Token: 0x06001E8B RID: 7819 RVA: 0x000C5E30 File Offset: 0x000C4030
		public static List<eSabotageTiers> ReadListeSabotageTiers(byte[] data, ref int offset)
		{
			List<eSabotageTiers> list = new List<eSabotageTiers>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eSabotageTiers item = ArrayManager.ReadeSabotageTiers(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E8C RID: 7820 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLeaderboardOperationResult(ref byte[] data, ref int offset, eLeaderboardOperationResult value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E8D RID: 7821 RVA: 0x000C5E74 File Offset: 0x000C4074
		public static void WriteListeLeaderboardOperationResult(ref byte[] data, ref int offset, List<eLeaderboardOperationResult> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLeaderboardOperationResult value in values)
			{
				ArrayManager.WriteeLeaderboardOperationResult(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E8E RID: 7822 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLeaderboardOperationResult ReadeLeaderboardOperationResult(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLeaderboardOperationResult)result;
		}

		// Token: 0x06001E8F RID: 7823 RVA: 0x000C5EF0 File Offset: 0x000C40F0
		public static List<eLeaderboardOperationResult> ReadListeLeaderboardOperationResult(byte[] data, ref int offset)
		{
			List<eLeaderboardOperationResult> list = new List<eLeaderboardOperationResult>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLeaderboardOperationResult item = ArrayManager.ReadeLeaderboardOperationResult(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E90 RID: 7824 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLobbyState(ref byte[] data, ref int offset, eLobbyState value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E91 RID: 7825 RVA: 0x000C5F34 File Offset: 0x000C4134
		public static void WriteListeLobbyState(ref byte[] data, ref int offset, List<eLobbyState> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLobbyState value in values)
			{
				ArrayManager.WriteeLobbyState(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E92 RID: 7826 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLobbyState ReadeLobbyState(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLobbyState)result;
		}

		// Token: 0x06001E93 RID: 7827 RVA: 0x000C5FB0 File Offset: 0x000C41B0
		public static List<eLobbyState> ReadListeLobbyState(byte[] data, ref int offset)
		{
			List<eLobbyState> list = new List<eLobbyState>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLobbyState item = ArrayManager.ReadeLobbyState(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E94 RID: 7828 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLobbyEventCodes(ref byte[] data, ref int offset, eLobbyEventCodes value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E95 RID: 7829 RVA: 0x000C5FF4 File Offset: 0x000C41F4
		public static void WriteListeLobbyEventCodes(ref byte[] data, ref int offset, List<eLobbyEventCodes> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLobbyEventCodes value in values)
			{
				ArrayManager.WriteeLobbyEventCodes(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E96 RID: 7830 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLobbyEventCodes ReadeLobbyEventCodes(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLobbyEventCodes)result;
		}

		// Token: 0x06001E97 RID: 7831 RVA: 0x000C6070 File Offset: 0x000C4270
		public static List<eLobbyEventCodes> ReadListeLobbyEventCodes(byte[] data, ref int offset)
		{
			List<eLobbyEventCodes> list = new List<eLobbyEventCodes>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLobbyEventCodes item = ArrayManager.ReadeLobbyEventCodes(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E98 RID: 7832 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLobbyListSplitType(ref byte[] data, ref int offset, eLobbyListSplitType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E99 RID: 7833 RVA: 0x000C60B4 File Offset: 0x000C42B4
		public static void WriteListeLobbyListSplitType(ref byte[] data, ref int offset, List<eLobbyListSplitType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLobbyListSplitType value in values)
			{
				ArrayManager.WriteeLobbyListSplitType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E9A RID: 7834 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLobbyListSplitType ReadeLobbyListSplitType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLobbyListSplitType)result;
		}

		// Token: 0x06001E9B RID: 7835 RVA: 0x000C6130 File Offset: 0x000C4330
		public static List<eLobbyListSplitType> ReadListeLobbyListSplitType(byte[] data, ref int offset)
		{
			List<eLobbyListSplitType> list = new List<eLobbyListSplitType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLobbyListSplitType item = ArrayManager.ReadeLobbyListSplitType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001E9C RID: 7836 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeSpecialLobbyEventCodes(ref byte[] data, ref int offset, eSpecialLobbyEventCodes value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001E9D RID: 7837 RVA: 0x000C6174 File Offset: 0x000C4374
		public static void WriteListeSpecialLobbyEventCodes(ref byte[] data, ref int offset, List<eSpecialLobbyEventCodes> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eSpecialLobbyEventCodes value in values)
			{
				ArrayManager.WriteeSpecialLobbyEventCodes(ref data, ref offset, value);
			}
		}

		// Token: 0x06001E9E RID: 7838 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eSpecialLobbyEventCodes ReadeSpecialLobbyEventCodes(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eSpecialLobbyEventCodes)result;
		}

		// Token: 0x06001E9F RID: 7839 RVA: 0x000C61F0 File Offset: 0x000C43F0
		public static List<eSpecialLobbyEventCodes> ReadListeSpecialLobbyEventCodes(byte[] data, ref int offset)
		{
			List<eSpecialLobbyEventCodes> list = new List<eSpecialLobbyEventCodes>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eSpecialLobbyEventCodes item = ArrayManager.ReadeSpecialLobbyEventCodes(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EA0 RID: 7840 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeLobbyInviteStatus(ref byte[] data, ref int offset, eLobbyInviteStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EA1 RID: 7841 RVA: 0x000C6234 File Offset: 0x000C4434
		public static void WriteListeLobbyInviteStatus(ref byte[] data, ref int offset, List<eLobbyInviteStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eLobbyInviteStatus value in values)
			{
				ArrayManager.WriteeLobbyInviteStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EA2 RID: 7842 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eLobbyInviteStatus ReadeLobbyInviteStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eLobbyInviteStatus)result;
		}

		// Token: 0x06001EA3 RID: 7843 RVA: 0x000C62B0 File Offset: 0x000C44B0
		public static List<eLobbyInviteStatus> ReadListeLobbyInviteStatus(byte[] data, ref int offset)
		{
			List<eLobbyInviteStatus> list = new List<eLobbyInviteStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eLobbyInviteStatus item = ArrayManager.ReadeLobbyInviteStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EA4 RID: 7844 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeMatchmakingState(ref byte[] data, ref int offset, eMatchmakingState value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EA5 RID: 7845 RVA: 0x000C62F4 File Offset: 0x000C44F4
		public static void WriteListeMatchmakingState(ref byte[] data, ref int offset, List<eMatchmakingState> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eMatchmakingState value in values)
			{
				ArrayManager.WriteeMatchmakingState(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EA6 RID: 7846 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eMatchmakingState ReadeMatchmakingState(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eMatchmakingState)result;
		}

		// Token: 0x06001EA7 RID: 7847 RVA: 0x000C6370 File Offset: 0x000C4570
		public static List<eMatchmakingState> ReadListeMatchmakingState(byte[] data, ref int offset)
		{
			List<eMatchmakingState> list = new List<eMatchmakingState>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eMatchmakingState item = ArrayManager.ReadeMatchmakingState(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EA8 RID: 7848 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeMatchmakingType(ref byte[] data, ref int offset, eMatchmakingType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EA9 RID: 7849 RVA: 0x000C63B4 File Offset: 0x000C45B4
		public static void WriteListeMatchmakingType(ref byte[] data, ref int offset, List<eMatchmakingType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eMatchmakingType value in values)
			{
				ArrayManager.WriteeMatchmakingType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EAA RID: 7850 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eMatchmakingType ReadeMatchmakingType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eMatchmakingType)result;
		}

		// Token: 0x06001EAB RID: 7851 RVA: 0x000C6430 File Offset: 0x000C4630
		public static List<eMatchmakingType> ReadListeMatchmakingType(byte[] data, ref int offset)
		{
			List<eMatchmakingType> list = new List<eMatchmakingType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eMatchmakingType item = ArrayManager.ReadeMatchmakingType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EAC RID: 7852 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeApproximateWaitTime(ref byte[] data, ref int offset, eApproximateWaitTime value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EAD RID: 7853 RVA: 0x000C6474 File Offset: 0x000C4674
		public static void WriteListeApproximateWaitTime(ref byte[] data, ref int offset, List<eApproximateWaitTime> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eApproximateWaitTime value in values)
			{
				ArrayManager.WriteeApproximateWaitTime(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EAE RID: 7854 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eApproximateWaitTime ReadeApproximateWaitTime(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eApproximateWaitTime)result;
		}

		// Token: 0x06001EAF RID: 7855 RVA: 0x000C64F0 File Offset: 0x000C46F0
		public static List<eApproximateWaitTime> ReadListeApproximateWaitTime(byte[] data, ref int offset)
		{
			List<eApproximateWaitTime> list = new List<eApproximateWaitTime>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eApproximateWaitTime item = ArrayManager.ReadeApproximateWaitTime(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EB0 RID: 7856 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeApproximatePopulation(ref byte[] data, ref int offset, eApproximatePopulation value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EB1 RID: 7857 RVA: 0x000C6534 File Offset: 0x000C4734
		public static void WriteListeApproximatePopulation(ref byte[] data, ref int offset, List<eApproximatePopulation> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eApproximatePopulation value in values)
			{
				ArrayManager.WriteeApproximatePopulation(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EB2 RID: 7858 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eApproximatePopulation ReadeApproximatePopulation(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eApproximatePopulation)result;
		}

		// Token: 0x06001EB3 RID: 7859 RVA: 0x000C65B0 File Offset: 0x000C47B0
		public static List<eApproximatePopulation> ReadListeApproximatePopulation(byte[] data, ref int offset)
		{
			List<eApproximatePopulation> list = new List<eApproximatePopulation>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eApproximatePopulation item = ArrayManager.ReadeApproximatePopulation(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EB4 RID: 7860 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePartyLeaderSyncType(ref byte[] data, ref int offset, ePartyLeaderSyncType value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EB5 RID: 7861 RVA: 0x000C65F4 File Offset: 0x000C47F4
		public static void WriteListePartyLeaderSyncType(ref byte[] data, ref int offset, List<ePartyLeaderSyncType> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePartyLeaderSyncType value in values)
			{
				ArrayManager.WriteePartyLeaderSyncType(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EB6 RID: 7862 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePartyLeaderSyncType ReadePartyLeaderSyncType(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePartyLeaderSyncType)result;
		}

		// Token: 0x06001EB7 RID: 7863 RVA: 0x000C6670 File Offset: 0x000C4870
		public static List<ePartyLeaderSyncType> ReadListePartyLeaderSyncType(byte[] data, ref int offset)
		{
			List<ePartyLeaderSyncType> list = new List<ePartyLeaderSyncType>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePartyLeaderSyncType item = ArrayManager.ReadePartyLeaderSyncType(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EB8 RID: 7864 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePartyJoinResponses(ref byte[] data, ref int offset, ePartyJoinResponses value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EB9 RID: 7865 RVA: 0x000C66B4 File Offset: 0x000C48B4
		public static void WriteListePartyJoinResponses(ref byte[] data, ref int offset, List<ePartyJoinResponses> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePartyJoinResponses value in values)
			{
				ArrayManager.WriteePartyJoinResponses(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EBA RID: 7866 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePartyJoinResponses ReadePartyJoinResponses(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePartyJoinResponses)result;
		}

		// Token: 0x06001EBB RID: 7867 RVA: 0x000C6730 File Offset: 0x000C4930
		public static List<ePartyJoinResponses> ReadListePartyJoinResponses(byte[] data, ref int offset)
		{
			List<ePartyJoinResponses> list = new List<ePartyJoinResponses>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePartyJoinResponses item = ArrayManager.ReadePartyJoinResponses(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EBC RID: 7868 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteePartyOperationStatus(ref byte[] data, ref int offset, ePartyOperationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EBD RID: 7869 RVA: 0x000C6774 File Offset: 0x000C4974
		public static void WriteListePartyOperationStatus(ref byte[] data, ref int offset, List<ePartyOperationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ePartyOperationStatus value in values)
			{
				ArrayManager.WriteePartyOperationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EBE RID: 7870 RVA: 0x000C2224 File Offset: 0x000C0424
		public static ePartyOperationStatus ReadePartyOperationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (ePartyOperationStatus)result;
		}

		// Token: 0x06001EBF RID: 7871 RVA: 0x000C67F0 File Offset: 0x000C49F0
		public static List<ePartyOperationStatus> ReadListePartyOperationStatus(byte[] data, ref int offset)
		{
			List<ePartyOperationStatus> list = new List<ePartyOperationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ePartyOperationStatus item = ArrayManager.ReadePartyOperationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EC0 RID: 7872 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeCreateFriendRequestStatus(ref byte[] data, ref int offset, eCreateFriendRequestStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EC1 RID: 7873 RVA: 0x000C6834 File Offset: 0x000C4A34
		public static void WriteListeCreateFriendRequestStatus(ref byte[] data, ref int offset, List<eCreateFriendRequestStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eCreateFriendRequestStatus value in values)
			{
				ArrayManager.WriteeCreateFriendRequestStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EC2 RID: 7874 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eCreateFriendRequestStatus ReadeCreateFriendRequestStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eCreateFriendRequestStatus)result;
		}

		// Token: 0x06001EC3 RID: 7875 RVA: 0x000C68B0 File Offset: 0x000C4AB0
		public static List<eCreateFriendRequestStatus> ReadListeCreateFriendRequestStatus(byte[] data, ref int offset)
		{
			List<eCreateFriendRequestStatus> list = new List<eCreateFriendRequestStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eCreateFriendRequestStatus item = ArrayManager.ReadeCreateFriendRequestStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EC4 RID: 7876 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeDeleteFriendStatus(ref byte[] data, ref int offset, eDeleteFriendStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EC5 RID: 7877 RVA: 0x000C68F4 File Offset: 0x000C4AF4
		public static void WriteListeDeleteFriendStatus(ref byte[] data, ref int offset, List<eDeleteFriendStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eDeleteFriendStatus value in values)
			{
				ArrayManager.WriteeDeleteFriendStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EC6 RID: 7878 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eDeleteFriendStatus ReadeDeleteFriendStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eDeleteFriendStatus)result;
		}

		// Token: 0x06001EC7 RID: 7879 RVA: 0x000C6970 File Offset: 0x000C4B70
		public static List<eDeleteFriendStatus> ReadListeDeleteFriendStatus(byte[] data, ref int offset)
		{
			List<eDeleteFriendStatus> list = new List<eDeleteFriendStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eDeleteFriendStatus item = ArrayManager.ReadeDeleteFriendStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EC8 RID: 7880 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeAcceptFriendRequestStatus(ref byte[] data, ref int offset, eAcceptFriendRequestStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EC9 RID: 7881 RVA: 0x000C69B4 File Offset: 0x000C4BB4
		public static void WriteListeAcceptFriendRequestStatus(ref byte[] data, ref int offset, List<eAcceptFriendRequestStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eAcceptFriendRequestStatus value in values)
			{
				ArrayManager.WriteeAcceptFriendRequestStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001ECA RID: 7882 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eAcceptFriendRequestStatus ReadeAcceptFriendRequestStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eAcceptFriendRequestStatus)result;
		}

		// Token: 0x06001ECB RID: 7883 RVA: 0x000C6A30 File Offset: 0x000C4C30
		public static List<eAcceptFriendRequestStatus> ReadListeAcceptFriendRequestStatus(byte[] data, ref int offset)
		{
			List<eAcceptFriendRequestStatus> list = new List<eAcceptFriendRequestStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eAcceptFriendRequestStatus item = ArrayManager.ReadeAcceptFriendRequestStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001ECC RID: 7884 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeDenyFriendRequestStatus(ref byte[] data, ref int offset, eDenyFriendRequestStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001ECD RID: 7885 RVA: 0x000C6A74 File Offset: 0x000C4C74
		public static void WriteListeDenyFriendRequestStatus(ref byte[] data, ref int offset, List<eDenyFriendRequestStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eDenyFriendRequestStatus value in values)
			{
				ArrayManager.WriteeDenyFriendRequestStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001ECE RID: 7886 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eDenyFriendRequestStatus ReadeDenyFriendRequestStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eDenyFriendRequestStatus)result;
		}

		// Token: 0x06001ECF RID: 7887 RVA: 0x000C6AF0 File Offset: 0x000C4CF0
		public static List<eDenyFriendRequestStatus> ReadListeDenyFriendRequestStatus(byte[] data, ref int offset)
		{
			List<eDenyFriendRequestStatus> list = new List<eDenyFriendRequestStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eDenyFriendRequestStatus item = ArrayManager.ReadeDenyFriendRequestStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001ED0 RID: 7888 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGetFriendRequestsStatus(ref byte[] data, ref int offset, eGetFriendRequestsStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001ED1 RID: 7889 RVA: 0x000C6B34 File Offset: 0x000C4D34
		public static void WriteListeGetFriendRequestsStatus(ref byte[] data, ref int offset, List<eGetFriendRequestsStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGetFriendRequestsStatus value in values)
			{
				ArrayManager.WriteeGetFriendRequestsStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001ED2 RID: 7890 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGetFriendRequestsStatus ReadeGetFriendRequestsStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGetFriendRequestsStatus)result;
		}

		// Token: 0x06001ED3 RID: 7891 RVA: 0x000C6BB0 File Offset: 0x000C4DB0
		public static List<eGetFriendRequestsStatus> ReadListeGetFriendRequestsStatus(byte[] data, ref int offset)
		{
			List<eGetFriendRequestsStatus> list = new List<eGetFriendRequestsStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGetFriendRequestsStatus item = ArrayManager.ReadeGetFriendRequestsStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001ED4 RID: 7892 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGetFriendsStatus(ref byte[] data, ref int offset, eGetFriendsStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001ED5 RID: 7893 RVA: 0x000C6BF4 File Offset: 0x000C4DF4
		public static void WriteListeGetFriendsStatus(ref byte[] data, ref int offset, List<eGetFriendsStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGetFriendsStatus value in values)
			{
				ArrayManager.WriteeGetFriendsStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001ED6 RID: 7894 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGetFriendsStatus ReadeGetFriendsStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGetFriendsStatus)result;
		}

		// Token: 0x06001ED7 RID: 7895 RVA: 0x000C6C70 File Offset: 0x000C4E70
		public static List<eGetFriendsStatus> ReadListeGetFriendsStatus(byte[] data, ref int offset)
		{
			List<eGetFriendsStatus> list = new List<eGetFriendsStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGetFriendsStatus item = ArrayManager.ReadeGetFriendsStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001ED8 RID: 7896 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeInviteFriendToParty(ref byte[] data, ref int offset, eInviteFriendToParty value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001ED9 RID: 7897 RVA: 0x000C6CB4 File Offset: 0x000C4EB4
		public static void WriteListeInviteFriendToParty(ref byte[] data, ref int offset, List<eInviteFriendToParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eInviteFriendToParty value in values)
			{
				ArrayManager.WriteeInviteFriendToParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EDA RID: 7898 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eInviteFriendToParty ReadeInviteFriendToParty(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eInviteFriendToParty)result;
		}

		// Token: 0x06001EDB RID: 7899 RVA: 0x000C6D30 File Offset: 0x000C4F30
		public static List<eInviteFriendToParty> ReadListeInviteFriendToParty(byte[] data, ref int offset)
		{
			List<eInviteFriendToParty> list = new List<eInviteFriendToParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eInviteFriendToParty item = ArrayManager.ReadeInviteFriendToParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EDC RID: 7900 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeDashboardPresence(ref byte[] data, ref int offset, eDashboardPresence value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EDD RID: 7901 RVA: 0x000C6D74 File Offset: 0x000C4F74
		public static void WriteListeDashboardPresence(ref byte[] data, ref int offset, List<eDashboardPresence> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eDashboardPresence value in values)
			{
				ArrayManager.WriteeDashboardPresence(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EDE RID: 7902 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eDashboardPresence ReadeDashboardPresence(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eDashboardPresence)result;
		}

		// Token: 0x06001EDF RID: 7903 RVA: 0x000C6DF0 File Offset: 0x000C4FF0
		public static List<eDashboardPresence> ReadListeDashboardPresence(byte[] data, ref int offset)
		{
			List<eDashboardPresence> list = new List<eDashboardPresence>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eDashboardPresence item = ArrayManager.ReadeDashboardPresence(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EE0 RID: 7904 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGuildMemberRank(ref byte[] data, ref int offset, eGuildMemberRank value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EE1 RID: 7905 RVA: 0x000C6E34 File Offset: 0x000C5034
		public static void WriteListeGuildMemberRank(ref byte[] data, ref int offset, List<eGuildMemberRank> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGuildMemberRank value in values)
			{
				ArrayManager.WriteeGuildMemberRank(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EE2 RID: 7906 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGuildMemberRank ReadeGuildMemberRank(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGuildMemberRank)result;
		}

		// Token: 0x06001EE3 RID: 7907 RVA: 0x000C6EB0 File Offset: 0x000C50B0
		public static List<eGuildMemberRank> ReadListeGuildMemberRank(byte[] data, ref int offset)
		{
			List<eGuildMemberRank> list = new List<eGuildMemberRank>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGuildMemberRank item = ArrayManager.ReadeGuildMemberRank(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EE4 RID: 7908 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeApplicationStatus(ref byte[] data, ref int offset, eApplicationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EE5 RID: 7909 RVA: 0x000C6EF4 File Offset: 0x000C50F4
		public static void WriteListeApplicationStatus(ref byte[] data, ref int offset, List<eApplicationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eApplicationStatus value in values)
			{
				ArrayManager.WriteeApplicationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EE6 RID: 7910 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eApplicationStatus ReadeApplicationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eApplicationStatus)result;
		}

		// Token: 0x06001EE7 RID: 7911 RVA: 0x000C6F70 File Offset: 0x000C5170
		public static List<eApplicationStatus> ReadListeApplicationStatus(byte[] data, ref int offset)
		{
			List<eApplicationStatus> list = new List<eApplicationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eApplicationStatus item = ArrayManager.ReadeApplicationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EE8 RID: 7912 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGuildTransactionLogEvent(ref byte[] data, ref int offset, eGuildTransactionLogEvent value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EE9 RID: 7913 RVA: 0x000C6FB4 File Offset: 0x000C51B4
		public static void WriteListeGuildTransactionLogEvent(ref byte[] data, ref int offset, List<eGuildTransactionLogEvent> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGuildTransactionLogEvent value in values)
			{
				ArrayManager.WriteeGuildTransactionLogEvent(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EEA RID: 7914 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGuildTransactionLogEvent ReadeGuildTransactionLogEvent(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGuildTransactionLogEvent)result;
		}

		// Token: 0x06001EEB RID: 7915 RVA: 0x000C7030 File Offset: 0x000C5230
		public static List<eGuildTransactionLogEvent> ReadListeGuildTransactionLogEvent(byte[] data, ref int offset)
		{
			List<eGuildTransactionLogEvent> list = new List<eGuildTransactionLogEvent>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGuildTransactionLogEvent item = ArrayManager.ReadeGuildTransactionLogEvent(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EEC RID: 7916 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGuildLeaderboardFilter(ref byte[] data, ref int offset, eGuildLeaderboardFilter value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EED RID: 7917 RVA: 0x000C7074 File Offset: 0x000C5274
		public static void WriteListeGuildLeaderboardFilter(ref byte[] data, ref int offset, List<eGuildLeaderboardFilter> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGuildLeaderboardFilter value in values)
			{
				ArrayManager.WriteeGuildLeaderboardFilter(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EEE RID: 7918 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGuildLeaderboardFilter ReadeGuildLeaderboardFilter(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGuildLeaderboardFilter)result;
		}

		// Token: 0x06001EEF RID: 7919 RVA: 0x000C70F0 File Offset: 0x000C52F0
		public static List<eGuildLeaderboardFilter> ReadListeGuildLeaderboardFilter(byte[] data, ref int offset)
		{
			List<eGuildLeaderboardFilter> list = new List<eGuildLeaderboardFilter>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGuildLeaderboardFilter item = ArrayManager.ReadeGuildLeaderboardFilter(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EF0 RID: 7920 RVA: 0x000C21F4 File Offset: 0x000C03F4
		public static void WriteeGuildOperationStatus(ref byte[] data, ref int offset, eGuildOperationStatus value)
		{
			int num = 4;
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, num);
			Array.Copy(BitConverter.GetBytes((int)value), 0, data, offset, num);
			offset += num;
		}

		// Token: 0x06001EF1 RID: 7921 RVA: 0x000C7134 File Offset: 0x000C5334
		public static void WriteListeGuildOperationStatus(ref byte[] data, ref int offset, List<eGuildOperationStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (eGuildOperationStatus value in values)
			{
				ArrayManager.WriteeGuildOperationStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EF2 RID: 7922 RVA: 0x000C2224 File Offset: 0x000C0424
		public static eGuildOperationStatus ReadeGuildOperationStatus(byte[] data, ref int offset)
		{
			int result = BitConverter.ToInt32(data, offset);
			offset += 4;
			return (eGuildOperationStatus)result;
		}

		// Token: 0x06001EF3 RID: 7923 RVA: 0x000C71B0 File Offset: 0x000C53B0
		public static List<eGuildOperationStatus> ReadListeGuildOperationStatus(byte[] data, ref int offset)
		{
			List<eGuildOperationStatus> list = new List<eGuildOperationStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				eGuildOperationStatus item = ArrayManager.ReadeGuildOperationStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EF4 RID: 7924 RVA: 0x000C71F4 File Offset: 0x000C53F4
		public static void WriteRequestCreateChatRoom(ref byte[] data, ref int offset, RequestCreateChatRoom value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001EF5 RID: 7925 RVA: 0x000C7210 File Offset: 0x000C5410
		public static void WriteListRequestCreateChatRoom(ref byte[] data, ref int offset, List<RequestCreateChatRoom> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateChatRoom value in values)
			{
				ArrayManager.WriteRequestCreateChatRoom(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EF6 RID: 7926 RVA: 0x000C728C File Offset: 0x000C548C
		public static RequestCreateChatRoom ReadRequestCreateChatRoom(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateChatRoom requestCreateChatRoom = new RequestCreateChatRoom();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateChatRoom.DeserializeMessage(array);
			return requestCreateChatRoom;
		}

		// Token: 0x06001EF7 RID: 7927 RVA: 0x000C72D0 File Offset: 0x000C54D0
		public static List<RequestCreateChatRoom> ReadListRequestCreateChatRoom(byte[] data, ref int offset)
		{
			List<RequestCreateChatRoom> list = new List<RequestCreateChatRoom>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateChatRoom item = ArrayManager.ReadRequestCreateChatRoom(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EF8 RID: 7928 RVA: 0x000C7314 File Offset: 0x000C5514
		public static void WriteRequestCreateWhisperChatRoom(ref byte[] data, ref int offset, RequestCreateWhisperChatRoom value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001EF9 RID: 7929 RVA: 0x000C7330 File Offset: 0x000C5530
		public static void WriteListRequestCreateWhisperChatRoom(ref byte[] data, ref int offset, List<RequestCreateWhisperChatRoom> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateWhisperChatRoom value in values)
			{
				ArrayManager.WriteRequestCreateWhisperChatRoom(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EFA RID: 7930 RVA: 0x000C73AC File Offset: 0x000C55AC
		public static RequestCreateWhisperChatRoom ReadRequestCreateWhisperChatRoom(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateWhisperChatRoom requestCreateWhisperChatRoom = new RequestCreateWhisperChatRoom();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateWhisperChatRoom.DeserializeMessage(array);
			return requestCreateWhisperChatRoom;
		}

		// Token: 0x06001EFB RID: 7931 RVA: 0x000C73F0 File Offset: 0x000C55F0
		public static List<RequestCreateWhisperChatRoom> ReadListRequestCreateWhisperChatRoom(byte[] data, ref int offset)
		{
			List<RequestCreateWhisperChatRoom> list = new List<RequestCreateWhisperChatRoom>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateWhisperChatRoom item = ArrayManager.ReadRequestCreateWhisperChatRoom(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001EFC RID: 7932 RVA: 0x000C7434 File Offset: 0x000C5634
		public static void WriteResponseCreateChatRoom(ref byte[] data, ref int offset, ResponseCreateChatRoom value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001EFD RID: 7933 RVA: 0x000C7450 File Offset: 0x000C5650
		public static void WriteListResponseCreateChatRoom(ref byte[] data, ref int offset, List<ResponseCreateChatRoom> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCreateChatRoom value in values)
			{
				ArrayManager.WriteResponseCreateChatRoom(ref data, ref offset, value);
			}
		}

		// Token: 0x06001EFE RID: 7934 RVA: 0x000C74CC File Offset: 0x000C56CC
		public static ResponseCreateChatRoom ReadResponseCreateChatRoom(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCreateChatRoom responseCreateChatRoom = new ResponseCreateChatRoom();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCreateChatRoom.DeserializeMessage(array);
			return responseCreateChatRoom;
		}

		// Token: 0x06001EFF RID: 7935 RVA: 0x000C7510 File Offset: 0x000C5710
		public static List<ResponseCreateChatRoom> ReadListResponseCreateChatRoom(byte[] data, ref int offset)
		{
			List<ResponseCreateChatRoom> list = new List<ResponseCreateChatRoom>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCreateChatRoom item = ArrayManager.ReadResponseCreateChatRoom(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F00 RID: 7936 RVA: 0x000C7554 File Offset: 0x000C5754
		public static void WriteRequestSendChat(ref byte[] data, ref int offset, RequestSendChat value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F01 RID: 7937 RVA: 0x000C7570 File Offset: 0x000C5770
		public static void WriteListRequestSendChat(ref byte[] data, ref int offset, List<RequestSendChat> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSendChat value in values)
			{
				ArrayManager.WriteRequestSendChat(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F02 RID: 7938 RVA: 0x000C75EC File Offset: 0x000C57EC
		public static RequestSendChat ReadRequestSendChat(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSendChat requestSendChat = new RequestSendChat();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSendChat.DeserializeMessage(array);
			return requestSendChat;
		}

		// Token: 0x06001F03 RID: 7939 RVA: 0x000C7630 File Offset: 0x000C5830
		public static List<RequestSendChat> ReadListRequestSendChat(byte[] data, ref int offset)
		{
			List<RequestSendChat> list = new List<RequestSendChat>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSendChat item = ArrayManager.ReadRequestSendChat(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F04 RID: 7940 RVA: 0x000C7674 File Offset: 0x000C5874
		public static void WriteBroadcastChatToRoom(ref byte[] data, ref int offset, BroadcastChatToRoom value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F05 RID: 7941 RVA: 0x000C7690 File Offset: 0x000C5890
		public static void WriteListBroadcastChatToRoom(ref byte[] data, ref int offset, List<BroadcastChatToRoom> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BroadcastChatToRoom value in values)
			{
				ArrayManager.WriteBroadcastChatToRoom(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F06 RID: 7942 RVA: 0x000C770C File Offset: 0x000C590C
		public static BroadcastChatToRoom ReadBroadcastChatToRoom(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BroadcastChatToRoom broadcastChatToRoom = new BroadcastChatToRoom();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			broadcastChatToRoom.DeserializeMessage(array);
			return broadcastChatToRoom;
		}

		// Token: 0x06001F07 RID: 7943 RVA: 0x000C7750 File Offset: 0x000C5950
		public static List<BroadcastChatToRoom> ReadListBroadcastChatToRoom(byte[] data, ref int offset)
		{
			List<BroadcastChatToRoom> list = new List<BroadcastChatToRoom>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BroadcastChatToRoom item = ArrayManager.ReadBroadcastChatToRoom(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F08 RID: 7944 RVA: 0x000C7794 File Offset: 0x000C5994
		public static void WriteRequestLeaveChatRoom(ref byte[] data, ref int offset, RequestLeaveChatRoom value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F09 RID: 7945 RVA: 0x000C77B0 File Offset: 0x000C59B0
		public static void WriteListRequestLeaveChatRoom(ref byte[] data, ref int offset, List<RequestLeaveChatRoom> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLeaveChatRoom value in values)
			{
				ArrayManager.WriteRequestLeaveChatRoom(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F0A RID: 7946 RVA: 0x000C782C File Offset: 0x000C5A2C
		public static RequestLeaveChatRoom ReadRequestLeaveChatRoom(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLeaveChatRoom requestLeaveChatRoom = new RequestLeaveChatRoom();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLeaveChatRoom.DeserializeMessage(array);
			return requestLeaveChatRoom;
		}

		// Token: 0x06001F0B RID: 7947 RVA: 0x000C7870 File Offset: 0x000C5A70
		public static List<RequestLeaveChatRoom> ReadListRequestLeaveChatRoom(byte[] data, ref int offset)
		{
			List<RequestLeaveChatRoom> list = new List<RequestLeaveChatRoom>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLeaveChatRoom item = ArrayManager.ReadRequestLeaveChatRoom(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F0C RID: 7948 RVA: 0x000C78B4 File Offset: 0x000C5AB4
		public static void WriteJoinChatRoomPush(ref byte[] data, ref int offset, JoinChatRoomPush value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F0D RID: 7949 RVA: 0x000C78D0 File Offset: 0x000C5AD0
		public static void WriteListJoinChatRoomPush(ref byte[] data, ref int offset, List<JoinChatRoomPush> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (JoinChatRoomPush value in values)
			{
				ArrayManager.WriteJoinChatRoomPush(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F0E RID: 7950 RVA: 0x000C794C File Offset: 0x000C5B4C
		public static JoinChatRoomPush ReadJoinChatRoomPush(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			JoinChatRoomPush joinChatRoomPush = new JoinChatRoomPush();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			joinChatRoomPush.DeserializeMessage(array);
			return joinChatRoomPush;
		}

		// Token: 0x06001F0F RID: 7951 RVA: 0x000C7990 File Offset: 0x000C5B90
		public static List<JoinChatRoomPush> ReadListJoinChatRoomPush(byte[] data, ref int offset)
		{
			List<JoinChatRoomPush> list = new List<JoinChatRoomPush>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				JoinChatRoomPush item = ArrayManager.ReadJoinChatRoomPush(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F10 RID: 7952 RVA: 0x000C79D4 File Offset: 0x000C5BD4
		public static void WriteLeftChatRoomPush(ref byte[] data, ref int offset, LeftChatRoomPush value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F11 RID: 7953 RVA: 0x000C79F0 File Offset: 0x000C5BF0
		public static void WriteListLeftChatRoomPush(ref byte[] data, ref int offset, List<LeftChatRoomPush> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LeftChatRoomPush value in values)
			{
				ArrayManager.WriteLeftChatRoomPush(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F12 RID: 7954 RVA: 0x000C7A6C File Offset: 0x000C5C6C
		public static LeftChatRoomPush ReadLeftChatRoomPush(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LeftChatRoomPush leftChatRoomPush = new LeftChatRoomPush();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			leftChatRoomPush.DeserializeMessage(array);
			return leftChatRoomPush;
		}

		// Token: 0x06001F13 RID: 7955 RVA: 0x000C7AB0 File Offset: 0x000C5CB0
		public static List<LeftChatRoomPush> ReadListLeftChatRoomPush(byte[] data, ref int offset)
		{
			List<LeftChatRoomPush> list = new List<LeftChatRoomPush>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LeftChatRoomPush item = ArrayManager.ReadLeftChatRoomPush(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F14 RID: 7956 RVA: 0x000C7AF4 File Offset: 0x000C5CF4
		public static void WriteChatRoomClosed(ref byte[] data, ref int offset, ChatRoomClosed value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F15 RID: 7957 RVA: 0x000C7B10 File Offset: 0x000C5D10
		public static void WriteListChatRoomClosed(ref byte[] data, ref int offset, List<ChatRoomClosed> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ChatRoomClosed value in values)
			{
				ArrayManager.WriteChatRoomClosed(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F16 RID: 7958 RVA: 0x000C7B8C File Offset: 0x000C5D8C
		public static ChatRoomClosed ReadChatRoomClosed(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ChatRoomClosed chatRoomClosed = new ChatRoomClosed();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			chatRoomClosed.DeserializeMessage(array);
			return chatRoomClosed;
		}

		// Token: 0x06001F17 RID: 7959 RVA: 0x000C7BD0 File Offset: 0x000C5DD0
		public static List<ChatRoomClosed> ReadListChatRoomClosed(byte[] data, ref int offset)
		{
			List<ChatRoomClosed> list = new List<ChatRoomClosed>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ChatRoomClosed item = ArrayManager.ReadChatRoomClosed(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F18 RID: 7960 RVA: 0x000C7C14 File Offset: 0x000C5E14
		public static void WriteSendWhisper(ref byte[] data, ref int offset, SendWhisper value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F19 RID: 7961 RVA: 0x000C7C30 File Offset: 0x000C5E30
		public static void WriteListSendWhisper(ref byte[] data, ref int offset, List<SendWhisper> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SendWhisper value in values)
			{
				ArrayManager.WriteSendWhisper(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F1A RID: 7962 RVA: 0x000C7CAC File Offset: 0x000C5EAC
		public static SendWhisper ReadSendWhisper(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SendWhisper sendWhisper = new SendWhisper();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			sendWhisper.DeserializeMessage(array);
			return sendWhisper;
		}

		// Token: 0x06001F1B RID: 7963 RVA: 0x000C7CF0 File Offset: 0x000C5EF0
		public static List<SendWhisper> ReadListSendWhisper(byte[] data, ref int offset)
		{
			List<SendWhisper> list = new List<SendWhisper>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SendWhisper item = ArrayManager.ReadSendWhisper(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F1C RID: 7964 RVA: 0x000C7D34 File Offset: 0x000C5F34
		public static void WriteRequestChatFilterOptionChange(ref byte[] data, ref int offset, RequestChatFilterOptionChange value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F1D RID: 7965 RVA: 0x000C7D50 File Offset: 0x000C5F50
		public static void WriteListRequestChatFilterOptionChange(ref byte[] data, ref int offset, List<RequestChatFilterOptionChange> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestChatFilterOptionChange value in values)
			{
				ArrayManager.WriteRequestChatFilterOptionChange(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F1E RID: 7966 RVA: 0x000C7DCC File Offset: 0x000C5FCC
		public static RequestChatFilterOptionChange ReadRequestChatFilterOptionChange(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestChatFilterOptionChange requestChatFilterOptionChange = new RequestChatFilterOptionChange();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestChatFilterOptionChange.DeserializeMessage(array);
			return requestChatFilterOptionChange;
		}

		// Token: 0x06001F1F RID: 7967 RVA: 0x000C7E10 File Offset: 0x000C6010
		public static List<RequestChatFilterOptionChange> ReadListRequestChatFilterOptionChange(byte[] data, ref int offset)
		{
			List<RequestChatFilterOptionChange> list = new List<RequestChatFilterOptionChange>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestChatFilterOptionChange item = ArrayManager.ReadRequestChatFilterOptionChange(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F20 RID: 7968 RVA: 0x000C7E54 File Offset: 0x000C6054
		public static void WriteResponseChatFilterOptionChange(ref byte[] data, ref int offset, ResponseChatFilterOptionChange value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F21 RID: 7969 RVA: 0x000C7E70 File Offset: 0x000C6070
		public static void WriteListResponseChatFilterOptionChange(ref byte[] data, ref int offset, List<ResponseChatFilterOptionChange> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseChatFilterOptionChange value in values)
			{
				ArrayManager.WriteResponseChatFilterOptionChange(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F22 RID: 7970 RVA: 0x000C7EEC File Offset: 0x000C60EC
		public static ResponseChatFilterOptionChange ReadResponseChatFilterOptionChange(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseChatFilterOptionChange responseChatFilterOptionChange = new ResponseChatFilterOptionChange();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseChatFilterOptionChange.DeserializeMessage(array);
			return responseChatFilterOptionChange;
		}

		// Token: 0x06001F23 RID: 7971 RVA: 0x000C7F30 File Offset: 0x000C6130
		public static List<ResponseChatFilterOptionChange> ReadListResponseChatFilterOptionChange(byte[] data, ref int offset)
		{
			List<ResponseChatFilterOptionChange> list = new List<ResponseChatFilterOptionChange>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseChatFilterOptionChange item = ArrayManager.ReadResponseChatFilterOptionChange(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F24 RID: 7972 RVA: 0x000C7F74 File Offset: 0x000C6174
		public static void WriteRequestDiscordAuthentication(ref byte[] data, ref int offset, RequestDiscordAuthentication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F25 RID: 7973 RVA: 0x000C7F90 File Offset: 0x000C6190
		public static void WriteListRequestDiscordAuthentication(ref byte[] data, ref int offset, List<RequestDiscordAuthentication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestDiscordAuthentication value in values)
			{
				ArrayManager.WriteRequestDiscordAuthentication(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F26 RID: 7974 RVA: 0x000C800C File Offset: 0x000C620C
		public static RequestDiscordAuthentication ReadRequestDiscordAuthentication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestDiscordAuthentication requestDiscordAuthentication = new RequestDiscordAuthentication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestDiscordAuthentication.DeserializeMessage(array);
			return requestDiscordAuthentication;
		}

		// Token: 0x06001F27 RID: 7975 RVA: 0x000C8050 File Offset: 0x000C6250
		public static List<RequestDiscordAuthentication> ReadListRequestDiscordAuthentication(byte[] data, ref int offset)
		{
			List<RequestDiscordAuthentication> list = new List<RequestDiscordAuthentication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestDiscordAuthentication item = ArrayManager.ReadRequestDiscordAuthentication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F28 RID: 7976 RVA: 0x000C8094 File Offset: 0x000C6294
		public static void WritePushDiscordRpcToken(ref byte[] data, ref int offset, PushDiscordRpcToken value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F29 RID: 7977 RVA: 0x000C80B0 File Offset: 0x000C62B0
		public static void WriteListPushDiscordRpcToken(ref byte[] data, ref int offset, List<PushDiscordRpcToken> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushDiscordRpcToken value in values)
			{
				ArrayManager.WritePushDiscordRpcToken(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F2A RID: 7978 RVA: 0x000C812C File Offset: 0x000C632C
		public static PushDiscordRpcToken ReadPushDiscordRpcToken(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushDiscordRpcToken pushDiscordRpcToken = new PushDiscordRpcToken();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushDiscordRpcToken.DeserializeMessage(array);
			return pushDiscordRpcToken;
		}

		// Token: 0x06001F2B RID: 7979 RVA: 0x000C8170 File Offset: 0x000C6370
		public static List<PushDiscordRpcToken> ReadListPushDiscordRpcToken(byte[] data, ref int offset)
		{
			List<PushDiscordRpcToken> list = new List<PushDiscordRpcToken>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushDiscordRpcToken item = ArrayManager.ReadPushDiscordRpcToken(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F2C RID: 7980 RVA: 0x000C81B4 File Offset: 0x000C63B4
		public static void WritePushDiscordAccessToken(ref byte[] data, ref int offset, PushDiscordAccessToken value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F2D RID: 7981 RVA: 0x000C81D0 File Offset: 0x000C63D0
		public static void WriteListPushDiscordAccessToken(ref byte[] data, ref int offset, List<PushDiscordAccessToken> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushDiscordAccessToken value in values)
			{
				ArrayManager.WritePushDiscordAccessToken(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F2E RID: 7982 RVA: 0x000C824C File Offset: 0x000C644C
		public static PushDiscordAccessToken ReadPushDiscordAccessToken(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushDiscordAccessToken pushDiscordAccessToken = new PushDiscordAccessToken();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushDiscordAccessToken.DeserializeMessage(array);
			return pushDiscordAccessToken;
		}

		// Token: 0x06001F2F RID: 7983 RVA: 0x000C8290 File Offset: 0x000C6490
		public static List<PushDiscordAccessToken> ReadListPushDiscordAccessToken(byte[] data, ref int offset)
		{
			List<PushDiscordAccessToken> list = new List<PushDiscordAccessToken>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushDiscordAccessToken item = ArrayManager.ReadPushDiscordAccessToken(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F30 RID: 7984 RVA: 0x000C82D4 File Offset: 0x000C64D4
		public static void WriteRequestJoinDiscordChannel(ref byte[] data, ref int offset, RequestJoinDiscordChannel value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F31 RID: 7985 RVA: 0x000C82F0 File Offset: 0x000C64F0
		public static void WriteListRequestJoinDiscordChannel(ref byte[] data, ref int offset, List<RequestJoinDiscordChannel> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestJoinDiscordChannel value in values)
			{
				ArrayManager.WriteRequestJoinDiscordChannel(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F32 RID: 7986 RVA: 0x000C836C File Offset: 0x000C656C
		public static RequestJoinDiscordChannel ReadRequestJoinDiscordChannel(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestJoinDiscordChannel requestJoinDiscordChannel = new RequestJoinDiscordChannel();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestJoinDiscordChannel.DeserializeMessage(array);
			return requestJoinDiscordChannel;
		}

		// Token: 0x06001F33 RID: 7987 RVA: 0x000C83B0 File Offset: 0x000C65B0
		public static List<RequestJoinDiscordChannel> ReadListRequestJoinDiscordChannel(byte[] data, ref int offset)
		{
			List<RequestJoinDiscordChannel> list = new List<RequestJoinDiscordChannel>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestJoinDiscordChannel item = ArrayManager.ReadRequestJoinDiscordChannel(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F34 RID: 7988 RVA: 0x000C83F4 File Offset: 0x000C65F4
		public static void WriteResponseJoinDiscordChannel(ref byte[] data, ref int offset, ResponseJoinDiscordChannel value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F35 RID: 7989 RVA: 0x000C8410 File Offset: 0x000C6610
		public static void WriteListResponseJoinDiscordChannel(ref byte[] data, ref int offset, List<ResponseJoinDiscordChannel> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseJoinDiscordChannel value in values)
			{
				ArrayManager.WriteResponseJoinDiscordChannel(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F36 RID: 7990 RVA: 0x000C848C File Offset: 0x000C668C
		public static ResponseJoinDiscordChannel ReadResponseJoinDiscordChannel(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseJoinDiscordChannel responseJoinDiscordChannel = new ResponseJoinDiscordChannel();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseJoinDiscordChannel.DeserializeMessage(array);
			return responseJoinDiscordChannel;
		}

		// Token: 0x06001F37 RID: 7991 RVA: 0x000C84D0 File Offset: 0x000C66D0
		public static List<ResponseJoinDiscordChannel> ReadListResponseJoinDiscordChannel(byte[] data, ref int offset)
		{
			List<ResponseJoinDiscordChannel> list = new List<ResponseJoinDiscordChannel>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseJoinDiscordChannel item = ArrayManager.ReadResponseJoinDiscordChannel(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F38 RID: 7992 RVA: 0x000C8514 File Offset: 0x000C6714
		public static void WriteRequestLeaveDiscordChannel(ref byte[] data, ref int offset, RequestLeaveDiscordChannel value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F39 RID: 7993 RVA: 0x000C8530 File Offset: 0x000C6730
		public static void WriteListRequestLeaveDiscordChannel(ref byte[] data, ref int offset, List<RequestLeaveDiscordChannel> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLeaveDiscordChannel value in values)
			{
				ArrayManager.WriteRequestLeaveDiscordChannel(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F3A RID: 7994 RVA: 0x000C85AC File Offset: 0x000C67AC
		public static RequestLeaveDiscordChannel ReadRequestLeaveDiscordChannel(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLeaveDiscordChannel requestLeaveDiscordChannel = new RequestLeaveDiscordChannel();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLeaveDiscordChannel.DeserializeMessage(array);
			return requestLeaveDiscordChannel;
		}

		// Token: 0x06001F3B RID: 7995 RVA: 0x000C85F0 File Offset: 0x000C67F0
		public static List<RequestLeaveDiscordChannel> ReadListRequestLeaveDiscordChannel(byte[] data, ref int offset)
		{
			List<RequestLeaveDiscordChannel> list = new List<RequestLeaveDiscordChannel>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLeaveDiscordChannel item = ArrayManager.ReadRequestLeaveDiscordChannel(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F3C RID: 7996 RVA: 0x000C8634 File Offset: 0x000C6834
		public static void WriteResponseLeaveDiscordChannel(ref byte[] data, ref int offset, ResponseLeaveDiscordChannel value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F3D RID: 7997 RVA: 0x000C8650 File Offset: 0x000C6850
		public static void WriteListResponseLeaveDiscordChannel(ref byte[] data, ref int offset, List<ResponseLeaveDiscordChannel> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseLeaveDiscordChannel value in values)
			{
				ArrayManager.WriteResponseLeaveDiscordChannel(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F3E RID: 7998 RVA: 0x000C86CC File Offset: 0x000C68CC
		public static ResponseLeaveDiscordChannel ReadResponseLeaveDiscordChannel(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseLeaveDiscordChannel responseLeaveDiscordChannel = new ResponseLeaveDiscordChannel();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseLeaveDiscordChannel.DeserializeMessage(array);
			return responseLeaveDiscordChannel;
		}

		// Token: 0x06001F3F RID: 7999 RVA: 0x000C8710 File Offset: 0x000C6910
		public static List<ResponseLeaveDiscordChannel> ReadListResponseLeaveDiscordChannel(byte[] data, ref int offset)
		{
			List<ResponseLeaveDiscordChannel> list = new List<ResponseLeaveDiscordChannel>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseLeaveDiscordChannel item = ArrayManager.ReadResponseLeaveDiscordChannel(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F40 RID: 8000 RVA: 0x000C8754 File Offset: 0x000C6954
		public static void WritePlayerCommunityEventsUpdatePush(ref byte[] data, ref int offset, PlayerCommunityEventsUpdatePush value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F41 RID: 8001 RVA: 0x000C8770 File Offset: 0x000C6970
		public static void WriteListPlayerCommunityEventsUpdatePush(ref byte[] data, ref int offset, List<PlayerCommunityEventsUpdatePush> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerCommunityEventsUpdatePush value in values)
			{
				ArrayManager.WritePlayerCommunityEventsUpdatePush(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F42 RID: 8002 RVA: 0x000C87EC File Offset: 0x000C69EC
		public static PlayerCommunityEventsUpdatePush ReadPlayerCommunityEventsUpdatePush(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerCommunityEventsUpdatePush playerCommunityEventsUpdatePush = new PlayerCommunityEventsUpdatePush();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerCommunityEventsUpdatePush.DeserializeMessage(array);
			return playerCommunityEventsUpdatePush;
		}

		// Token: 0x06001F43 RID: 8003 RVA: 0x000C8830 File Offset: 0x000C6A30
		public static List<PlayerCommunityEventsUpdatePush> ReadListPlayerCommunityEventsUpdatePush(byte[] data, ref int offset)
		{
			List<PlayerCommunityEventsUpdatePush> list = new List<PlayerCommunityEventsUpdatePush>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerCommunityEventsUpdatePush item = ArrayManager.ReadPlayerCommunityEventsUpdatePush(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F44 RID: 8004 RVA: 0x000C8874 File Offset: 0x000C6A74
		public static void WritePlayerCommunityEventUpdateInfo(ref byte[] data, ref int offset, PlayerCommunityEventUpdateInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F45 RID: 8005 RVA: 0x000C8890 File Offset: 0x000C6A90
		public static void WriteListPlayerCommunityEventUpdateInfo(ref byte[] data, ref int offset, List<PlayerCommunityEventUpdateInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerCommunityEventUpdateInfo value in values)
			{
				ArrayManager.WritePlayerCommunityEventUpdateInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F46 RID: 8006 RVA: 0x000C890C File Offset: 0x000C6B0C
		public static PlayerCommunityEventUpdateInfo ReadPlayerCommunityEventUpdateInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerCommunityEventUpdateInfo playerCommunityEventUpdateInfo = new PlayerCommunityEventUpdateInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerCommunityEventUpdateInfo.DeserializeMessage(array);
			return playerCommunityEventUpdateInfo;
		}

		// Token: 0x06001F47 RID: 8007 RVA: 0x000C8950 File Offset: 0x000C6B50
		public static List<PlayerCommunityEventUpdateInfo> ReadListPlayerCommunityEventUpdateInfo(byte[] data, ref int offset)
		{
			List<PlayerCommunityEventUpdateInfo> list = new List<PlayerCommunityEventUpdateInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerCommunityEventUpdateInfo item = ArrayManager.ReadPlayerCommunityEventUpdateInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F48 RID: 8008 RVA: 0x000C8994 File Offset: 0x000C6B94
		public static void WritePlayerCommunityGoalUpdateInfo(ref byte[] data, ref int offset, PlayerCommunityGoalUpdateInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F49 RID: 8009 RVA: 0x000C89B0 File Offset: 0x000C6BB0
		public static void WriteListPlayerCommunityGoalUpdateInfo(ref byte[] data, ref int offset, List<PlayerCommunityGoalUpdateInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerCommunityGoalUpdateInfo value in values)
			{
				ArrayManager.WritePlayerCommunityGoalUpdateInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F4A RID: 8010 RVA: 0x000C8A2C File Offset: 0x000C6C2C
		public static PlayerCommunityGoalUpdateInfo ReadPlayerCommunityGoalUpdateInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerCommunityGoalUpdateInfo playerCommunityGoalUpdateInfo = new PlayerCommunityGoalUpdateInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerCommunityGoalUpdateInfo.DeserializeMessage(array);
			return playerCommunityGoalUpdateInfo;
		}

		// Token: 0x06001F4B RID: 8011 RVA: 0x000C8A70 File Offset: 0x000C6C70
		public static List<PlayerCommunityGoalUpdateInfo> ReadListPlayerCommunityGoalUpdateInfo(byte[] data, ref int offset)
		{
			List<PlayerCommunityGoalUpdateInfo> list = new List<PlayerCommunityGoalUpdateInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerCommunityGoalUpdateInfo item = ArrayManager.ReadPlayerCommunityGoalUpdateInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F4C RID: 8012 RVA: 0x000C8AB4 File Offset: 0x000C6CB4
		public static void WritePlayerIndividualGoalUpdateInfo(ref byte[] data, ref int offset, PlayerIndividualGoalUpdateInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F4D RID: 8013 RVA: 0x000C8AD0 File Offset: 0x000C6CD0
		public static void WriteListPlayerIndividualGoalUpdateInfo(ref byte[] data, ref int offset, List<PlayerIndividualGoalUpdateInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerIndividualGoalUpdateInfo value in values)
			{
				ArrayManager.WritePlayerIndividualGoalUpdateInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F4E RID: 8014 RVA: 0x000C8B4C File Offset: 0x000C6D4C
		public static PlayerIndividualGoalUpdateInfo ReadPlayerIndividualGoalUpdateInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerIndividualGoalUpdateInfo playerIndividualGoalUpdateInfo = new PlayerIndividualGoalUpdateInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerIndividualGoalUpdateInfo.DeserializeMessage(array);
			return playerIndividualGoalUpdateInfo;
		}

		// Token: 0x06001F4F RID: 8015 RVA: 0x000C8B90 File Offset: 0x000C6D90
		public static List<PlayerIndividualGoalUpdateInfo> ReadListPlayerIndividualGoalUpdateInfo(byte[] data, ref int offset)
		{
			List<PlayerIndividualGoalUpdateInfo> list = new List<PlayerIndividualGoalUpdateInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerIndividualGoalUpdateInfo item = ArrayManager.ReadPlayerIndividualGoalUpdateInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F50 RID: 8016 RVA: 0x000C8BD4 File Offset: 0x000C6DD4
		public static void WriteCommunityContributionForEvent(ref byte[] data, ref int offset, CommunityContributionForEvent value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F51 RID: 8017 RVA: 0x000C8BF0 File Offset: 0x000C6DF0
		public static void WriteListCommunityContributionForEvent(ref byte[] data, ref int offset, List<CommunityContributionForEvent> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityContributionForEvent value in values)
			{
				ArrayManager.WriteCommunityContributionForEvent(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F52 RID: 8018 RVA: 0x000C8C6C File Offset: 0x000C6E6C
		public static CommunityContributionForEvent ReadCommunityContributionForEvent(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityContributionForEvent communityContributionForEvent = new CommunityContributionForEvent();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityContributionForEvent.DeserializeMessage(array);
			return communityContributionForEvent;
		}

		// Token: 0x06001F53 RID: 8019 RVA: 0x000C8CB0 File Offset: 0x000C6EB0
		public static List<CommunityContributionForEvent> ReadListCommunityContributionForEvent(byte[] data, ref int offset)
		{
			List<CommunityContributionForEvent> list = new List<CommunityContributionForEvent>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityContributionForEvent item = ArrayManager.ReadCommunityContributionForEvent(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F54 RID: 8020 RVA: 0x000C8CF4 File Offset: 0x000C6EF4
		public static void WriteIndividualPlayerContributionForGoal(ref byte[] data, ref int offset, IndividualPlayerContributionForGoal value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F55 RID: 8021 RVA: 0x000C8D10 File Offset: 0x000C6F10
		public static void WriteListIndividualPlayerContributionForGoal(ref byte[] data, ref int offset, List<IndividualPlayerContributionForGoal> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (IndividualPlayerContributionForGoal value in values)
			{
				ArrayManager.WriteIndividualPlayerContributionForGoal(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F56 RID: 8022 RVA: 0x000C8D8C File Offset: 0x000C6F8C
		public static IndividualPlayerContributionForGoal ReadIndividualPlayerContributionForGoal(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			IndividualPlayerContributionForGoal individualPlayerContributionForGoal = new IndividualPlayerContributionForGoal();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			individualPlayerContributionForGoal.DeserializeMessage(array);
			return individualPlayerContributionForGoal;
		}

		// Token: 0x06001F57 RID: 8023 RVA: 0x000C8DD0 File Offset: 0x000C6FD0
		public static List<IndividualPlayerContributionForGoal> ReadListIndividualPlayerContributionForGoal(byte[] data, ref int offset)
		{
			List<IndividualPlayerContributionForGoal> list = new List<IndividualPlayerContributionForGoal>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				IndividualPlayerContributionForGoal item = ArrayManager.ReadIndividualPlayerContributionForGoal(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F58 RID: 8024 RVA: 0x000C8E14 File Offset: 0x000C7014
		public static void WriteClientPingRequest(ref byte[] data, ref int offset, ClientPingRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F59 RID: 8025 RVA: 0x000C8E30 File Offset: 0x000C7030
		public static void WriteListClientPingRequest(ref byte[] data, ref int offset, List<ClientPingRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ClientPingRequest value in values)
			{
				ArrayManager.WriteClientPingRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F5A RID: 8026 RVA: 0x000C8EAC File Offset: 0x000C70AC
		public static ClientPingRequest ReadClientPingRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ClientPingRequest clientPingRequest = new ClientPingRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			clientPingRequest.DeserializeMessage(array);
			return clientPingRequest;
		}

		// Token: 0x06001F5B RID: 8027 RVA: 0x000C8EF0 File Offset: 0x000C70F0
		public static List<ClientPingRequest> ReadListClientPingRequest(byte[] data, ref int offset)
		{
			List<ClientPingRequest> list = new List<ClientPingRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ClientPingRequest item = ArrayManager.ReadClientPingRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F5C RID: 8028 RVA: 0x000C8F34 File Offset: 0x000C7134
		public static void WriteClientPingResponse(ref byte[] data, ref int offset, ClientPingResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F5D RID: 8029 RVA: 0x000C8F50 File Offset: 0x000C7150
		public static void WriteListClientPingResponse(ref byte[] data, ref int offset, List<ClientPingResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ClientPingResponse value in values)
			{
				ArrayManager.WriteClientPingResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F5E RID: 8030 RVA: 0x000C8FCC File Offset: 0x000C71CC
		public static ClientPingResponse ReadClientPingResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ClientPingResponse clientPingResponse = new ClientPingResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			clientPingResponse.DeserializeMessage(array);
			return clientPingResponse;
		}

		// Token: 0x06001F5F RID: 8031 RVA: 0x000C9010 File Offset: 0x000C7210
		public static List<ClientPingResponse> ReadListClientPingResponse(byte[] data, ref int offset)
		{
			List<ClientPingResponse> list = new List<ClientPingResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ClientPingResponse item = ArrayManager.ReadClientPingResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F60 RID: 8032 RVA: 0x000C9054 File Offset: 0x000C7254
		public static void WriteRequestClientHandshake(ref byte[] data, ref int offset, RequestClientHandshake value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F61 RID: 8033 RVA: 0x000C9070 File Offset: 0x000C7270
		public static void WriteListRequestClientHandshake(ref byte[] data, ref int offset, List<RequestClientHandshake> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestClientHandshake value in values)
			{
				ArrayManager.WriteRequestClientHandshake(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F62 RID: 8034 RVA: 0x000C90EC File Offset: 0x000C72EC
		public static RequestClientHandshake ReadRequestClientHandshake(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestClientHandshake requestClientHandshake = new RequestClientHandshake();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestClientHandshake.DeserializeMessage(array);
			return requestClientHandshake;
		}

		// Token: 0x06001F63 RID: 8035 RVA: 0x000C9130 File Offset: 0x000C7330
		public static List<RequestClientHandshake> ReadListRequestClientHandshake(byte[] data, ref int offset)
		{
			List<RequestClientHandshake> list = new List<RequestClientHandshake>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestClientHandshake item = ArrayManager.ReadRequestClientHandshake(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F64 RID: 8036 RVA: 0x000C9174 File Offset: 0x000C7374
		public static void WriteResponseClientHandshake(ref byte[] data, ref int offset, ResponseClientHandshake value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F65 RID: 8037 RVA: 0x000C9190 File Offset: 0x000C7390
		public static void WriteListResponseClientHandshake(ref byte[] data, ref int offset, List<ResponseClientHandshake> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseClientHandshake value in values)
			{
				ArrayManager.WriteResponseClientHandshake(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F66 RID: 8038 RVA: 0x000C920C File Offset: 0x000C740C
		public static ResponseClientHandshake ReadResponseClientHandshake(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseClientHandshake responseClientHandshake = new ResponseClientHandshake();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseClientHandshake.DeserializeMessage(array);
			return responseClientHandshake;
		}

		// Token: 0x06001F67 RID: 8039 RVA: 0x000C9250 File Offset: 0x000C7450
		public static List<ResponseClientHandshake> ReadListResponseClientHandshake(byte[] data, ref int offset)
		{
			List<ResponseClientHandshake> list = new List<ResponseClientHandshake>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseClientHandshake item = ArrayManager.ReadResponseClientHandshake(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F68 RID: 8040 RVA: 0x000C9294 File Offset: 0x000C7494
		public static void WriteRequestSecurityHandshake(ref byte[] data, ref int offset, RequestSecurityHandshake value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F69 RID: 8041 RVA: 0x000C92B0 File Offset: 0x000C74B0
		public static void WriteListRequestSecurityHandshake(ref byte[] data, ref int offset, List<RequestSecurityHandshake> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSecurityHandshake value in values)
			{
				ArrayManager.WriteRequestSecurityHandshake(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F6A RID: 8042 RVA: 0x000C932C File Offset: 0x000C752C
		public static RequestSecurityHandshake ReadRequestSecurityHandshake(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSecurityHandshake requestSecurityHandshake = new RequestSecurityHandshake();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSecurityHandshake.DeserializeMessage(array);
			return requestSecurityHandshake;
		}

		// Token: 0x06001F6B RID: 8043 RVA: 0x000C9370 File Offset: 0x000C7570
		public static List<RequestSecurityHandshake> ReadListRequestSecurityHandshake(byte[] data, ref int offset)
		{
			List<RequestSecurityHandshake> list = new List<RequestSecurityHandshake>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSecurityHandshake item = ArrayManager.ReadRequestSecurityHandshake(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F6C RID: 8044 RVA: 0x000C93B4 File Offset: 0x000C75B4
		public static void WriteResponseSecurityHandshake(ref byte[] data, ref int offset, ResponseSecurityHandshake value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F6D RID: 8045 RVA: 0x000C93D0 File Offset: 0x000C75D0
		public static void WriteListResponseSecurityHandshake(ref byte[] data, ref int offset, List<ResponseSecurityHandshake> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSecurityHandshake value in values)
			{
				ArrayManager.WriteResponseSecurityHandshake(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F6E RID: 8046 RVA: 0x000C944C File Offset: 0x000C764C
		public static ResponseSecurityHandshake ReadResponseSecurityHandshake(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSecurityHandshake responseSecurityHandshake = new ResponseSecurityHandshake();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSecurityHandshake.DeserializeMessage(array);
			return responseSecurityHandshake;
		}

		// Token: 0x06001F6F RID: 8047 RVA: 0x000C9490 File Offset: 0x000C7690
		public static List<ResponseSecurityHandshake> ReadListResponseSecurityHandshake(byte[] data, ref int offset)
		{
			List<ResponseSecurityHandshake> list = new List<ResponseSecurityHandshake>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSecurityHandshake item = ArrayManager.ReadResponseSecurityHandshake(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F70 RID: 8048 RVA: 0x000C94D4 File Offset: 0x000C76D4
		public static void WriteForceReconnectPush(ref byte[] data, ref int offset, ForceReconnectPush value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F71 RID: 8049 RVA: 0x000C94F0 File Offset: 0x000C76F0
		public static void WriteListForceReconnectPush(ref byte[] data, ref int offset, List<ForceReconnectPush> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ForceReconnectPush value in values)
			{
				ArrayManager.WriteForceReconnectPush(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F72 RID: 8050 RVA: 0x000C956C File Offset: 0x000C776C
		public static ForceReconnectPush ReadForceReconnectPush(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ForceReconnectPush forceReconnectPush = new ForceReconnectPush();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			forceReconnectPush.DeserializeMessage(array);
			return forceReconnectPush;
		}

		// Token: 0x06001F73 RID: 8051 RVA: 0x000C95B0 File Offset: 0x000C77B0
		public static List<ForceReconnectPush> ReadListForceReconnectPush(byte[] data, ref int offset)
		{
			List<ForceReconnectPush> list = new List<ForceReconnectPush>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ForceReconnectPush item = ArrayManager.ReadForceReconnectPush(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F74 RID: 8052 RVA: 0x000C95F4 File Offset: 0x000C77F4
		public static void WriteReadyToReconnectRequest(ref byte[] data, ref int offset, ReadyToReconnectRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F75 RID: 8053 RVA: 0x000C9610 File Offset: 0x000C7810
		public static void WriteListReadyToReconnectRequest(ref byte[] data, ref int offset, List<ReadyToReconnectRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ReadyToReconnectRequest value in values)
			{
				ArrayManager.WriteReadyToReconnectRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F76 RID: 8054 RVA: 0x000C968C File Offset: 0x000C788C
		public static ReadyToReconnectRequest ReadReadyToReconnectRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ReadyToReconnectRequest readyToReconnectRequest = new ReadyToReconnectRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			readyToReconnectRequest.DeserializeMessage(array);
			return readyToReconnectRequest;
		}

		// Token: 0x06001F77 RID: 8055 RVA: 0x000C96D0 File Offset: 0x000C78D0
		public static List<ReadyToReconnectRequest> ReadListReadyToReconnectRequest(byte[] data, ref int offset)
		{
			List<ReadyToReconnectRequest> list = new List<ReadyToReconnectRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ReadyToReconnectRequest item = ArrayManager.ReadReadyToReconnectRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F78 RID: 8056 RVA: 0x000C9714 File Offset: 0x000C7914
		public static void WriteStoreTransactionComplete(ref byte[] data, ref int offset, StoreTransactionComplete value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F79 RID: 8057 RVA: 0x000C9730 File Offset: 0x000C7930
		public static void WriteListStoreTransactionComplete(ref byte[] data, ref int offset, List<StoreTransactionComplete> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreTransactionComplete value in values)
			{
				ArrayManager.WriteStoreTransactionComplete(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F7A RID: 8058 RVA: 0x000C97AC File Offset: 0x000C79AC
		public static StoreTransactionComplete ReadStoreTransactionComplete(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreTransactionComplete storeTransactionComplete = new StoreTransactionComplete();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeTransactionComplete.DeserializeMessage(array);
			return storeTransactionComplete;
		}

		// Token: 0x06001F7B RID: 8059 RVA: 0x000C97F0 File Offset: 0x000C79F0
		public static List<StoreTransactionComplete> ReadListStoreTransactionComplete(byte[] data, ref int offset)
		{
			List<StoreTransactionComplete> list = new List<StoreTransactionComplete>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreTransactionComplete item = ArrayManager.ReadStoreTransactionComplete(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F7C RID: 8060 RVA: 0x000C9834 File Offset: 0x000C7A34
		public static void WriteAdminWebCommunityEventsUpdatedPush(ref byte[] data, ref int offset, AdminWebCommunityEventsUpdatedPush value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F7D RID: 8061 RVA: 0x000C9850 File Offset: 0x000C7A50
		public static void WriteListAdminWebCommunityEventsUpdatedPush(ref byte[] data, ref int offset, List<AdminWebCommunityEventsUpdatedPush> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AdminWebCommunityEventsUpdatedPush value in values)
			{
				ArrayManager.WriteAdminWebCommunityEventsUpdatedPush(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F7E RID: 8062 RVA: 0x000C98CC File Offset: 0x000C7ACC
		public static AdminWebCommunityEventsUpdatedPush ReadAdminWebCommunityEventsUpdatedPush(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AdminWebCommunityEventsUpdatedPush adminWebCommunityEventsUpdatedPush = new AdminWebCommunityEventsUpdatedPush();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			adminWebCommunityEventsUpdatedPush.DeserializeMessage(array);
			return adminWebCommunityEventsUpdatedPush;
		}

		// Token: 0x06001F7F RID: 8063 RVA: 0x000C9910 File Offset: 0x000C7B10
		public static List<AdminWebCommunityEventsUpdatedPush> ReadListAdminWebCommunityEventsUpdatedPush(byte[] data, ref int offset)
		{
			List<AdminWebCommunityEventsUpdatedPush> list = new List<AdminWebCommunityEventsUpdatedPush>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AdminWebCommunityEventsUpdatedPush item = ArrayManager.ReadAdminWebCommunityEventsUpdatedPush(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F80 RID: 8064 RVA: 0x000C9954 File Offset: 0x000C7B54
		public static void WriteAuthLoginUserRequest(ref byte[] data, ref int offset, AuthLoginUserRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F81 RID: 8065 RVA: 0x000C9970 File Offset: 0x000C7B70
		public static void WriteListAuthLoginUserRequest(ref byte[] data, ref int offset, List<AuthLoginUserRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AuthLoginUserRequest value in values)
			{
				ArrayManager.WriteAuthLoginUserRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F82 RID: 8066 RVA: 0x000C99EC File Offset: 0x000C7BEC
		public static AuthLoginUserRequest ReadAuthLoginUserRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AuthLoginUserRequest authLoginUserRequest = new AuthLoginUserRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			authLoginUserRequest.DeserializeMessage(array);
			return authLoginUserRequest;
		}

		// Token: 0x06001F83 RID: 8067 RVA: 0x000C9A30 File Offset: 0x000C7C30
		public static List<AuthLoginUserRequest> ReadListAuthLoginUserRequest(byte[] data, ref int offset)
		{
			List<AuthLoginUserRequest> list = new List<AuthLoginUserRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AuthLoginUserRequest item = ArrayManager.ReadAuthLoginUserRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F84 RID: 8068 RVA: 0x000C9A74 File Offset: 0x000C7C74
		public static void WriteAuthLoginUserResponse(ref byte[] data, ref int offset, AuthLoginUserResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F85 RID: 8069 RVA: 0x000C9A90 File Offset: 0x000C7C90
		public static void WriteListAuthLoginUserResponse(ref byte[] data, ref int offset, List<AuthLoginUserResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AuthLoginUserResponse value in values)
			{
				ArrayManager.WriteAuthLoginUserResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F86 RID: 8070 RVA: 0x000C9B0C File Offset: 0x000C7D0C
		public static AuthLoginUserResponse ReadAuthLoginUserResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AuthLoginUserResponse authLoginUserResponse = new AuthLoginUserResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			authLoginUserResponse.DeserializeMessage(array);
			return authLoginUserResponse;
		}

		// Token: 0x06001F87 RID: 8071 RVA: 0x000C9B50 File Offset: 0x000C7D50
		public static List<AuthLoginUserResponse> ReadListAuthLoginUserResponse(byte[] data, ref int offset)
		{
			List<AuthLoginUserResponse> list = new List<AuthLoginUserResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AuthLoginUserResponse item = ArrayManager.ReadAuthLoginUserResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F88 RID: 8072 RVA: 0x000C9B94 File Offset: 0x000C7D94
		public static void WritePingCharacter(ref byte[] data, ref int offset, PingCharacter value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F89 RID: 8073 RVA: 0x000C9BB0 File Offset: 0x000C7DB0
		public static void WriteListPingCharacter(ref byte[] data, ref int offset, List<PingCharacter> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PingCharacter value in values)
			{
				ArrayManager.WritePingCharacter(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F8A RID: 8074 RVA: 0x000C9C2C File Offset: 0x000C7E2C
		public static PingCharacter ReadPingCharacter(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PingCharacter pingCharacter = new PingCharacter();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pingCharacter.DeserializeMessage(array);
			return pingCharacter;
		}

		// Token: 0x06001F8B RID: 8075 RVA: 0x000C9C70 File Offset: 0x000C7E70
		public static List<PingCharacter> ReadListPingCharacter(byte[] data, ref int offset)
		{
			List<PingCharacter> list = new List<PingCharacter>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PingCharacter item = ArrayManager.ReadPingCharacter(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F8C RID: 8076 RVA: 0x000C9CB4 File Offset: 0x000C7EB4
		public static void WriteRequestPlayerStats(ref byte[] data, ref int offset, RequestPlayerStats value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F8D RID: 8077 RVA: 0x000C9CD0 File Offset: 0x000C7ED0
		public static void WriteListRequestPlayerStats(ref byte[] data, ref int offset, List<RequestPlayerStats> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerStats value in values)
			{
				ArrayManager.WriteRequestPlayerStats(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F8E RID: 8078 RVA: 0x000C9D4C File Offset: 0x000C7F4C
		public static RequestPlayerStats ReadRequestPlayerStats(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerStats requestPlayerStats = new RequestPlayerStats();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerStats.DeserializeMessage(array);
			return requestPlayerStats;
		}

		// Token: 0x06001F8F RID: 8079 RVA: 0x000C9D90 File Offset: 0x000C7F90
		public static List<RequestPlayerStats> ReadListRequestPlayerStats(byte[] data, ref int offset)
		{
			List<RequestPlayerStats> list = new List<RequestPlayerStats>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerStats item = ArrayManager.ReadRequestPlayerStats(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F90 RID: 8080 RVA: 0x000C9DD4 File Offset: 0x000C7FD4
		public static void WriteRequestRemoveNewInventoryFlag(ref byte[] data, ref int offset, RequestRemoveNewInventoryFlag value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F91 RID: 8081 RVA: 0x000C9DF0 File Offset: 0x000C7FF0
		public static void WriteListRequestRemoveNewInventoryFlag(ref byte[] data, ref int offset, List<RequestRemoveNewInventoryFlag> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestRemoveNewInventoryFlag value in values)
			{
				ArrayManager.WriteRequestRemoveNewInventoryFlag(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F92 RID: 8082 RVA: 0x000C9E6C File Offset: 0x000C806C
		public static RequestRemoveNewInventoryFlag ReadRequestRemoveNewInventoryFlag(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestRemoveNewInventoryFlag requestRemoveNewInventoryFlag = new RequestRemoveNewInventoryFlag();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestRemoveNewInventoryFlag.DeserializeMessage(array);
			return requestRemoveNewInventoryFlag;
		}

		// Token: 0x06001F93 RID: 8083 RVA: 0x000C9EB0 File Offset: 0x000C80B0
		public static List<RequestRemoveNewInventoryFlag> ReadListRequestRemoveNewInventoryFlag(byte[] data, ref int offset)
		{
			List<RequestRemoveNewInventoryFlag> list = new List<RequestRemoveNewInventoryFlag>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestRemoveNewInventoryFlag item = ArrayManager.ReadRequestRemoveNewInventoryFlag(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F94 RID: 8084 RVA: 0x000C9EF4 File Offset: 0x000C80F4
		public static void WriteResponseRemoveNewInventoryFlag(ref byte[] data, ref int offset, ResponseRemoveNewInventoryFlag value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F95 RID: 8085 RVA: 0x000C9F10 File Offset: 0x000C8110
		public static void WriteListResponseRemoveNewInventoryFlag(ref byte[] data, ref int offset, List<ResponseRemoveNewInventoryFlag> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseRemoveNewInventoryFlag value in values)
			{
				ArrayManager.WriteResponseRemoveNewInventoryFlag(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F96 RID: 8086 RVA: 0x000C9F8C File Offset: 0x000C818C
		public static ResponseRemoveNewInventoryFlag ReadResponseRemoveNewInventoryFlag(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseRemoveNewInventoryFlag responseRemoveNewInventoryFlag = new ResponseRemoveNewInventoryFlag();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseRemoveNewInventoryFlag.DeserializeMessage(array);
			return responseRemoveNewInventoryFlag;
		}

		// Token: 0x06001F97 RID: 8087 RVA: 0x000C9FD0 File Offset: 0x000C81D0
		public static List<ResponseRemoveNewInventoryFlag> ReadListResponseRemoveNewInventoryFlag(byte[] data, ref int offset)
		{
			List<ResponseRemoveNewInventoryFlag> list = new List<ResponseRemoveNewInventoryFlag>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseRemoveNewInventoryFlag item = ArrayManager.ReadResponseRemoveNewInventoryFlag(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F98 RID: 8088 RVA: 0x000CA014 File Offset: 0x000C8214
		public static void WriteRequestPostLoginPackets(ref byte[] data, ref int offset, RequestPostLoginPackets value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F99 RID: 8089 RVA: 0x000CA030 File Offset: 0x000C8230
		public static void WriteListRequestPostLoginPackets(ref byte[] data, ref int offset, List<RequestPostLoginPackets> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPostLoginPackets value in values)
			{
				ArrayManager.WriteRequestPostLoginPackets(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F9A RID: 8090 RVA: 0x000CA0AC File Offset: 0x000C82AC
		public static RequestPostLoginPackets ReadRequestPostLoginPackets(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPostLoginPackets requestPostLoginPackets = new RequestPostLoginPackets();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPostLoginPackets.DeserializeMessage(array);
			return requestPostLoginPackets;
		}

		// Token: 0x06001F9B RID: 8091 RVA: 0x000CA0F0 File Offset: 0x000C82F0
		public static List<RequestPostLoginPackets> ReadListRequestPostLoginPackets(byte[] data, ref int offset)
		{
			List<RequestPostLoginPackets> list = new List<RequestPostLoginPackets>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPostLoginPackets item = ArrayManager.ReadRequestPostLoginPackets(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001F9C RID: 8092 RVA: 0x000CA134 File Offset: 0x000C8334
		public static void WritePushPlayerProgress(ref byte[] data, ref int offset, PushPlayerProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001F9D RID: 8093 RVA: 0x000CA150 File Offset: 0x000C8350
		public static void WriteListPushPlayerProgress(ref byte[] data, ref int offset, List<PushPlayerProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerProgress value in values)
			{
				ArrayManager.WritePushPlayerProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06001F9E RID: 8094 RVA: 0x000CA1CC File Offset: 0x000C83CC
		public static PushPlayerProgress ReadPushPlayerProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerProgress pushPlayerProgress = new PushPlayerProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerProgress.DeserializeMessage(array);
			return pushPlayerProgress;
		}

		// Token: 0x06001F9F RID: 8095 RVA: 0x000CA210 File Offset: 0x000C8410
		public static List<PushPlayerProgress> ReadListPushPlayerProgress(byte[] data, ref int offset)
		{
			List<PushPlayerProgress> list = new List<PushPlayerProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerProgress item = ArrayManager.ReadPushPlayerProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FA0 RID: 8096 RVA: 0x000CA254 File Offset: 0x000C8454
		public static void WriteLevelProgress(ref byte[] data, ref int offset, LevelProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FA1 RID: 8097 RVA: 0x000CA270 File Offset: 0x000C8470
		public static void WriteListLevelProgress(ref byte[] data, ref int offset, List<LevelProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LevelProgress value in values)
			{
				ArrayManager.WriteLevelProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FA2 RID: 8098 RVA: 0x000CA2EC File Offset: 0x000C84EC
		public static LevelProgress ReadLevelProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LevelProgress levelProgress = new LevelProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			levelProgress.DeserializeMessage(array);
			return levelProgress;
		}

		// Token: 0x06001FA3 RID: 8099 RVA: 0x000CA330 File Offset: 0x000C8530
		public static List<LevelProgress> ReadListLevelProgress(byte[] data, ref int offset)
		{
			List<LevelProgress> list = new List<LevelProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LevelProgress item = ArrayManager.ReadLevelProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FA4 RID: 8100 RVA: 0x000CA374 File Offset: 0x000C8574
		public static void WriteHeroProgress(ref byte[] data, ref int offset, HeroProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FA5 RID: 8101 RVA: 0x000CA390 File Offset: 0x000C8590
		public static void WriteListHeroProgress(ref byte[] data, ref int offset, List<HeroProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroProgress value in values)
			{
				ArrayManager.WriteHeroProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FA6 RID: 8102 RVA: 0x000CA40C File Offset: 0x000C860C
		public static HeroProgress ReadHeroProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroProgress heroProgress = new HeroProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroProgress.DeserializeMessage(array);
			return heroProgress;
		}

		// Token: 0x06001FA7 RID: 8103 RVA: 0x000CA450 File Offset: 0x000C8650
		public static List<HeroProgress> ReadListHeroProgress(byte[] data, ref int offset)
		{
			List<HeroProgress> list = new List<HeroProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroProgress item = ArrayManager.ReadHeroProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FA8 RID: 8104 RVA: 0x000CA494 File Offset: 0x000C8694
		public static void WriteRequestPlayerChangePortraitIndex(ref byte[] data, ref int offset, RequestPlayerChangePortraitIndex value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FA9 RID: 8105 RVA: 0x000CA4B0 File Offset: 0x000C86B0
		public static void WriteListRequestPlayerChangePortraitIndex(ref byte[] data, ref int offset, List<RequestPlayerChangePortraitIndex> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerChangePortraitIndex value in values)
			{
				ArrayManager.WriteRequestPlayerChangePortraitIndex(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FAA RID: 8106 RVA: 0x000CA52C File Offset: 0x000C872C
		public static RequestPlayerChangePortraitIndex ReadRequestPlayerChangePortraitIndex(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerChangePortraitIndex requestPlayerChangePortraitIndex = new RequestPlayerChangePortraitIndex();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerChangePortraitIndex.DeserializeMessage(array);
			return requestPlayerChangePortraitIndex;
		}

		// Token: 0x06001FAB RID: 8107 RVA: 0x000CA570 File Offset: 0x000C8770
		public static List<RequestPlayerChangePortraitIndex> ReadListRequestPlayerChangePortraitIndex(byte[] data, ref int offset)
		{
			List<RequestPlayerChangePortraitIndex> list = new List<RequestPlayerChangePortraitIndex>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerChangePortraitIndex item = ArrayManager.ReadRequestPlayerChangePortraitIndex(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FAC RID: 8108 RVA: 0x000CA5B4 File Offset: 0x000C87B4
		public static void WriteRequestPlayerDecks(ref byte[] data, ref int offset, RequestPlayerDecks value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FAD RID: 8109 RVA: 0x000CA5D0 File Offset: 0x000C87D0
		public static void WriteListRequestPlayerDecks(ref byte[] data, ref int offset, List<RequestPlayerDecks> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerDecks value in values)
			{
				ArrayManager.WriteRequestPlayerDecks(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FAE RID: 8110 RVA: 0x000CA64C File Offset: 0x000C884C
		public static RequestPlayerDecks ReadRequestPlayerDecks(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerDecks requestPlayerDecks = new RequestPlayerDecks();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerDecks.DeserializeMessage(array);
			return requestPlayerDecks;
		}

		// Token: 0x06001FAF RID: 8111 RVA: 0x000CA690 File Offset: 0x000C8890
		public static List<RequestPlayerDecks> ReadListRequestPlayerDecks(byte[] data, ref int offset)
		{
			List<RequestPlayerDecks> list = new List<RequestPlayerDecks>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerDecks item = ArrayManager.ReadRequestPlayerDecks(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FB0 RID: 8112 RVA: 0x000CA6D4 File Offset: 0x000C88D4
		public static void WriteRequestPlayerDeckDetail(ref byte[] data, ref int offset, RequestPlayerDeckDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FB1 RID: 8113 RVA: 0x000CA6F0 File Offset: 0x000C88F0
		public static void WriteListRequestPlayerDeckDetail(ref byte[] data, ref int offset, List<RequestPlayerDeckDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerDeckDetail value in values)
			{
				ArrayManager.WriteRequestPlayerDeckDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FB2 RID: 8114 RVA: 0x000CA76C File Offset: 0x000C896C
		public static RequestPlayerDeckDetail ReadRequestPlayerDeckDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerDeckDetail requestPlayerDeckDetail = new RequestPlayerDeckDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerDeckDetail.DeserializeMessage(array);
			return requestPlayerDeckDetail;
		}

		// Token: 0x06001FB3 RID: 8115 RVA: 0x000CA7B0 File Offset: 0x000C89B0
		public static List<RequestPlayerDeckDetail> ReadListRequestPlayerDeckDetail(byte[] data, ref int offset)
		{
			List<RequestPlayerDeckDetail> list = new List<RequestPlayerDeckDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerDeckDetail item = ArrayManager.ReadRequestPlayerDeckDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FB4 RID: 8116 RVA: 0x000CA7F4 File Offset: 0x000C89F4
		public static void WriteRequestPlayerDeleteDeck(ref byte[] data, ref int offset, RequestPlayerDeleteDeck value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FB5 RID: 8117 RVA: 0x000CA810 File Offset: 0x000C8A10
		public static void WriteListRequestPlayerDeleteDeck(ref byte[] data, ref int offset, List<RequestPlayerDeleteDeck> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerDeleteDeck value in values)
			{
				ArrayManager.WriteRequestPlayerDeleteDeck(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FB6 RID: 8118 RVA: 0x000CA88C File Offset: 0x000C8A8C
		public static RequestPlayerDeleteDeck ReadRequestPlayerDeleteDeck(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerDeleteDeck requestPlayerDeleteDeck = new RequestPlayerDeleteDeck();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerDeleteDeck.DeserializeMessage(array);
			return requestPlayerDeleteDeck;
		}

		// Token: 0x06001FB7 RID: 8119 RVA: 0x000CA8D0 File Offset: 0x000C8AD0
		public static List<RequestPlayerDeleteDeck> ReadListRequestPlayerDeleteDeck(byte[] data, ref int offset)
		{
			List<RequestPlayerDeleteDeck> list = new List<RequestPlayerDeleteDeck>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerDeleteDeck item = ArrayManager.ReadRequestPlayerDeleteDeck(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FB8 RID: 8120 RVA: 0x000CA914 File Offset: 0x000C8B14
		public static void WriteRequestPlayerAddDeck(ref byte[] data, ref int offset, RequestPlayerAddDeck value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FB9 RID: 8121 RVA: 0x000CA930 File Offset: 0x000C8B30
		public static void WriteListRequestPlayerAddDeck(ref byte[] data, ref int offset, List<RequestPlayerAddDeck> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerAddDeck value in values)
			{
				ArrayManager.WriteRequestPlayerAddDeck(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FBA RID: 8122 RVA: 0x000CA9AC File Offset: 0x000C8BAC
		public static RequestPlayerAddDeck ReadRequestPlayerAddDeck(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerAddDeck requestPlayerAddDeck = new RequestPlayerAddDeck();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerAddDeck.DeserializeMessage(array);
			return requestPlayerAddDeck;
		}

		// Token: 0x06001FBB RID: 8123 RVA: 0x000CA9F0 File Offset: 0x000C8BF0
		public static List<RequestPlayerAddDeck> ReadListRequestPlayerAddDeck(byte[] data, ref int offset)
		{
			List<RequestPlayerAddDeck> list = new List<RequestPlayerAddDeck>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerAddDeck item = ArrayManager.ReadRequestPlayerAddDeck(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FBC RID: 8124 RVA: 0x000CAA34 File Offset: 0x000C8C34
		public static void WriteRequestPlayerChangeDeckMeta(ref byte[] data, ref int offset, RequestPlayerChangeDeckMeta value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FBD RID: 8125 RVA: 0x000CAA50 File Offset: 0x000C8C50
		public static void WriteListRequestPlayerChangeDeckMeta(ref byte[] data, ref int offset, List<RequestPlayerChangeDeckMeta> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerChangeDeckMeta value in values)
			{
				ArrayManager.WriteRequestPlayerChangeDeckMeta(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FBE RID: 8126 RVA: 0x000CAACC File Offset: 0x000C8CCC
		public static RequestPlayerChangeDeckMeta ReadRequestPlayerChangeDeckMeta(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerChangeDeckMeta requestPlayerChangeDeckMeta = new RequestPlayerChangeDeckMeta();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerChangeDeckMeta.DeserializeMessage(array);
			return requestPlayerChangeDeckMeta;
		}

		// Token: 0x06001FBF RID: 8127 RVA: 0x000CAB10 File Offset: 0x000C8D10
		public static List<RequestPlayerChangeDeckMeta> ReadListRequestPlayerChangeDeckMeta(byte[] data, ref int offset)
		{
			List<RequestPlayerChangeDeckMeta> list = new List<RequestPlayerChangeDeckMeta>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerChangeDeckMeta item = ArrayManager.ReadRequestPlayerChangeDeckMeta(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FC0 RID: 8128 RVA: 0x000CAB54 File Offset: 0x000C8D54
		public static void WriteRequestPlayerPostDeckUpdateDetail(ref byte[] data, ref int offset, RequestPlayerPostDeckUpdateDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FC1 RID: 8129 RVA: 0x000CAB70 File Offset: 0x000C8D70
		public static void WriteListRequestPlayerPostDeckUpdateDetail(ref byte[] data, ref int offset, List<RequestPlayerPostDeckUpdateDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerPostDeckUpdateDetail value in values)
			{
				ArrayManager.WriteRequestPlayerPostDeckUpdateDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FC2 RID: 8130 RVA: 0x000CABEC File Offset: 0x000C8DEC
		public static RequestPlayerPostDeckUpdateDetail ReadRequestPlayerPostDeckUpdateDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerPostDeckUpdateDetail requestPlayerPostDeckUpdateDetail = new RequestPlayerPostDeckUpdateDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerPostDeckUpdateDetail.DeserializeMessage(array);
			return requestPlayerPostDeckUpdateDetail;
		}

		// Token: 0x06001FC3 RID: 8131 RVA: 0x000CAC30 File Offset: 0x000C8E30
		public static List<RequestPlayerPostDeckUpdateDetail> ReadListRequestPlayerPostDeckUpdateDetail(byte[] data, ref int offset)
		{
			List<RequestPlayerPostDeckUpdateDetail> list = new List<RequestPlayerPostDeckUpdateDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerPostDeckUpdateDetail item = ArrayManager.ReadRequestPlayerPostDeckUpdateDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FC4 RID: 8132 RVA: 0x000CAC74 File Offset: 0x000C8E74
		public static void WriteRequestPlayerPostDeckUpdate(ref byte[] data, ref int offset, RequestPlayerPostDeckUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FC5 RID: 8133 RVA: 0x000CAC90 File Offset: 0x000C8E90
		public static void WriteListRequestPlayerPostDeckUpdate(ref byte[] data, ref int offset, List<RequestPlayerPostDeckUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerPostDeckUpdate value in values)
			{
				ArrayManager.WriteRequestPlayerPostDeckUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FC6 RID: 8134 RVA: 0x000CAD0C File Offset: 0x000C8F0C
		public static RequestPlayerPostDeckUpdate ReadRequestPlayerPostDeckUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerPostDeckUpdate requestPlayerPostDeckUpdate = new RequestPlayerPostDeckUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerPostDeckUpdate.DeserializeMessage(array);
			return requestPlayerPostDeckUpdate;
		}

		// Token: 0x06001FC7 RID: 8135 RVA: 0x000CAD50 File Offset: 0x000C8F50
		public static List<RequestPlayerPostDeckUpdate> ReadListRequestPlayerPostDeckUpdate(byte[] data, ref int offset)
		{
			List<RequestPlayerPostDeckUpdate> list = new List<RequestPlayerPostDeckUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerPostDeckUpdate item = ArrayManager.ReadRequestPlayerPostDeckUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FC8 RID: 8136 RVA: 0x000CAD94 File Offset: 0x000C8F94
		public static void WritePlayerBotDifficulty(ref byte[] data, ref int offset, PlayerBotDifficulty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FC9 RID: 8137 RVA: 0x000CADB0 File Offset: 0x000C8FB0
		public static void WriteListPlayerBotDifficulty(ref byte[] data, ref int offset, List<PlayerBotDifficulty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerBotDifficulty value in values)
			{
				ArrayManager.WritePlayerBotDifficulty(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FCA RID: 8138 RVA: 0x000CAE2C File Offset: 0x000C902C
		public static PlayerBotDifficulty ReadPlayerBotDifficulty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerBotDifficulty playerBotDifficulty = new PlayerBotDifficulty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerBotDifficulty.DeserializeMessage(array);
			return playerBotDifficulty;
		}

		// Token: 0x06001FCB RID: 8139 RVA: 0x000CAE70 File Offset: 0x000C9070
		public static List<PlayerBotDifficulty> ReadListPlayerBotDifficulty(byte[] data, ref int offset)
		{
			List<PlayerBotDifficulty> list = new List<PlayerBotDifficulty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerBotDifficulty item = ArrayManager.ReadPlayerBotDifficulty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FCC RID: 8140 RVA: 0x000CAEB4 File Offset: 0x000C90B4
		public static void WritePacketTutorialProgress(ref byte[] data, ref int offset, PacketTutorialProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FCD RID: 8141 RVA: 0x000CAED0 File Offset: 0x000C90D0
		public static void WriteListPacketTutorialProgress(ref byte[] data, ref int offset, List<PacketTutorialProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketTutorialProgress value in values)
			{
				ArrayManager.WritePacketTutorialProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FCE RID: 8142 RVA: 0x000CAF4C File Offset: 0x000C914C
		public static PacketTutorialProgress ReadPacketTutorialProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketTutorialProgress packetTutorialProgress = new PacketTutorialProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetTutorialProgress.DeserializeMessage(array);
			return packetTutorialProgress;
		}

		// Token: 0x06001FCF RID: 8143 RVA: 0x000CAF90 File Offset: 0x000C9190
		public static List<PacketTutorialProgress> ReadListPacketTutorialProgress(byte[] data, ref int offset)
		{
			List<PacketTutorialProgress> list = new List<PacketTutorialProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketTutorialProgress item = ArrayManager.ReadPacketTutorialProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FD0 RID: 8144 RVA: 0x000CAFD4 File Offset: 0x000C91D4
		public static void WriteRequestAddTutorialProgress(ref byte[] data, ref int offset, RequestAddTutorialProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FD1 RID: 8145 RVA: 0x000CAFF0 File Offset: 0x000C91F0
		public static void WriteListRequestAddTutorialProgress(ref byte[] data, ref int offset, List<RequestAddTutorialProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestAddTutorialProgress value in values)
			{
				ArrayManager.WriteRequestAddTutorialProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FD2 RID: 8146 RVA: 0x000CB06C File Offset: 0x000C926C
		public static RequestAddTutorialProgress ReadRequestAddTutorialProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestAddTutorialProgress requestAddTutorialProgress = new RequestAddTutorialProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestAddTutorialProgress.DeserializeMessage(array);
			return requestAddTutorialProgress;
		}

		// Token: 0x06001FD3 RID: 8147 RVA: 0x000CB0B0 File Offset: 0x000C92B0
		public static List<RequestAddTutorialProgress> ReadListRequestAddTutorialProgress(byte[] data, ref int offset)
		{
			List<RequestAddTutorialProgress> list = new List<RequestAddTutorialProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestAddTutorialProgress item = ArrayManager.ReadRequestAddTutorialProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FD4 RID: 8148 RVA: 0x000CB0F4 File Offset: 0x000C92F4
		public static void WriteResponseAddTutorialProgress(ref byte[] data, ref int offset, ResponseAddTutorialProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FD5 RID: 8149 RVA: 0x000CB110 File Offset: 0x000C9310
		public static void WriteListResponseAddTutorialProgress(ref byte[] data, ref int offset, List<ResponseAddTutorialProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseAddTutorialProgress value in values)
			{
				ArrayManager.WriteResponseAddTutorialProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FD6 RID: 8150 RVA: 0x000CB18C File Offset: 0x000C938C
		public static ResponseAddTutorialProgress ReadResponseAddTutorialProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseAddTutorialProgress responseAddTutorialProgress = new ResponseAddTutorialProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseAddTutorialProgress.DeserializeMessage(array);
			return responseAddTutorialProgress;
		}

		// Token: 0x06001FD7 RID: 8151 RVA: 0x000CB1D0 File Offset: 0x000C93D0
		public static List<ResponseAddTutorialProgress> ReadListResponseAddTutorialProgress(byte[] data, ref int offset)
		{
			List<ResponseAddTutorialProgress> list = new List<ResponseAddTutorialProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseAddTutorialProgress item = ArrayManager.ReadResponseAddTutorialProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FD8 RID: 8152 RVA: 0x000CB214 File Offset: 0x000C9414
		public static void WriteRequestResetTutorial(ref byte[] data, ref int offset, RequestResetTutorial value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FD9 RID: 8153 RVA: 0x000CB230 File Offset: 0x000C9430
		public static void WriteListRequestResetTutorial(ref byte[] data, ref int offset, List<RequestResetTutorial> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestResetTutorial value in values)
			{
				ArrayManager.WriteRequestResetTutorial(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FDA RID: 8154 RVA: 0x000CB2AC File Offset: 0x000C94AC
		public static RequestResetTutorial ReadRequestResetTutorial(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestResetTutorial requestResetTutorial = new RequestResetTutorial();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestResetTutorial.DeserializeMessage(array);
			return requestResetTutorial;
		}

		// Token: 0x06001FDB RID: 8155 RVA: 0x000CB2F0 File Offset: 0x000C94F0
		public static List<RequestResetTutorial> ReadListRequestResetTutorial(byte[] data, ref int offset)
		{
			List<RequestResetTutorial> list = new List<RequestResetTutorial>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestResetTutorial item = ArrayManager.ReadRequestResetTutorial(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FDC RID: 8156 RVA: 0x000CB334 File Offset: 0x000C9534
		public static void WriteResponseResetTutorial(ref byte[] data, ref int offset, ResponseResetTutorial value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FDD RID: 8157 RVA: 0x000CB350 File Offset: 0x000C9550
		public static void WriteListResponseResetTutorial(ref byte[] data, ref int offset, List<ResponseResetTutorial> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseResetTutorial value in values)
			{
				ArrayManager.WriteResponseResetTutorial(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FDE RID: 8158 RVA: 0x000CB3CC File Offset: 0x000C95CC
		public static ResponseResetTutorial ReadResponseResetTutorial(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseResetTutorial responseResetTutorial = new ResponseResetTutorial();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseResetTutorial.DeserializeMessage(array);
			return responseResetTutorial;
		}

		// Token: 0x06001FDF RID: 8159 RVA: 0x000CB410 File Offset: 0x000C9610
		public static List<ResponseResetTutorial> ReadListResponseResetTutorial(byte[] data, ref int offset)
		{
			List<ResponseResetTutorial> list = new List<ResponseResetTutorial>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseResetTutorial item = ArrayManager.ReadResponseResetTutorial(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FE0 RID: 8160 RVA: 0x000CB454 File Offset: 0x000C9654
		public static void WriteResponsePlayerStats(ref byte[] data, ref int offset, ResponsePlayerStats value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FE1 RID: 8161 RVA: 0x000CB470 File Offset: 0x000C9670
		public static void WriteListResponsePlayerStats(ref byte[] data, ref int offset, List<ResponsePlayerStats> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerStats value in values)
			{
				ArrayManager.WriteResponsePlayerStats(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FE2 RID: 8162 RVA: 0x000CB4EC File Offset: 0x000C96EC
		public static ResponsePlayerStats ReadResponsePlayerStats(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerStats responsePlayerStats = new ResponsePlayerStats();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerStats.DeserializeMessage(array);
			return responsePlayerStats;
		}

		// Token: 0x06001FE3 RID: 8163 RVA: 0x000CB530 File Offset: 0x000C9730
		public static List<ResponsePlayerStats> ReadListResponsePlayerStats(byte[] data, ref int offset)
		{
			List<ResponsePlayerStats> list = new List<ResponsePlayerStats>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerStats item = ArrayManager.ReadResponsePlayerStats(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FE4 RID: 8164 RVA: 0x000CB574 File Offset: 0x000C9774
		public static void WriteBaseAwardEntry(ref byte[] data, ref int offset, BaseAwardEntry value)
		{
			uint value2 = 0u;
			if (value == null)
			{
				value2 = 0u;
			}
			else if (value.GetType() == typeof(KeystoneGrantEntry))
			{
				value2 = 1360832035u;
			}
			else if (value.GetType() == typeof(KeystoneUpgradeEntry))
			{
				value2 = 2997943509u;
			}
			else if (value.GetType() == typeof(KeystoneDepleteEntry))
			{
				value2 = 3091768457u;
			}
			else if (value.GetType() == typeof(KeystoneDeactivateEntry))
			{
				value2 = 1599513057u;
			}
			else if (value.GetType() == typeof(KeystoneRerollRequestEntry))
			{
				value2 = 669766743u;
			}
			else if (value.GetType() == typeof(KeystoneRerollEntry))
			{
				value2 = 8867123u;
			}
			else if (value.GetType() == typeof(SlotPart))
			{
				value2 = 3474257593u;
			}
			else if (value.GetType() == typeof(TrapStrength))
			{
				value2 = 1720564818u;
			}
			else if (value.GetType() == typeof(RevokeSteamDLC))
			{
				value2 = 25802964u;
			}
			else if (value.GetType() == typeof(BonusSkulls))
			{
				value2 = 290331529u;
			}
			else if (value.GetType() == typeof(ChestAward))
			{
				value2 = 691808809u;
			}
			else if (value.GetType() == typeof(SkullsCredit))
			{
				value2 = 429512362u;
			}
			else if (value.GetType() == typeof(SkullsDebit))
			{
				value2 = 1451433187u;
			}
			else if (value.GetType() == typeof(GibsCredit))
			{
				value2 = 2328749131u;
			}
			else if (value.GetType() == typeof(GibsDebit))
			{
				value2 = 189685870u;
			}
			else if (value.GetType() == typeof(GoldCredit))
			{
				value2 = 1310993843u;
			}
			else if (value.GetType() == typeof(GoldDebit))
			{
				value2 = 2211258519u;
			}
			else if (value.GetType() == typeof(BaseXP))
			{
				value2 = 2040517672u;
			}
			else if (value.GetType() == typeof(BonusXP))
			{
				value2 = 2181549954u;
			}
			else if (value.GetType() == typeof(CommunityEventXPBoostAward))
			{
				value2 = 2452211831u;
			}
			else if (value.GetType() == typeof(OwnedHeroBonusXPAward))
			{
				value2 = 4239422239u;
			}
			else if (value.GetType() == typeof(GuildPlayBonusXP))
			{
				value2 = 3279442748u;
			}
			else if (value.GetType() == typeof(MatchmakingBonusXP))
			{
				value2 = 3357928057u;
			}
			else if (value.GetType() == typeof(FinishingGameEarlyXP))
			{
				value2 = 2266498662u;
			}
			else if (value.GetType() == typeof(WinningXP))
			{
				value2 = 3450016786u;
			}
			else if (value.GetType() == typeof(GettingToMaxTimeXP))
			{
				value2 = 790935960u;
			}
			else if (value.GetType() == typeof(ItemAward))
			{
				value2 = 1551808416u;
			}
			else if (value.GetType() == typeof(ItemDebit))
			{
				value2 = 3628712547u;
			}
			else if (value.GetType() == typeof(ItemDelete))
			{
				value2 = 3531377965u;
			}
			else if (value.GetType() == typeof(AttributeAvatarKey))
			{
				value2 = 1062336106u;
			}
			else if (value.GetType() == typeof(AttributeIsRobotEmployee))
			{
				value2 = 2504398866u;
			}
			else if (value.GetType() == typeof(AttributeHasBetaAccess))
			{
				value2 = 1367386640u;
			}
			else if (value.GetType() == typeof(AttributeFoundersLevelApprentice))
			{
				value2 = 1427942764u;
			}
			else if (value.GetType() == typeof(AttributeFoundersLevelWarMage))
			{
				value2 = 858315555u;
			}
			else if (value.GetType() == typeof(AttributeFoundersLevelMaster))
			{
				value2 = 475402054u;
			}
			else if (value.GetType() == typeof(PlayerBoostAwardEntry))
			{
				value2 = 3783838708u;
			}
			else if (value.GetType() == typeof(PlayerBoostBonusXPEntry))
			{
				value2 = 1073714819u;
			}
			else if (value.GetType() == typeof(TeamMemberBoostBonusXPEntry))
			{
				value2 = 3517520885u;
			}
			else if (value.GetType() == typeof(PlayerBoostBonusSkullsEntry))
			{
				value2 = 2587831611u;
			}
			else if (value.GetType() == typeof(TeamMemberBoostBonusSkullsEntry))
			{
				value2 = 2530569989u;
			}
			else if (value.GetType() == typeof(StoreOfferPurchaseGold))
			{
				value2 = 3340948683u;
			}
			else if (value.GetType() == typeof(GameCodeRedemptionEntry))
			{
				value2 = 465170201u;
			}
			else if (value.GetType() == typeof(StoreOfferPurchaseSkulls))
			{
				value2 = 2800248408u;
			}
			else if (value.GetType() == typeof(StoreOfferPurchaseItem))
			{
				value2 = 2677075076u;
			}
			else if (value.GetType() == typeof(GuildPointsCredit))
			{
				value2 = 1411098756u;
			}
			else if (value.GetType() == typeof(BucketUnlockAwardEntry))
			{
				value2 = 1073088260u;
			}
			byte[] array = value.SerializeMessage();
			byte[] array2 = new byte[array.Length + 4];
			Array.Copy(BitConverter.GetBytes(value2), 0, array2, 0, 4);
			Array.Copy(array, 0, array2, 4, array.Length);
			ArrayManager.WriteByteArray(ref data, ref offset, array2);
		}

		// Token: 0x06001FE5 RID: 8165 RVA: 0x000CBB80 File Offset: 0x000C9D80
		public static void WriteListBaseAwardEntry(ref byte[] data, ref int offset, List<BaseAwardEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BaseAwardEntry value in values)
			{
				ArrayManager.WriteBaseAwardEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FE6 RID: 8166 RVA: 0x000CBBFC File Offset: 0x000C9DFC
		public static BaseAwardEntry ReadBaseAwardEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			uint num2 = BitConverter.ToUInt32(data, offset);
			offset += 4;
			BaseAwardEntry baseAwardEntry = null;
			if (num2 == 0u)
			{
				return baseAwardEntry;
			}
			if (num2 == 1360832035u)
			{
				baseAwardEntry = new KeystoneGrantEntry();
			}
			else if (num2 == 2997943509u)
			{
				baseAwardEntry = new KeystoneUpgradeEntry();
			}
			else if (num2 == 3091768457u)
			{
				baseAwardEntry = new KeystoneDepleteEntry();
			}
			else if (num2 == 1599513057u)
			{
				baseAwardEntry = new KeystoneDeactivateEntry();
			}
			else if (num2 == 669766743u)
			{
				baseAwardEntry = new KeystoneRerollRequestEntry();
			}
			else if (num2 == 8867123u)
			{
				baseAwardEntry = new KeystoneRerollEntry();
			}
			else if (num2 == 3474257593u)
			{
				baseAwardEntry = new SlotPart();
			}
			else if (num2 == 1720564818u)
			{
				baseAwardEntry = new TrapStrength();
			}
			else if (num2 == 25802964u)
			{
				baseAwardEntry = new RevokeSteamDLC();
			}
			else if (num2 == 290331529u)
			{
				baseAwardEntry = new BonusSkulls();
			}
			else if (num2 == 691808809u)
			{
				baseAwardEntry = new ChestAward();
			}
			else if (num2 == 429512362u)
			{
				baseAwardEntry = new SkullsCredit();
			}
			else if (num2 == 1451433187u)
			{
				baseAwardEntry = new SkullsDebit();
			}
			else if (num2 == 2328749131u)
			{
				baseAwardEntry = new GibsCredit();
			}
			else if (num2 == 189685870u)
			{
				baseAwardEntry = new GibsDebit();
			}
			else if (num2 == 1310993843u)
			{
				baseAwardEntry = new GoldCredit();
			}
			else if (num2 == 2211258519u)
			{
				baseAwardEntry = new GoldDebit();
			}
			else if (num2 == 2040517672u)
			{
				baseAwardEntry = new BaseXP();
			}
			else if (num2 == 2181549954u)
			{
				baseAwardEntry = new BonusXP();
			}
			else if (num2 == 2452211831u)
			{
				baseAwardEntry = new CommunityEventXPBoostAward();
			}
			else if (num2 == 4239422239u)
			{
				baseAwardEntry = new OwnedHeroBonusXPAward();
			}
			else if (num2 == 3279442748u)
			{
				baseAwardEntry = new GuildPlayBonusXP();
			}
			else if (num2 == 3357928057u)
			{
				baseAwardEntry = new MatchmakingBonusXP();
			}
			else if (num2 == 2266498662u)
			{
				baseAwardEntry = new FinishingGameEarlyXP();
			}
			else if (num2 == 3450016786u)
			{
				baseAwardEntry = new WinningXP();
			}
			else if (num2 == 790935960u)
			{
				baseAwardEntry = new GettingToMaxTimeXP();
			}
			else if (num2 == 1551808416u)
			{
				baseAwardEntry = new ItemAward();
			}
			else if (num2 == 3628712547u)
			{
				baseAwardEntry = new ItemDebit();
			}
			else if (num2 == 3531377965u)
			{
				baseAwardEntry = new ItemDelete();
			}
			else if (num2 == 1062336106u)
			{
				baseAwardEntry = new AttributeAvatarKey();
			}
			else if (num2 == 2504398866u)
			{
				baseAwardEntry = new AttributeIsRobotEmployee();
			}
			else if (num2 == 1367386640u)
			{
				baseAwardEntry = new AttributeHasBetaAccess();
			}
			else if (num2 == 1427942764u)
			{
				baseAwardEntry = new AttributeFoundersLevelApprentice();
			}
			else if (num2 == 858315555u)
			{
				baseAwardEntry = new AttributeFoundersLevelWarMage();
			}
			else if (num2 == 475402054u)
			{
				baseAwardEntry = new AttributeFoundersLevelMaster();
			}
			else if (num2 == 3783838708u)
			{
				baseAwardEntry = new PlayerBoostAwardEntry();
			}
			else if (num2 == 1073714819u)
			{
				baseAwardEntry = new PlayerBoostBonusXPEntry();
			}
			else if (num2 == 3517520885u)
			{
				baseAwardEntry = new TeamMemberBoostBonusXPEntry();
			}
			else if (num2 == 2587831611u)
			{
				baseAwardEntry = new PlayerBoostBonusSkullsEntry();
			}
			else if (num2 == 2530569989u)
			{
				baseAwardEntry = new TeamMemberBoostBonusSkullsEntry();
			}
			else if (num2 == 3340948683u)
			{
				baseAwardEntry = new StoreOfferPurchaseGold();
			}
			else if (num2 == 465170201u)
			{
				baseAwardEntry = new GameCodeRedemptionEntry();
			}
			else if (num2 == 2800248408u)
			{
				baseAwardEntry = new StoreOfferPurchaseSkulls();
			}
			else if (num2 == 2677075076u)
			{
				baseAwardEntry = new StoreOfferPurchaseItem();
			}
			else if (num2 == 1411098756u)
			{
				baseAwardEntry = new GuildPointsCredit();
			}
			else if (num2 == 1073088260u)
			{
				baseAwardEntry = new BucketUnlockAwardEntry();
			}
			num -= 4;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			baseAwardEntry.DeserializeMessage(array);
			return baseAwardEntry;
		}

		// Token: 0x06001FE7 RID: 8167 RVA: 0x000CC044 File Offset: 0x000CA244
		public static List<BaseAwardEntry> ReadListBaseAwardEntry(byte[] data, ref int offset)
		{
			List<BaseAwardEntry> list = new List<BaseAwardEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BaseAwardEntry item = ArrayManager.ReadBaseAwardEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FE8 RID: 8168 RVA: 0x000CC088 File Offset: 0x000CA288
		public static void WriteKeystoneGrantEntry(ref byte[] data, ref int offset, KeystoneGrantEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FE9 RID: 8169 RVA: 0x000CC0A4 File Offset: 0x000CA2A4
		public static void WriteListKeystoneGrantEntry(ref byte[] data, ref int offset, List<KeystoneGrantEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneGrantEntry value in values)
			{
				ArrayManager.WriteKeystoneGrantEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FEA RID: 8170 RVA: 0x000CC120 File Offset: 0x000CA320
		public static KeystoneGrantEntry ReadKeystoneGrantEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneGrantEntry keystoneGrantEntry = new KeystoneGrantEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneGrantEntry.DeserializeMessage(array);
			return keystoneGrantEntry;
		}

		// Token: 0x06001FEB RID: 8171 RVA: 0x000CC164 File Offset: 0x000CA364
		public static List<KeystoneGrantEntry> ReadListKeystoneGrantEntry(byte[] data, ref int offset)
		{
			List<KeystoneGrantEntry> list = new List<KeystoneGrantEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneGrantEntry item = ArrayManager.ReadKeystoneGrantEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FEC RID: 8172 RVA: 0x000CC1A8 File Offset: 0x000CA3A8
		public static void WriteKeystoneUpgradeEntry(ref byte[] data, ref int offset, KeystoneUpgradeEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FED RID: 8173 RVA: 0x000CC1C4 File Offset: 0x000CA3C4
		public static void WriteListKeystoneUpgradeEntry(ref byte[] data, ref int offset, List<KeystoneUpgradeEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneUpgradeEntry value in values)
			{
				ArrayManager.WriteKeystoneUpgradeEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FEE RID: 8174 RVA: 0x000CC240 File Offset: 0x000CA440
		public static KeystoneUpgradeEntry ReadKeystoneUpgradeEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneUpgradeEntry keystoneUpgradeEntry = new KeystoneUpgradeEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneUpgradeEntry.DeserializeMessage(array);
			return keystoneUpgradeEntry;
		}

		// Token: 0x06001FEF RID: 8175 RVA: 0x000CC284 File Offset: 0x000CA484
		public static List<KeystoneUpgradeEntry> ReadListKeystoneUpgradeEntry(byte[] data, ref int offset)
		{
			List<KeystoneUpgradeEntry> list = new List<KeystoneUpgradeEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneUpgradeEntry item = ArrayManager.ReadKeystoneUpgradeEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FF0 RID: 8176 RVA: 0x000CC2C8 File Offset: 0x000CA4C8
		public static void WriteKeystoneDepleteEntry(ref byte[] data, ref int offset, KeystoneDepleteEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FF1 RID: 8177 RVA: 0x000CC2E4 File Offset: 0x000CA4E4
		public static void WriteListKeystoneDepleteEntry(ref byte[] data, ref int offset, List<KeystoneDepleteEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneDepleteEntry value in values)
			{
				ArrayManager.WriteKeystoneDepleteEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FF2 RID: 8178 RVA: 0x000CC360 File Offset: 0x000CA560
		public static KeystoneDepleteEntry ReadKeystoneDepleteEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneDepleteEntry keystoneDepleteEntry = new KeystoneDepleteEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneDepleteEntry.DeserializeMessage(array);
			return keystoneDepleteEntry;
		}

		// Token: 0x06001FF3 RID: 8179 RVA: 0x000CC3A4 File Offset: 0x000CA5A4
		public static List<KeystoneDepleteEntry> ReadListKeystoneDepleteEntry(byte[] data, ref int offset)
		{
			List<KeystoneDepleteEntry> list = new List<KeystoneDepleteEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneDepleteEntry item = ArrayManager.ReadKeystoneDepleteEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FF4 RID: 8180 RVA: 0x000CC3E8 File Offset: 0x000CA5E8
		public static void WriteKeystoneDeactivateEntry(ref byte[] data, ref int offset, KeystoneDeactivateEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FF5 RID: 8181 RVA: 0x000CC404 File Offset: 0x000CA604
		public static void WriteListKeystoneDeactivateEntry(ref byte[] data, ref int offset, List<KeystoneDeactivateEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneDeactivateEntry value in values)
			{
				ArrayManager.WriteKeystoneDeactivateEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FF6 RID: 8182 RVA: 0x000CC480 File Offset: 0x000CA680
		public static KeystoneDeactivateEntry ReadKeystoneDeactivateEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneDeactivateEntry keystoneDeactivateEntry = new KeystoneDeactivateEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneDeactivateEntry.DeserializeMessage(array);
			return keystoneDeactivateEntry;
		}

		// Token: 0x06001FF7 RID: 8183 RVA: 0x000CC4C4 File Offset: 0x000CA6C4
		public static List<KeystoneDeactivateEntry> ReadListKeystoneDeactivateEntry(byte[] data, ref int offset)
		{
			List<KeystoneDeactivateEntry> list = new List<KeystoneDeactivateEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneDeactivateEntry item = ArrayManager.ReadKeystoneDeactivateEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FF8 RID: 8184 RVA: 0x000CC508 File Offset: 0x000CA708
		public static void WriteKeystoneRerollRequestEntry(ref byte[] data, ref int offset, KeystoneRerollRequestEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FF9 RID: 8185 RVA: 0x000CC524 File Offset: 0x000CA724
		public static void WriteListKeystoneRerollRequestEntry(ref byte[] data, ref int offset, List<KeystoneRerollRequestEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneRerollRequestEntry value in values)
			{
				ArrayManager.WriteKeystoneRerollRequestEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FFA RID: 8186 RVA: 0x000CC5A0 File Offset: 0x000CA7A0
		public static KeystoneRerollRequestEntry ReadKeystoneRerollRequestEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneRerollRequestEntry keystoneRerollRequestEntry = new KeystoneRerollRequestEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneRerollRequestEntry.DeserializeMessage(array);
			return keystoneRerollRequestEntry;
		}

		// Token: 0x06001FFB RID: 8187 RVA: 0x000CC5E4 File Offset: 0x000CA7E4
		public static List<KeystoneRerollRequestEntry> ReadListKeystoneRerollRequestEntry(byte[] data, ref int offset)
		{
			List<KeystoneRerollRequestEntry> list = new List<KeystoneRerollRequestEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneRerollRequestEntry item = ArrayManager.ReadKeystoneRerollRequestEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06001FFC RID: 8188 RVA: 0x000CC628 File Offset: 0x000CA828
		public static void WriteKeystoneRerollEntry(ref byte[] data, ref int offset, KeystoneRerollEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06001FFD RID: 8189 RVA: 0x000CC644 File Offset: 0x000CA844
		public static void WriteListKeystoneRerollEntry(ref byte[] data, ref int offset, List<KeystoneRerollEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneRerollEntry value in values)
			{
				ArrayManager.WriteKeystoneRerollEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06001FFE RID: 8190 RVA: 0x000CC6C0 File Offset: 0x000CA8C0
		public static KeystoneRerollEntry ReadKeystoneRerollEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneRerollEntry keystoneRerollEntry = new KeystoneRerollEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneRerollEntry.DeserializeMessage(array);
			return keystoneRerollEntry;
		}

		// Token: 0x06001FFF RID: 8191 RVA: 0x000CC704 File Offset: 0x000CA904
		public static List<KeystoneRerollEntry> ReadListKeystoneRerollEntry(byte[] data, ref int offset)
		{
			List<KeystoneRerollEntry> list = new List<KeystoneRerollEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneRerollEntry item = ArrayManager.ReadKeystoneRerollEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002000 RID: 8192 RVA: 0x000CC748 File Offset: 0x000CA948
		public static void WriteSlotPart(ref byte[] data, ref int offset, SlotPart value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002001 RID: 8193 RVA: 0x000CC764 File Offset: 0x000CA964
		public static void WriteListSlotPart(ref byte[] data, ref int offset, List<SlotPart> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SlotPart value in values)
			{
				ArrayManager.WriteSlotPart(ref data, ref offset, value);
			}
		}

		// Token: 0x06002002 RID: 8194 RVA: 0x000CC7E0 File Offset: 0x000CA9E0
		public static SlotPart ReadSlotPart(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SlotPart slotPart = new SlotPart();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			slotPart.DeserializeMessage(array);
			return slotPart;
		}

		// Token: 0x06002003 RID: 8195 RVA: 0x000CC824 File Offset: 0x000CAA24
		public static List<SlotPart> ReadListSlotPart(byte[] data, ref int offset)
		{
			List<SlotPart> list = new List<SlotPart>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SlotPart item = ArrayManager.ReadSlotPart(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002004 RID: 8196 RVA: 0x000CC868 File Offset: 0x000CAA68
		public static void WriteTrapStrength(ref byte[] data, ref int offset, TrapStrength value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002005 RID: 8197 RVA: 0x000CC884 File Offset: 0x000CAA84
		public static void WriteListTrapStrength(ref byte[] data, ref int offset, List<TrapStrength> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TrapStrength value in values)
			{
				ArrayManager.WriteTrapStrength(ref data, ref offset, value);
			}
		}

		// Token: 0x06002006 RID: 8198 RVA: 0x000CC900 File Offset: 0x000CAB00
		public static TrapStrength ReadTrapStrength(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TrapStrength trapStrength = new TrapStrength();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			trapStrength.DeserializeMessage(array);
			return trapStrength;
		}

		// Token: 0x06002007 RID: 8199 RVA: 0x000CC944 File Offset: 0x000CAB44
		public static List<TrapStrength> ReadListTrapStrength(byte[] data, ref int offset)
		{
			List<TrapStrength> list = new List<TrapStrength>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TrapStrength item = ArrayManager.ReadTrapStrength(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002008 RID: 8200 RVA: 0x000CC988 File Offset: 0x000CAB88
		public static void WriteRevokeSteamDLC(ref byte[] data, ref int offset, RevokeSteamDLC value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002009 RID: 8201 RVA: 0x000CC9A4 File Offset: 0x000CABA4
		public static void WriteListRevokeSteamDLC(ref byte[] data, ref int offset, List<RevokeSteamDLC> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RevokeSteamDLC value in values)
			{
				ArrayManager.WriteRevokeSteamDLC(ref data, ref offset, value);
			}
		}

		// Token: 0x0600200A RID: 8202 RVA: 0x000CCA20 File Offset: 0x000CAC20
		public static RevokeSteamDLC ReadRevokeSteamDLC(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RevokeSteamDLC revokeSteamDLC = new RevokeSteamDLC();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			revokeSteamDLC.DeserializeMessage(array);
			return revokeSteamDLC;
		}

		// Token: 0x0600200B RID: 8203 RVA: 0x000CCA64 File Offset: 0x000CAC64
		public static List<RevokeSteamDLC> ReadListRevokeSteamDLC(byte[] data, ref int offset)
		{
			List<RevokeSteamDLC> list = new List<RevokeSteamDLC>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RevokeSteamDLC item = ArrayManager.ReadRevokeSteamDLC(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600200C RID: 8204 RVA: 0x000CCAA8 File Offset: 0x000CACA8
		public static void WriteBonusSkulls(ref byte[] data, ref int offset, BonusSkulls value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600200D RID: 8205 RVA: 0x000CCAC4 File Offset: 0x000CACC4
		public static void WriteListBonusSkulls(ref byte[] data, ref int offset, List<BonusSkulls> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BonusSkulls value in values)
			{
				ArrayManager.WriteBonusSkulls(ref data, ref offset, value);
			}
		}

		// Token: 0x0600200E RID: 8206 RVA: 0x000CCB40 File Offset: 0x000CAD40
		public static BonusSkulls ReadBonusSkulls(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BonusSkulls bonusSkulls = new BonusSkulls();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			bonusSkulls.DeserializeMessage(array);
			return bonusSkulls;
		}

		// Token: 0x0600200F RID: 8207 RVA: 0x000CCB84 File Offset: 0x000CAD84
		public static List<BonusSkulls> ReadListBonusSkulls(byte[] data, ref int offset)
		{
			List<BonusSkulls> list = new List<BonusSkulls>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BonusSkulls item = ArrayManager.ReadBonusSkulls(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002010 RID: 8208 RVA: 0x000CCBC8 File Offset: 0x000CADC8
		public static void WriteChestAward(ref byte[] data, ref int offset, ChestAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002011 RID: 8209 RVA: 0x000CCBE4 File Offset: 0x000CADE4
		public static void WriteListChestAward(ref byte[] data, ref int offset, List<ChestAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ChestAward value in values)
			{
				ArrayManager.WriteChestAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002012 RID: 8210 RVA: 0x000CCC60 File Offset: 0x000CAE60
		public static ChestAward ReadChestAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ChestAward chestAward = new ChestAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			chestAward.DeserializeMessage(array);
			return chestAward;
		}

		// Token: 0x06002013 RID: 8211 RVA: 0x000CCCA4 File Offset: 0x000CAEA4
		public static List<ChestAward> ReadListChestAward(byte[] data, ref int offset)
		{
			List<ChestAward> list = new List<ChestAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ChestAward item = ArrayManager.ReadChestAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002014 RID: 8212 RVA: 0x000CCCE8 File Offset: 0x000CAEE8
		public static void WriteSkullsCredit(ref byte[] data, ref int offset, SkullsCredit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002015 RID: 8213 RVA: 0x000CCD04 File Offset: 0x000CAF04
		public static void WriteListSkullsCredit(ref byte[] data, ref int offset, List<SkullsCredit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SkullsCredit value in values)
			{
				ArrayManager.WriteSkullsCredit(ref data, ref offset, value);
			}
		}

		// Token: 0x06002016 RID: 8214 RVA: 0x000CCD80 File Offset: 0x000CAF80
		public static SkullsCredit ReadSkullsCredit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SkullsCredit skullsCredit = new SkullsCredit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			skullsCredit.DeserializeMessage(array);
			return skullsCredit;
		}

		// Token: 0x06002017 RID: 8215 RVA: 0x000CCDC4 File Offset: 0x000CAFC4
		public static List<SkullsCredit> ReadListSkullsCredit(byte[] data, ref int offset)
		{
			List<SkullsCredit> list = new List<SkullsCredit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SkullsCredit item = ArrayManager.ReadSkullsCredit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002018 RID: 8216 RVA: 0x000CCE08 File Offset: 0x000CB008
		public static void WriteSkullsDebit(ref byte[] data, ref int offset, SkullsDebit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002019 RID: 8217 RVA: 0x000CCE24 File Offset: 0x000CB024
		public static void WriteListSkullsDebit(ref byte[] data, ref int offset, List<SkullsDebit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SkullsDebit value in values)
			{
				ArrayManager.WriteSkullsDebit(ref data, ref offset, value);
			}
		}

		// Token: 0x0600201A RID: 8218 RVA: 0x000CCEA0 File Offset: 0x000CB0A0
		public static SkullsDebit ReadSkullsDebit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SkullsDebit skullsDebit = new SkullsDebit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			skullsDebit.DeserializeMessage(array);
			return skullsDebit;
		}

		// Token: 0x0600201B RID: 8219 RVA: 0x000CCEE4 File Offset: 0x000CB0E4
		public static List<SkullsDebit> ReadListSkullsDebit(byte[] data, ref int offset)
		{
			List<SkullsDebit> list = new List<SkullsDebit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SkullsDebit item = ArrayManager.ReadSkullsDebit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600201C RID: 8220 RVA: 0x000CCF28 File Offset: 0x000CB128
		public static void WriteGibsCredit(ref byte[] data, ref int offset, GibsCredit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600201D RID: 8221 RVA: 0x000CCF44 File Offset: 0x000CB144
		public static void WriteListGibsCredit(ref byte[] data, ref int offset, List<GibsCredit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GibsCredit value in values)
			{
				ArrayManager.WriteGibsCredit(ref data, ref offset, value);
			}
		}

		// Token: 0x0600201E RID: 8222 RVA: 0x000CCFC0 File Offset: 0x000CB1C0
		public static GibsCredit ReadGibsCredit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GibsCredit gibsCredit = new GibsCredit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gibsCredit.DeserializeMessage(array);
			return gibsCredit;
		}

		// Token: 0x0600201F RID: 8223 RVA: 0x000CD004 File Offset: 0x000CB204
		public static List<GibsCredit> ReadListGibsCredit(byte[] data, ref int offset)
		{
			List<GibsCredit> list = new List<GibsCredit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GibsCredit item = ArrayManager.ReadGibsCredit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002020 RID: 8224 RVA: 0x000CD048 File Offset: 0x000CB248
		public static void WriteGibsDebit(ref byte[] data, ref int offset, GibsDebit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002021 RID: 8225 RVA: 0x000CD064 File Offset: 0x000CB264
		public static void WriteListGibsDebit(ref byte[] data, ref int offset, List<GibsDebit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GibsDebit value in values)
			{
				ArrayManager.WriteGibsDebit(ref data, ref offset, value);
			}
		}

		// Token: 0x06002022 RID: 8226 RVA: 0x000CD0E0 File Offset: 0x000CB2E0
		public static GibsDebit ReadGibsDebit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GibsDebit gibsDebit = new GibsDebit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gibsDebit.DeserializeMessage(array);
			return gibsDebit;
		}

		// Token: 0x06002023 RID: 8227 RVA: 0x000CD124 File Offset: 0x000CB324
		public static List<GibsDebit> ReadListGibsDebit(byte[] data, ref int offset)
		{
			List<GibsDebit> list = new List<GibsDebit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GibsDebit item = ArrayManager.ReadGibsDebit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002024 RID: 8228 RVA: 0x000CD168 File Offset: 0x000CB368
		public static void WriteGoldCredit(ref byte[] data, ref int offset, GoldCredit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002025 RID: 8229 RVA: 0x000CD184 File Offset: 0x000CB384
		public static void WriteListGoldCredit(ref byte[] data, ref int offset, List<GoldCredit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GoldCredit value in values)
			{
				ArrayManager.WriteGoldCredit(ref data, ref offset, value);
			}
		}

		// Token: 0x06002026 RID: 8230 RVA: 0x000CD200 File Offset: 0x000CB400
		public static GoldCredit ReadGoldCredit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GoldCredit goldCredit = new GoldCredit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			goldCredit.DeserializeMessage(array);
			return goldCredit;
		}

		// Token: 0x06002027 RID: 8231 RVA: 0x000CD244 File Offset: 0x000CB444
		public static List<GoldCredit> ReadListGoldCredit(byte[] data, ref int offset)
		{
			List<GoldCredit> list = new List<GoldCredit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GoldCredit item = ArrayManager.ReadGoldCredit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002028 RID: 8232 RVA: 0x000CD288 File Offset: 0x000CB488
		public static void WriteGoldDebit(ref byte[] data, ref int offset, GoldDebit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002029 RID: 8233 RVA: 0x000CD2A4 File Offset: 0x000CB4A4
		public static void WriteListGoldDebit(ref byte[] data, ref int offset, List<GoldDebit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GoldDebit value in values)
			{
				ArrayManager.WriteGoldDebit(ref data, ref offset, value);
			}
		}

		// Token: 0x0600202A RID: 8234 RVA: 0x000CD320 File Offset: 0x000CB520
		public static GoldDebit ReadGoldDebit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GoldDebit goldDebit = new GoldDebit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			goldDebit.DeserializeMessage(array);
			return goldDebit;
		}

		// Token: 0x0600202B RID: 8235 RVA: 0x000CD364 File Offset: 0x000CB564
		public static List<GoldDebit> ReadListGoldDebit(byte[] data, ref int offset)
		{
			List<GoldDebit> list = new List<GoldDebit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GoldDebit item = ArrayManager.ReadGoldDebit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600202C RID: 8236 RVA: 0x000CD3A8 File Offset: 0x000CB5A8
		public static void WriteBaseXP(ref byte[] data, ref int offset, BaseXP value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600202D RID: 8237 RVA: 0x000CD3C4 File Offset: 0x000CB5C4
		public static void WriteListBaseXP(ref byte[] data, ref int offset, List<BaseXP> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BaseXP value in values)
			{
				ArrayManager.WriteBaseXP(ref data, ref offset, value);
			}
		}

		// Token: 0x0600202E RID: 8238 RVA: 0x000CD440 File Offset: 0x000CB640
		public static BaseXP ReadBaseXP(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BaseXP baseXP = new BaseXP();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			baseXP.DeserializeMessage(array);
			return baseXP;
		}

		// Token: 0x0600202F RID: 8239 RVA: 0x000CD484 File Offset: 0x000CB684
		public static List<BaseXP> ReadListBaseXP(byte[] data, ref int offset)
		{
			List<BaseXP> list = new List<BaseXP>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BaseXP item = ArrayManager.ReadBaseXP(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002030 RID: 8240 RVA: 0x000CD4C8 File Offset: 0x000CB6C8
		public static void WriteBonusXP(ref byte[] data, ref int offset, BonusXP value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002031 RID: 8241 RVA: 0x000CD4E4 File Offset: 0x000CB6E4
		public static void WriteListBonusXP(ref byte[] data, ref int offset, List<BonusXP> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BonusXP value in values)
			{
				ArrayManager.WriteBonusXP(ref data, ref offset, value);
			}
		}

		// Token: 0x06002032 RID: 8242 RVA: 0x000CD560 File Offset: 0x000CB760
		public static BonusXP ReadBonusXP(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BonusXP bonusXP = new BonusXP();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			bonusXP.DeserializeMessage(array);
			return bonusXP;
		}

		// Token: 0x06002033 RID: 8243 RVA: 0x000CD5A4 File Offset: 0x000CB7A4
		public static List<BonusXP> ReadListBonusXP(byte[] data, ref int offset)
		{
			List<BonusXP> list = new List<BonusXP>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BonusXP item = ArrayManager.ReadBonusXP(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002034 RID: 8244 RVA: 0x000CD5E8 File Offset: 0x000CB7E8
		public static void WriteCommunityEventXPBoostAward(ref byte[] data, ref int offset, CommunityEventXPBoostAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002035 RID: 8245 RVA: 0x000CD604 File Offset: 0x000CB804
		public static void WriteListCommunityEventXPBoostAward(ref byte[] data, ref int offset, List<CommunityEventXPBoostAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventXPBoostAward value in values)
			{
				ArrayManager.WriteCommunityEventXPBoostAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002036 RID: 8246 RVA: 0x000CD680 File Offset: 0x000CB880
		public static CommunityEventXPBoostAward ReadCommunityEventXPBoostAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventXPBoostAward communityEventXPBoostAward = new CommunityEventXPBoostAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventXPBoostAward.DeserializeMessage(array);
			return communityEventXPBoostAward;
		}

		// Token: 0x06002037 RID: 8247 RVA: 0x000CD6C4 File Offset: 0x000CB8C4
		public static List<CommunityEventXPBoostAward> ReadListCommunityEventXPBoostAward(byte[] data, ref int offset)
		{
			List<CommunityEventXPBoostAward> list = new List<CommunityEventXPBoostAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventXPBoostAward item = ArrayManager.ReadCommunityEventXPBoostAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002038 RID: 8248 RVA: 0x000CD708 File Offset: 0x000CB908
		public static void WriteOwnedHeroBonusXPAward(ref byte[] data, ref int offset, OwnedHeroBonusXPAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002039 RID: 8249 RVA: 0x000CD724 File Offset: 0x000CB924
		public static void WriteListOwnedHeroBonusXPAward(ref byte[] data, ref int offset, List<OwnedHeroBonusXPAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (OwnedHeroBonusXPAward value in values)
			{
				ArrayManager.WriteOwnedHeroBonusXPAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600203A RID: 8250 RVA: 0x000CD7A0 File Offset: 0x000CB9A0
		public static OwnedHeroBonusXPAward ReadOwnedHeroBonusXPAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			OwnedHeroBonusXPAward ownedHeroBonusXPAward = new OwnedHeroBonusXPAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			ownedHeroBonusXPAward.DeserializeMessage(array);
			return ownedHeroBonusXPAward;
		}

		// Token: 0x0600203B RID: 8251 RVA: 0x000CD7E4 File Offset: 0x000CB9E4
		public static List<OwnedHeroBonusXPAward> ReadListOwnedHeroBonusXPAward(byte[] data, ref int offset)
		{
			List<OwnedHeroBonusXPAward> list = new List<OwnedHeroBonusXPAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				OwnedHeroBonusXPAward item = ArrayManager.ReadOwnedHeroBonusXPAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600203C RID: 8252 RVA: 0x000CD828 File Offset: 0x000CBA28
		public static void WriteGuildPlayBonusXP(ref byte[] data, ref int offset, GuildPlayBonusXP value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600203D RID: 8253 RVA: 0x000CD844 File Offset: 0x000CBA44
		public static void WriteListGuildPlayBonusXP(ref byte[] data, ref int offset, List<GuildPlayBonusXP> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildPlayBonusXP value in values)
			{
				ArrayManager.WriteGuildPlayBonusXP(ref data, ref offset, value);
			}
		}

		// Token: 0x0600203E RID: 8254 RVA: 0x000CD8C0 File Offset: 0x000CBAC0
		public static GuildPlayBonusXP ReadGuildPlayBonusXP(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildPlayBonusXP guildPlayBonusXP = new GuildPlayBonusXP();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildPlayBonusXP.DeserializeMessage(array);
			return guildPlayBonusXP;
		}

		// Token: 0x0600203F RID: 8255 RVA: 0x000CD904 File Offset: 0x000CBB04
		public static List<GuildPlayBonusXP> ReadListGuildPlayBonusXP(byte[] data, ref int offset)
		{
			List<GuildPlayBonusXP> list = new List<GuildPlayBonusXP>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildPlayBonusXP item = ArrayManager.ReadGuildPlayBonusXP(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002040 RID: 8256 RVA: 0x000CD948 File Offset: 0x000CBB48
		public static void WriteMatchmakingBonusXP(ref byte[] data, ref int offset, MatchmakingBonusXP value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002041 RID: 8257 RVA: 0x000CD964 File Offset: 0x000CBB64
		public static void WriteListMatchmakingBonusXP(ref byte[] data, ref int offset, List<MatchmakingBonusXP> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MatchmakingBonusXP value in values)
			{
				ArrayManager.WriteMatchmakingBonusXP(ref data, ref offset, value);
			}
		}

		// Token: 0x06002042 RID: 8258 RVA: 0x000CD9E0 File Offset: 0x000CBBE0
		public static MatchmakingBonusXP ReadMatchmakingBonusXP(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MatchmakingBonusXP matchmakingBonusXP = new MatchmakingBonusXP();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			matchmakingBonusXP.DeserializeMessage(array);
			return matchmakingBonusXP;
		}

		// Token: 0x06002043 RID: 8259 RVA: 0x000CDA24 File Offset: 0x000CBC24
		public static List<MatchmakingBonusXP> ReadListMatchmakingBonusXP(byte[] data, ref int offset)
		{
			List<MatchmakingBonusXP> list = new List<MatchmakingBonusXP>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MatchmakingBonusXP item = ArrayManager.ReadMatchmakingBonusXP(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002044 RID: 8260 RVA: 0x000CDA68 File Offset: 0x000CBC68
		public static void WriteFinishingGameEarlyXP(ref byte[] data, ref int offset, FinishingGameEarlyXP value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002045 RID: 8261 RVA: 0x000CDA84 File Offset: 0x000CBC84
		public static void WriteListFinishingGameEarlyXP(ref byte[] data, ref int offset, List<FinishingGameEarlyXP> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FinishingGameEarlyXP value in values)
			{
				ArrayManager.WriteFinishingGameEarlyXP(ref data, ref offset, value);
			}
		}

		// Token: 0x06002046 RID: 8262 RVA: 0x000CDB00 File Offset: 0x000CBD00
		public static FinishingGameEarlyXP ReadFinishingGameEarlyXP(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FinishingGameEarlyXP finishingGameEarlyXP = new FinishingGameEarlyXP();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			finishingGameEarlyXP.DeserializeMessage(array);
			return finishingGameEarlyXP;
		}

		// Token: 0x06002047 RID: 8263 RVA: 0x000CDB44 File Offset: 0x000CBD44
		public static List<FinishingGameEarlyXP> ReadListFinishingGameEarlyXP(byte[] data, ref int offset)
		{
			List<FinishingGameEarlyXP> list = new List<FinishingGameEarlyXP>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FinishingGameEarlyXP item = ArrayManager.ReadFinishingGameEarlyXP(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002048 RID: 8264 RVA: 0x000CDB88 File Offset: 0x000CBD88
		public static void WriteWinningXP(ref byte[] data, ref int offset, WinningXP value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002049 RID: 8265 RVA: 0x000CDBA4 File Offset: 0x000CBDA4
		public static void WriteListWinningXP(ref byte[] data, ref int offset, List<WinningXP> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (WinningXP value in values)
			{
				ArrayManager.WriteWinningXP(ref data, ref offset, value);
			}
		}

		// Token: 0x0600204A RID: 8266 RVA: 0x000CDC20 File Offset: 0x000CBE20
		public static WinningXP ReadWinningXP(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			WinningXP winningXP = new WinningXP();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			winningXP.DeserializeMessage(array);
			return winningXP;
		}

		// Token: 0x0600204B RID: 8267 RVA: 0x000CDC64 File Offset: 0x000CBE64
		public static List<WinningXP> ReadListWinningXP(byte[] data, ref int offset)
		{
			List<WinningXP> list = new List<WinningXP>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				WinningXP item = ArrayManager.ReadWinningXP(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600204C RID: 8268 RVA: 0x000CDCA8 File Offset: 0x000CBEA8
		public static void WriteGettingToMaxTimeXP(ref byte[] data, ref int offset, GettingToMaxTimeXP value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600204D RID: 8269 RVA: 0x000CDCC4 File Offset: 0x000CBEC4
		public static void WriteListGettingToMaxTimeXP(ref byte[] data, ref int offset, List<GettingToMaxTimeXP> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GettingToMaxTimeXP value in values)
			{
				ArrayManager.WriteGettingToMaxTimeXP(ref data, ref offset, value);
			}
		}

		// Token: 0x0600204E RID: 8270 RVA: 0x000CDD40 File Offset: 0x000CBF40
		public static GettingToMaxTimeXP ReadGettingToMaxTimeXP(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GettingToMaxTimeXP gettingToMaxTimeXP = new GettingToMaxTimeXP();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gettingToMaxTimeXP.DeserializeMessage(array);
			return gettingToMaxTimeXP;
		}

		// Token: 0x0600204F RID: 8271 RVA: 0x000CDD84 File Offset: 0x000CBF84
		public static List<GettingToMaxTimeXP> ReadListGettingToMaxTimeXP(byte[] data, ref int offset)
		{
			List<GettingToMaxTimeXP> list = new List<GettingToMaxTimeXP>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GettingToMaxTimeXP item = ArrayManager.ReadGettingToMaxTimeXP(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002050 RID: 8272 RVA: 0x000CDDC8 File Offset: 0x000CBFC8
		public static void WriteItemAward(ref byte[] data, ref int offset, ItemAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002051 RID: 8273 RVA: 0x000CDDE4 File Offset: 0x000CBFE4
		public static void WriteListItemAward(ref byte[] data, ref int offset, List<ItemAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ItemAward value in values)
			{
				ArrayManager.WriteItemAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002052 RID: 8274 RVA: 0x000CDE60 File Offset: 0x000CC060
		public static ItemAward ReadItemAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ItemAward itemAward = new ItemAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			itemAward.DeserializeMessage(array);
			return itemAward;
		}

		// Token: 0x06002053 RID: 8275 RVA: 0x000CDEA4 File Offset: 0x000CC0A4
		public static List<ItemAward> ReadListItemAward(byte[] data, ref int offset)
		{
			List<ItemAward> list = new List<ItemAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ItemAward item = ArrayManager.ReadItemAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002054 RID: 8276 RVA: 0x000CDEE8 File Offset: 0x000CC0E8
		public static void WriteItemDebit(ref byte[] data, ref int offset, ItemDebit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002055 RID: 8277 RVA: 0x000CDF04 File Offset: 0x000CC104
		public static void WriteListItemDebit(ref byte[] data, ref int offset, List<ItemDebit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ItemDebit value in values)
			{
				ArrayManager.WriteItemDebit(ref data, ref offset, value);
			}
		}

		// Token: 0x06002056 RID: 8278 RVA: 0x000CDF80 File Offset: 0x000CC180
		public static ItemDebit ReadItemDebit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ItemDebit itemDebit = new ItemDebit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			itemDebit.DeserializeMessage(array);
			return itemDebit;
		}

		// Token: 0x06002057 RID: 8279 RVA: 0x000CDFC4 File Offset: 0x000CC1C4
		public static List<ItemDebit> ReadListItemDebit(byte[] data, ref int offset)
		{
			List<ItemDebit> list = new List<ItemDebit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ItemDebit item = ArrayManager.ReadItemDebit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002058 RID: 8280 RVA: 0x000CE008 File Offset: 0x000CC208
		public static void WriteItemDelete(ref byte[] data, ref int offset, ItemDelete value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002059 RID: 8281 RVA: 0x000CE024 File Offset: 0x000CC224
		public static void WriteListItemDelete(ref byte[] data, ref int offset, List<ItemDelete> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ItemDelete value in values)
			{
				ArrayManager.WriteItemDelete(ref data, ref offset, value);
			}
		}

		// Token: 0x0600205A RID: 8282 RVA: 0x000CE0A0 File Offset: 0x000CC2A0
		public static ItemDelete ReadItemDelete(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ItemDelete itemDelete = new ItemDelete();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			itemDelete.DeserializeMessage(array);
			return itemDelete;
		}

		// Token: 0x0600205B RID: 8283 RVA: 0x000CE0E4 File Offset: 0x000CC2E4
		public static List<ItemDelete> ReadListItemDelete(byte[] data, ref int offset)
		{
			List<ItemDelete> list = new List<ItemDelete>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ItemDelete item = ArrayManager.ReadItemDelete(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600205C RID: 8284 RVA: 0x000CE128 File Offset: 0x000CC328
		public static void WriteAttributeAvatarKey(ref byte[] data, ref int offset, AttributeAvatarKey value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600205D RID: 8285 RVA: 0x000CE144 File Offset: 0x000CC344
		public static void WriteListAttributeAvatarKey(ref byte[] data, ref int offset, List<AttributeAvatarKey> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AttributeAvatarKey value in values)
			{
				ArrayManager.WriteAttributeAvatarKey(ref data, ref offset, value);
			}
		}

		// Token: 0x0600205E RID: 8286 RVA: 0x000CE1C0 File Offset: 0x000CC3C0
		public static AttributeAvatarKey ReadAttributeAvatarKey(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AttributeAvatarKey attributeAvatarKey = new AttributeAvatarKey();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			attributeAvatarKey.DeserializeMessage(array);
			return attributeAvatarKey;
		}

		// Token: 0x0600205F RID: 8287 RVA: 0x000CE204 File Offset: 0x000CC404
		public static List<AttributeAvatarKey> ReadListAttributeAvatarKey(byte[] data, ref int offset)
		{
			List<AttributeAvatarKey> list = new List<AttributeAvatarKey>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AttributeAvatarKey item = ArrayManager.ReadAttributeAvatarKey(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002060 RID: 8288 RVA: 0x000CE248 File Offset: 0x000CC448
		public static void WriteAttributeIsRobotEmployee(ref byte[] data, ref int offset, AttributeIsRobotEmployee value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002061 RID: 8289 RVA: 0x000CE264 File Offset: 0x000CC464
		public static void WriteListAttributeIsRobotEmployee(ref byte[] data, ref int offset, List<AttributeIsRobotEmployee> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AttributeIsRobotEmployee value in values)
			{
				ArrayManager.WriteAttributeIsRobotEmployee(ref data, ref offset, value);
			}
		}

		// Token: 0x06002062 RID: 8290 RVA: 0x000CE2E0 File Offset: 0x000CC4E0
		public static AttributeIsRobotEmployee ReadAttributeIsRobotEmployee(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AttributeIsRobotEmployee attributeIsRobotEmployee = new AttributeIsRobotEmployee();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			attributeIsRobotEmployee.DeserializeMessage(array);
			return attributeIsRobotEmployee;
		}

		// Token: 0x06002063 RID: 8291 RVA: 0x000CE324 File Offset: 0x000CC524
		public static List<AttributeIsRobotEmployee> ReadListAttributeIsRobotEmployee(byte[] data, ref int offset)
		{
			List<AttributeIsRobotEmployee> list = new List<AttributeIsRobotEmployee>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AttributeIsRobotEmployee item = ArrayManager.ReadAttributeIsRobotEmployee(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002064 RID: 8292 RVA: 0x000CE368 File Offset: 0x000CC568
		public static void WriteAttributeHasBetaAccess(ref byte[] data, ref int offset, AttributeHasBetaAccess value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002065 RID: 8293 RVA: 0x000CE384 File Offset: 0x000CC584
		public static void WriteListAttributeHasBetaAccess(ref byte[] data, ref int offset, List<AttributeHasBetaAccess> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AttributeHasBetaAccess value in values)
			{
				ArrayManager.WriteAttributeHasBetaAccess(ref data, ref offset, value);
			}
		}

		// Token: 0x06002066 RID: 8294 RVA: 0x000CE400 File Offset: 0x000CC600
		public static AttributeHasBetaAccess ReadAttributeHasBetaAccess(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AttributeHasBetaAccess attributeHasBetaAccess = new AttributeHasBetaAccess();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			attributeHasBetaAccess.DeserializeMessage(array);
			return attributeHasBetaAccess;
		}

		// Token: 0x06002067 RID: 8295 RVA: 0x000CE444 File Offset: 0x000CC644
		public static List<AttributeHasBetaAccess> ReadListAttributeHasBetaAccess(byte[] data, ref int offset)
		{
			List<AttributeHasBetaAccess> list = new List<AttributeHasBetaAccess>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AttributeHasBetaAccess item = ArrayManager.ReadAttributeHasBetaAccess(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002068 RID: 8296 RVA: 0x000CE488 File Offset: 0x000CC688
		public static void WriteAttributeFoundersLevelApprentice(ref byte[] data, ref int offset, AttributeFoundersLevelApprentice value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002069 RID: 8297 RVA: 0x000CE4A4 File Offset: 0x000CC6A4
		public static void WriteListAttributeFoundersLevelApprentice(ref byte[] data, ref int offset, List<AttributeFoundersLevelApprentice> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AttributeFoundersLevelApprentice value in values)
			{
				ArrayManager.WriteAttributeFoundersLevelApprentice(ref data, ref offset, value);
			}
		}

		// Token: 0x0600206A RID: 8298 RVA: 0x000CE520 File Offset: 0x000CC720
		public static AttributeFoundersLevelApprentice ReadAttributeFoundersLevelApprentice(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AttributeFoundersLevelApprentice attributeFoundersLevelApprentice = new AttributeFoundersLevelApprentice();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			attributeFoundersLevelApprentice.DeserializeMessage(array);
			return attributeFoundersLevelApprentice;
		}

		// Token: 0x0600206B RID: 8299 RVA: 0x000CE564 File Offset: 0x000CC764
		public static List<AttributeFoundersLevelApprentice> ReadListAttributeFoundersLevelApprentice(byte[] data, ref int offset)
		{
			List<AttributeFoundersLevelApprentice> list = new List<AttributeFoundersLevelApprentice>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AttributeFoundersLevelApprentice item = ArrayManager.ReadAttributeFoundersLevelApprentice(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600206C RID: 8300 RVA: 0x000CE5A8 File Offset: 0x000CC7A8
		public static void WriteAttributeFoundersLevelWarMage(ref byte[] data, ref int offset, AttributeFoundersLevelWarMage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600206D RID: 8301 RVA: 0x000CE5C4 File Offset: 0x000CC7C4
		public static void WriteListAttributeFoundersLevelWarMage(ref byte[] data, ref int offset, List<AttributeFoundersLevelWarMage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AttributeFoundersLevelWarMage value in values)
			{
				ArrayManager.WriteAttributeFoundersLevelWarMage(ref data, ref offset, value);
			}
		}

		// Token: 0x0600206E RID: 8302 RVA: 0x000CE640 File Offset: 0x000CC840
		public static AttributeFoundersLevelWarMage ReadAttributeFoundersLevelWarMage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AttributeFoundersLevelWarMage attributeFoundersLevelWarMage = new AttributeFoundersLevelWarMage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			attributeFoundersLevelWarMage.DeserializeMessage(array);
			return attributeFoundersLevelWarMage;
		}

		// Token: 0x0600206F RID: 8303 RVA: 0x000CE684 File Offset: 0x000CC884
		public static List<AttributeFoundersLevelWarMage> ReadListAttributeFoundersLevelWarMage(byte[] data, ref int offset)
		{
			List<AttributeFoundersLevelWarMage> list = new List<AttributeFoundersLevelWarMage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AttributeFoundersLevelWarMage item = ArrayManager.ReadAttributeFoundersLevelWarMage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002070 RID: 8304 RVA: 0x000CE6C8 File Offset: 0x000CC8C8
		public static void WriteAttributeFoundersLevelMaster(ref byte[] data, ref int offset, AttributeFoundersLevelMaster value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002071 RID: 8305 RVA: 0x000CE6E4 File Offset: 0x000CC8E4
		public static void WriteListAttributeFoundersLevelMaster(ref byte[] data, ref int offset, List<AttributeFoundersLevelMaster> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AttributeFoundersLevelMaster value in values)
			{
				ArrayManager.WriteAttributeFoundersLevelMaster(ref data, ref offset, value);
			}
		}

		// Token: 0x06002072 RID: 8306 RVA: 0x000CE760 File Offset: 0x000CC960
		public static AttributeFoundersLevelMaster ReadAttributeFoundersLevelMaster(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AttributeFoundersLevelMaster attributeFoundersLevelMaster = new AttributeFoundersLevelMaster();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			attributeFoundersLevelMaster.DeserializeMessage(array);
			return attributeFoundersLevelMaster;
		}

		// Token: 0x06002073 RID: 8307 RVA: 0x000CE7A4 File Offset: 0x000CC9A4
		public static List<AttributeFoundersLevelMaster> ReadListAttributeFoundersLevelMaster(byte[] data, ref int offset)
		{
			List<AttributeFoundersLevelMaster> list = new List<AttributeFoundersLevelMaster>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AttributeFoundersLevelMaster item = ArrayManager.ReadAttributeFoundersLevelMaster(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002074 RID: 8308 RVA: 0x000CE7E8 File Offset: 0x000CC9E8
		public static void WritePlayerBoostAwardEntry(ref byte[] data, ref int offset, PlayerBoostAwardEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002075 RID: 8309 RVA: 0x000CE804 File Offset: 0x000CCA04
		public static void WriteListPlayerBoostAwardEntry(ref byte[] data, ref int offset, List<PlayerBoostAwardEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerBoostAwardEntry value in values)
			{
				ArrayManager.WritePlayerBoostAwardEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06002076 RID: 8310 RVA: 0x000CE880 File Offset: 0x000CCA80
		public static PlayerBoostAwardEntry ReadPlayerBoostAwardEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerBoostAwardEntry playerBoostAwardEntry = new PlayerBoostAwardEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerBoostAwardEntry.DeserializeMessage(array);
			return playerBoostAwardEntry;
		}

		// Token: 0x06002077 RID: 8311 RVA: 0x000CE8C4 File Offset: 0x000CCAC4
		public static List<PlayerBoostAwardEntry> ReadListPlayerBoostAwardEntry(byte[] data, ref int offset)
		{
			List<PlayerBoostAwardEntry> list = new List<PlayerBoostAwardEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerBoostAwardEntry item = ArrayManager.ReadPlayerBoostAwardEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002078 RID: 8312 RVA: 0x000CE908 File Offset: 0x000CCB08
		public static void WritePlayerBoostBonusXPEntry(ref byte[] data, ref int offset, PlayerBoostBonusXPEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002079 RID: 8313 RVA: 0x000CE924 File Offset: 0x000CCB24
		public static void WriteListPlayerBoostBonusXPEntry(ref byte[] data, ref int offset, List<PlayerBoostBonusXPEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerBoostBonusXPEntry value in values)
			{
				ArrayManager.WritePlayerBoostBonusXPEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600207A RID: 8314 RVA: 0x000CE9A0 File Offset: 0x000CCBA0
		public static PlayerBoostBonusXPEntry ReadPlayerBoostBonusXPEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerBoostBonusXPEntry playerBoostBonusXPEntry = new PlayerBoostBonusXPEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerBoostBonusXPEntry.DeserializeMessage(array);
			return playerBoostBonusXPEntry;
		}

		// Token: 0x0600207B RID: 8315 RVA: 0x000CE9E4 File Offset: 0x000CCBE4
		public static List<PlayerBoostBonusXPEntry> ReadListPlayerBoostBonusXPEntry(byte[] data, ref int offset)
		{
			List<PlayerBoostBonusXPEntry> list = new List<PlayerBoostBonusXPEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerBoostBonusXPEntry item = ArrayManager.ReadPlayerBoostBonusXPEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600207C RID: 8316 RVA: 0x000CEA28 File Offset: 0x000CCC28
		public static void WriteTeamMemberBoostBonusXPEntry(ref byte[] data, ref int offset, TeamMemberBoostBonusXPEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600207D RID: 8317 RVA: 0x000CEA44 File Offset: 0x000CCC44
		public static void WriteListTeamMemberBoostBonusXPEntry(ref byte[] data, ref int offset, List<TeamMemberBoostBonusXPEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TeamMemberBoostBonusXPEntry value in values)
			{
				ArrayManager.WriteTeamMemberBoostBonusXPEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600207E RID: 8318 RVA: 0x000CEAC0 File Offset: 0x000CCCC0
		public static TeamMemberBoostBonusXPEntry ReadTeamMemberBoostBonusXPEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TeamMemberBoostBonusXPEntry teamMemberBoostBonusXPEntry = new TeamMemberBoostBonusXPEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			teamMemberBoostBonusXPEntry.DeserializeMessage(array);
			return teamMemberBoostBonusXPEntry;
		}

		// Token: 0x0600207F RID: 8319 RVA: 0x000CEB04 File Offset: 0x000CCD04
		public static List<TeamMemberBoostBonusXPEntry> ReadListTeamMemberBoostBonusXPEntry(byte[] data, ref int offset)
		{
			List<TeamMemberBoostBonusXPEntry> list = new List<TeamMemberBoostBonusXPEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TeamMemberBoostBonusXPEntry item = ArrayManager.ReadTeamMemberBoostBonusXPEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002080 RID: 8320 RVA: 0x000CEB48 File Offset: 0x000CCD48
		public static void WritePlayerBoostBonusSkullsEntry(ref byte[] data, ref int offset, PlayerBoostBonusSkullsEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002081 RID: 8321 RVA: 0x000CEB64 File Offset: 0x000CCD64
		public static void WriteListPlayerBoostBonusSkullsEntry(ref byte[] data, ref int offset, List<PlayerBoostBonusSkullsEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerBoostBonusSkullsEntry value in values)
			{
				ArrayManager.WritePlayerBoostBonusSkullsEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06002082 RID: 8322 RVA: 0x000CEBE0 File Offset: 0x000CCDE0
		public static PlayerBoostBonusSkullsEntry ReadPlayerBoostBonusSkullsEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerBoostBonusSkullsEntry playerBoostBonusSkullsEntry = new PlayerBoostBonusSkullsEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerBoostBonusSkullsEntry.DeserializeMessage(array);
			return playerBoostBonusSkullsEntry;
		}

		// Token: 0x06002083 RID: 8323 RVA: 0x000CEC24 File Offset: 0x000CCE24
		public static List<PlayerBoostBonusSkullsEntry> ReadListPlayerBoostBonusSkullsEntry(byte[] data, ref int offset)
		{
			List<PlayerBoostBonusSkullsEntry> list = new List<PlayerBoostBonusSkullsEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerBoostBonusSkullsEntry item = ArrayManager.ReadPlayerBoostBonusSkullsEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002084 RID: 8324 RVA: 0x000CEC68 File Offset: 0x000CCE68
		public static void WriteTeamMemberBoostBonusSkullsEntry(ref byte[] data, ref int offset, TeamMemberBoostBonusSkullsEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002085 RID: 8325 RVA: 0x000CEC84 File Offset: 0x000CCE84
		public static void WriteListTeamMemberBoostBonusSkullsEntry(ref byte[] data, ref int offset, List<TeamMemberBoostBonusSkullsEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TeamMemberBoostBonusSkullsEntry value in values)
			{
				ArrayManager.WriteTeamMemberBoostBonusSkullsEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06002086 RID: 8326 RVA: 0x000CED00 File Offset: 0x000CCF00
		public static TeamMemberBoostBonusSkullsEntry ReadTeamMemberBoostBonusSkullsEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TeamMemberBoostBonusSkullsEntry teamMemberBoostBonusSkullsEntry = new TeamMemberBoostBonusSkullsEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			teamMemberBoostBonusSkullsEntry.DeserializeMessage(array);
			return teamMemberBoostBonusSkullsEntry;
		}

		// Token: 0x06002087 RID: 8327 RVA: 0x000CED44 File Offset: 0x000CCF44
		public static List<TeamMemberBoostBonusSkullsEntry> ReadListTeamMemberBoostBonusSkullsEntry(byte[] data, ref int offset)
		{
			List<TeamMemberBoostBonusSkullsEntry> list = new List<TeamMemberBoostBonusSkullsEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TeamMemberBoostBonusSkullsEntry item = ArrayManager.ReadTeamMemberBoostBonusSkullsEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002088 RID: 8328 RVA: 0x000CED88 File Offset: 0x000CCF88
		public static void WriteStoreOfferPurchaseGold(ref byte[] data, ref int offset, StoreOfferPurchaseGold value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002089 RID: 8329 RVA: 0x000CEDA4 File Offset: 0x000CCFA4
		public static void WriteListStoreOfferPurchaseGold(ref byte[] data, ref int offset, List<StoreOfferPurchaseGold> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreOfferPurchaseGold value in values)
			{
				ArrayManager.WriteStoreOfferPurchaseGold(ref data, ref offset, value);
			}
		}

		// Token: 0x0600208A RID: 8330 RVA: 0x000CEE20 File Offset: 0x000CD020
		public static StoreOfferPurchaseGold ReadStoreOfferPurchaseGold(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreOfferPurchaseGold storeOfferPurchaseGold = new StoreOfferPurchaseGold();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeOfferPurchaseGold.DeserializeMessage(array);
			return storeOfferPurchaseGold;
		}

		// Token: 0x0600208B RID: 8331 RVA: 0x000CEE64 File Offset: 0x000CD064
		public static List<StoreOfferPurchaseGold> ReadListStoreOfferPurchaseGold(byte[] data, ref int offset)
		{
			List<StoreOfferPurchaseGold> list = new List<StoreOfferPurchaseGold>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreOfferPurchaseGold item = ArrayManager.ReadStoreOfferPurchaseGold(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600208C RID: 8332 RVA: 0x000CEEA8 File Offset: 0x000CD0A8
		public static void WriteGameCodeRedemptionEntry(ref byte[] data, ref int offset, GameCodeRedemptionEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600208D RID: 8333 RVA: 0x000CEEC4 File Offset: 0x000CD0C4
		public static void WriteListGameCodeRedemptionEntry(ref byte[] data, ref int offset, List<GameCodeRedemptionEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GameCodeRedemptionEntry value in values)
			{
				ArrayManager.WriteGameCodeRedemptionEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600208E RID: 8334 RVA: 0x000CEF40 File Offset: 0x000CD140
		public static GameCodeRedemptionEntry ReadGameCodeRedemptionEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GameCodeRedemptionEntry gameCodeRedemptionEntry = new GameCodeRedemptionEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gameCodeRedemptionEntry.DeserializeMessage(array);
			return gameCodeRedemptionEntry;
		}

		// Token: 0x0600208F RID: 8335 RVA: 0x000CEF84 File Offset: 0x000CD184
		public static List<GameCodeRedemptionEntry> ReadListGameCodeRedemptionEntry(byte[] data, ref int offset)
		{
			List<GameCodeRedemptionEntry> list = new List<GameCodeRedemptionEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GameCodeRedemptionEntry item = ArrayManager.ReadGameCodeRedemptionEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002090 RID: 8336 RVA: 0x000CEFC8 File Offset: 0x000CD1C8
		public static void WriteStoreOfferPurchaseSkulls(ref byte[] data, ref int offset, StoreOfferPurchaseSkulls value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002091 RID: 8337 RVA: 0x000CEFE4 File Offset: 0x000CD1E4
		public static void WriteListStoreOfferPurchaseSkulls(ref byte[] data, ref int offset, List<StoreOfferPurchaseSkulls> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreOfferPurchaseSkulls value in values)
			{
				ArrayManager.WriteStoreOfferPurchaseSkulls(ref data, ref offset, value);
			}
		}

		// Token: 0x06002092 RID: 8338 RVA: 0x000CF060 File Offset: 0x000CD260
		public static StoreOfferPurchaseSkulls ReadStoreOfferPurchaseSkulls(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreOfferPurchaseSkulls storeOfferPurchaseSkulls = new StoreOfferPurchaseSkulls();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeOfferPurchaseSkulls.DeserializeMessage(array);
			return storeOfferPurchaseSkulls;
		}

		// Token: 0x06002093 RID: 8339 RVA: 0x000CF0A4 File Offset: 0x000CD2A4
		public static List<StoreOfferPurchaseSkulls> ReadListStoreOfferPurchaseSkulls(byte[] data, ref int offset)
		{
			List<StoreOfferPurchaseSkulls> list = new List<StoreOfferPurchaseSkulls>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreOfferPurchaseSkulls item = ArrayManager.ReadStoreOfferPurchaseSkulls(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002094 RID: 8340 RVA: 0x000CF0E8 File Offset: 0x000CD2E8
		public static void WriteStoreOfferPurchaseItem(ref byte[] data, ref int offset, StoreOfferPurchaseItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002095 RID: 8341 RVA: 0x000CF104 File Offset: 0x000CD304
		public static void WriteListStoreOfferPurchaseItem(ref byte[] data, ref int offset, List<StoreOfferPurchaseItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreOfferPurchaseItem value in values)
			{
				ArrayManager.WriteStoreOfferPurchaseItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002096 RID: 8342 RVA: 0x000CF180 File Offset: 0x000CD380
		public static StoreOfferPurchaseItem ReadStoreOfferPurchaseItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreOfferPurchaseItem storeOfferPurchaseItem = new StoreOfferPurchaseItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeOfferPurchaseItem.DeserializeMessage(array);
			return storeOfferPurchaseItem;
		}

		// Token: 0x06002097 RID: 8343 RVA: 0x000CF1C4 File Offset: 0x000CD3C4
		public static List<StoreOfferPurchaseItem> ReadListStoreOfferPurchaseItem(byte[] data, ref int offset)
		{
			List<StoreOfferPurchaseItem> list = new List<StoreOfferPurchaseItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreOfferPurchaseItem item = ArrayManager.ReadStoreOfferPurchaseItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002098 RID: 8344 RVA: 0x000CF208 File Offset: 0x000CD408
		public static void WriteGuildPointsCredit(ref byte[] data, ref int offset, GuildPointsCredit value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002099 RID: 8345 RVA: 0x000CF224 File Offset: 0x000CD424
		public static void WriteListGuildPointsCredit(ref byte[] data, ref int offset, List<GuildPointsCredit> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildPointsCredit value in values)
			{
				ArrayManager.WriteGuildPointsCredit(ref data, ref offset, value);
			}
		}

		// Token: 0x0600209A RID: 8346 RVA: 0x000CF2A0 File Offset: 0x000CD4A0
		public static GuildPointsCredit ReadGuildPointsCredit(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildPointsCredit guildPointsCredit = new GuildPointsCredit();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildPointsCredit.DeserializeMessage(array);
			return guildPointsCredit;
		}

		// Token: 0x0600209B RID: 8347 RVA: 0x000CF2E4 File Offset: 0x000CD4E4
		public static List<GuildPointsCredit> ReadListGuildPointsCredit(byte[] data, ref int offset)
		{
			List<GuildPointsCredit> list = new List<GuildPointsCredit>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildPointsCredit item = ArrayManager.ReadGuildPointsCredit(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600209C RID: 8348 RVA: 0x000CF328 File Offset: 0x000CD528
		public static void WriteBucketUnlockAwardEntry(ref byte[] data, ref int offset, BucketUnlockAwardEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600209D RID: 8349 RVA: 0x000CF344 File Offset: 0x000CD544
		public static void WriteListBucketUnlockAwardEntry(ref byte[] data, ref int offset, List<BucketUnlockAwardEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BucketUnlockAwardEntry value in values)
			{
				ArrayManager.WriteBucketUnlockAwardEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600209E RID: 8350 RVA: 0x000CF3C0 File Offset: 0x000CD5C0
		public static BucketUnlockAwardEntry ReadBucketUnlockAwardEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BucketUnlockAwardEntry bucketUnlockAwardEntry = new BucketUnlockAwardEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			bucketUnlockAwardEntry.DeserializeMessage(array);
			return bucketUnlockAwardEntry;
		}

		// Token: 0x0600209F RID: 8351 RVA: 0x000CF404 File Offset: 0x000CD604
		public static List<BucketUnlockAwardEntry> ReadListBucketUnlockAwardEntry(byte[] data, ref int offset)
		{
			List<BucketUnlockAwardEntry> list = new List<BucketUnlockAwardEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BucketUnlockAwardEntry item = ArrayManager.ReadBucketUnlockAwardEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020A0 RID: 8352 RVA: 0x000CF448 File Offset: 0x000CD648
		public static void WriteBaseAwardItem(ref byte[] data, ref int offset, BaseAwardItem value)
		{
			uint value2 = 0u;
			if (value == null)
			{
				value2 = 0u;
			}
			else if (value.GetType() == typeof(InsertPartIntoSlot))
			{
				value2 = 1479495897u;
			}
			else if (value.GetType() == typeof(UpgradeTrapToNewStrength))
			{
				value2 = 3135694640u;
			}
			else if (value.GetType() == typeof(EUAdminGrant))
			{
				value2 = 64202748u;
			}
			else if (value.GetType() == typeof(EUAdminDelete))
			{
				value2 = 4055439818u;
			}
			else if (value.GetType() == typeof(CNIDIPItemGrant))
			{
				value2 = 1647504857u;
			}
			else if (value.GetType() == typeof(AdminWebEditCard))
			{
				value2 = 1767663310u;
			}
			else if (value.GetType() == typeof(AdminWebGrantEverything))
			{
				value2 = 4074878757u;
			}
			else if (value.GetType() == typeof(TestPopulateLeaderboardsAward))
			{
				value2 = 4128389343u;
			}
			else if (value.GetType() == typeof(NewTestAccount))
			{
				value2 = 703425326u;
			}
			else if (value.GetType() == typeof(AdminWebEditCurrency))
			{
				value2 = 2355490823u;
			}
			else if (value.GetType() == typeof(AdminWebSetLevel))
			{
				value2 = 3431923303u;
			}
			else if (value.GetType() == typeof(NewAccount))
			{
				value2 = 4236227393u;
			}
			else if (value.GetType() == typeof(UpgradeTrap))
			{
				value2 = 2464137891u;
			}
			else if (value.GetType() == typeof(CraftItem))
			{
				value2 = 2385511844u;
			}
			else if (value.GetType() == typeof(SlotPartIntoTrap))
			{
				value2 = 21261477u;
			}
			else if (value.GetType() == typeof(RemovePartFromTrap))
			{
				value2 = 2538091688u;
			}
			else if (value.GetType() == typeof(GameResultsAward))
			{
				value2 = 635880283u;
			}
			else if (value.GetType() == typeof(OverLevelAward))
			{
				value2 = 427133180u;
			}
			else if (value.GetType() == typeof(LevelUpAward))
			{
				value2 = 4071604107u;
			}
			else if (value.GetType() == typeof(HeroProgressAward))
			{
				value2 = 4010707170u;
			}
			else if (value.GetType() == typeof(LevelProgressAward))
			{
				value2 = 3078492530u;
			}
			else if (value.GetType() == typeof(HeroLevelUpAward))
			{
				value2 = 1805113583u;
			}
			else if (value.GetType() == typeof(DropsAndConsumablesAward))
			{
				value2 = 3514390489u;
			}
			else if (value.GetType() == typeof(TutorialRewardsAward))
			{
				value2 = 1933065111u;
			}
			else if (value.GetType() == typeof(DailyLoginAward))
			{
				value2 = 3687677940u;
			}
			else if (value.GetType() == typeof(EventChestAward))
			{
				value2 = 1794149271u;
			}
			else if (value.GetType() == typeof(HeroWinAward))
			{
				value2 = 3822341622u;
			}
			else if (value.GetType() == typeof(SabotageAward))
			{
				value2 = 168388062u;
			}
			else if (value.GetType() == typeof(KeystoneAward))
			{
				value2 = 3613154846u;
			}
			else if (value.GetType() == typeof(ReferralChestAward))
			{
				value2 = 2565207263u;
			}
			else if (value.GetType() == typeof(ReferralItemAward))
			{
				value2 = 2387174811u;
			}
			else if (value.GetType() == typeof(EventRewardAward))
			{
				value2 = 3181919390u;
			}
			else if (value.GetType() == typeof(StorePaymentPurchase))
			{
				value2 = 2897637950u;
			}
			else if (value.GetType() == typeof(StoreVirtualCurrencyPurchase))
			{
				value2 = 3397734902u;
			}
			else if (value.GetType() == typeof(QuestAward))
			{
				value2 = 1474879194u;
			}
			else if (value.GetType() == typeof(QuestAwardChestItem))
			{
				value2 = 2003165386u;
			}
			else if (value.GetType() == typeof(AchievementAward))
			{
				value2 = 1795246124u;
			}
			else if (value.GetType() == typeof(AchievementAwardChestItem))
			{
				value2 = 2665923518u;
			}
			else if (value.GetType() == typeof(AchievementAwardKeystoneItem))
			{
				value2 = 808764528u;
			}
			else if (value.GetType() == typeof(AchievementAwardItem))
			{
				value2 = 3896495951u;
			}
			else if (value.GetType() == typeof(StarAwards))
			{
				value2 = 3906265512u;
			}
			else if (value.GetType() == typeof(StarAwardChestItem))
			{
				value2 = 3278776342u;
			}
			else if (value.GetType() == typeof(DailyLoginAwardChestItem))
			{
				value2 = 2940640369u;
			}
			else if (value.GetType() == typeof(HeroWinAwardChestItem))
			{
				value2 = 1547156522u;
			}
			else if (value.GetType() == typeof(ReferralMessageItemAward))
			{
				value2 = 107549860u;
			}
			else if (value.GetType() == typeof(GuildAward))
			{
				value2 = 3099055238u;
			}
			else if (value.GetType() == typeof(GuildCreationAward))
			{
				value2 = 2917253745u;
			}
			else if (value.GetType() == typeof(ChallengeAward))
			{
				value2 = 3530821286u;
			}
			else if (value.GetType() == typeof(OpsUtilAward))
			{
				value2 = 637610300u;
			}
			else if (value.GetType() == typeof(LevelUnlockAward))
			{
				value2 = 419036965u;
			}
			else if (value.GetType() == typeof(GameCodeAward))
			{
				value2 = 2489280553u;
			}
			else if (value.GetType() == typeof(RevokeSteamDLCAward))
			{
				value2 = 416722753u;
			}
			else if (value.GetType() == typeof(BucketUnlockAward))
			{
				value2 = 1628633092u;
			}
			else if (value.GetType() == typeof(HeroicDyeAwardItem))
			{
				value2 = 3842159476u;
			}
			else if (value.GetType() == typeof(VIPSlotUnlockAward))
			{
				value2 = 510495055u;
			}
			else if (value.GetType() == typeof(KeystoneWinAward))
			{
				value2 = 1771139669u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventFullAwardItem))
			{
				value2 = 1030536601u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventFullAwardChestItem))
			{
				value2 = 3419439331u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventPartialAwardItem))
			{
				value2 = 673919886u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventPartialAwardChestItem))
			{
				value2 = 1458992936u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventGoalAwardItem))
			{
				value2 = 3443600518u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventGoalAwardChestItem))
			{
				value2 = 146092671u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventIndividualContributionAwardItem))
			{
				value2 = 2074030368u;
			}
			else if (value.GetType() == typeof(PlayerMessageCommunityEventIndividualContributionAwardChestItem))
			{
				value2 = 1613350415u;
			}
			else if (value.GetType() == typeof(CommunityEventFullAwardItem))
			{
				value2 = 4168978622u;
			}
			else if (value.GetType() == typeof(CommunityEventFullAwardChestItem))
			{
				value2 = 1090580056u;
			}
			else if (value.GetType() == typeof(CommunityEventPartialAwardItem))
			{
				value2 = 1605572915u;
			}
			else if (value.GetType() == typeof(CommunityEventPartialAwardChestItem))
			{
				value2 = 3796955822u;
			}
			else if (value.GetType() == typeof(CommunityEventGoalAwardItem))
			{
				value2 = 139461025u;
			}
			else if (value.GetType() == typeof(CommunityEventGoalAwardChestItem))
			{
				value2 = 2187680964u;
			}
			else if (value.GetType() == typeof(CommunityEventIndividualContributionAwardItem))
			{
				value2 = 73304286u;
			}
			else if (value.GetType() == typeof(CommunityEventIndividualContributionAwardChestItem))
			{
				value2 = 3483218029u;
			}
			else if (value.GetType() == typeof(GibsConversionRemovalFromInventory))
			{
				value2 = 2468791128u;
			}
			else if (value.GetType() == typeof(KeystoneRerollAwardItem))
			{
				value2 = 3266926118u;
			}
			byte[] array = value.SerializeMessage();
			byte[] array2 = new byte[array.Length + 4];
			Array.Copy(BitConverter.GetBytes(value2), 0, array2, 0, 4);
			Array.Copy(array, 0, array2, 4, array.Length);
			ArrayManager.WriteByteArray(ref data, ref offset, array2);
		}

		// Token: 0x060020A1 RID: 8353 RVA: 0x000CFDD4 File Offset: 0x000CDFD4
		public static void WriteListBaseAwardItem(ref byte[] data, ref int offset, List<BaseAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BaseAwardItem value in values)
			{
				ArrayManager.WriteBaseAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060020A2 RID: 8354 RVA: 0x000CFE50 File Offset: 0x000CE050
		public static BaseAwardItem ReadBaseAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			uint num2 = BitConverter.ToUInt32(data, offset);
			offset += 4;
			BaseAwardItem baseAwardItem = null;
			if (num2 == 0u)
			{
				return baseAwardItem;
			}
			if (num2 == 1479495897u)
			{
				baseAwardItem = new InsertPartIntoSlot();
			}
			else if (num2 == 3135694640u)
			{
				baseAwardItem = new UpgradeTrapToNewStrength();
			}
			else if (num2 == 64202748u)
			{
				baseAwardItem = new EUAdminGrant();
			}
			else if (num2 == 4055439818u)
			{
				baseAwardItem = new EUAdminDelete();
			}
			else if (num2 == 1647504857u)
			{
				baseAwardItem = new CNIDIPItemGrant();
			}
			else if (num2 == 1767663310u)
			{
				baseAwardItem = new AdminWebEditCard();
			}
			else if (num2 == 4074878757u)
			{
				baseAwardItem = new AdminWebGrantEverything();
			}
			else if (num2 == 4128389343u)
			{
				baseAwardItem = new TestPopulateLeaderboardsAward();
			}
			else if (num2 == 703425326u)
			{
				baseAwardItem = new NewTestAccount();
			}
			else if (num2 == 2355490823u)
			{
				baseAwardItem = new AdminWebEditCurrency();
			}
			else if (num2 == 3431923303u)
			{
				baseAwardItem = new AdminWebSetLevel();
			}
			else if (num2 == 4236227393u)
			{
				baseAwardItem = new NewAccount();
			}
			else if (num2 == 2464137891u)
			{
				baseAwardItem = new UpgradeTrap();
			}
			else if (num2 == 2385511844u)
			{
				baseAwardItem = new CraftItem();
			}
			else if (num2 == 21261477u)
			{
				baseAwardItem = new SlotPartIntoTrap();
			}
			else if (num2 == 2538091688u)
			{
				baseAwardItem = new RemovePartFromTrap();
			}
			else if (num2 == 635880283u)
			{
				baseAwardItem = new GameResultsAward();
			}
			else if (num2 == 427133180u)
			{
				baseAwardItem = new OverLevelAward();
			}
			else if (num2 == 4071604107u)
			{
				baseAwardItem = new LevelUpAward();
			}
			else if (num2 == 4010707170u)
			{
				baseAwardItem = new HeroProgressAward();
			}
			else if (num2 == 3078492530u)
			{
				baseAwardItem = new LevelProgressAward();
			}
			else if (num2 == 1805113583u)
			{
				baseAwardItem = new HeroLevelUpAward();
			}
			else if (num2 == 3514390489u)
			{
				baseAwardItem = new DropsAndConsumablesAward();
			}
			else if (num2 == 1933065111u)
			{
				baseAwardItem = new TutorialRewardsAward();
			}
			else if (num2 == 3687677940u)
			{
				baseAwardItem = new DailyLoginAward();
			}
			else if (num2 == 1794149271u)
			{
				baseAwardItem = new EventChestAward();
			}
			else if (num2 == 3822341622u)
			{
				baseAwardItem = new HeroWinAward();
			}
			else if (num2 == 168388062u)
			{
				baseAwardItem = new SabotageAward();
			}
			else if (num2 == 3613154846u)
			{
				baseAwardItem = new KeystoneAward();
			}
			else if (num2 == 2565207263u)
			{
				baseAwardItem = new ReferralChestAward();
			}
			else if (num2 == 2387174811u)
			{
				baseAwardItem = new ReferralItemAward();
			}
			else if (num2 == 3181919390u)
			{
				baseAwardItem = new EventRewardAward();
			}
			else if (num2 == 2897637950u)
			{
				baseAwardItem = new StorePaymentPurchase();
			}
			else if (num2 == 3397734902u)
			{
				baseAwardItem = new StoreVirtualCurrencyPurchase();
			}
			else if (num2 == 1474879194u)
			{
				baseAwardItem = new QuestAward();
			}
			else if (num2 == 2003165386u)
			{
				baseAwardItem = new QuestAwardChestItem();
			}
			else if (num2 == 1795246124u)
			{
				baseAwardItem = new AchievementAward();
			}
			else if (num2 == 2665923518u)
			{
				baseAwardItem = new AchievementAwardChestItem();
			}
			else if (num2 == 808764528u)
			{
				baseAwardItem = new AchievementAwardKeystoneItem();
			}
			else if (num2 == 3896495951u)
			{
				baseAwardItem = new AchievementAwardItem();
			}
			else if (num2 == 3906265512u)
			{
				baseAwardItem = new StarAwards();
			}
			else if (num2 == 3278776342u)
			{
				baseAwardItem = new StarAwardChestItem();
			}
			else if (num2 == 2940640369u)
			{
				baseAwardItem = new DailyLoginAwardChestItem();
			}
			else if (num2 == 1547156522u)
			{
				baseAwardItem = new HeroWinAwardChestItem();
			}
			else if (num2 == 107549860u)
			{
				baseAwardItem = new ReferralMessageItemAward();
			}
			else if (num2 == 3099055238u)
			{
				baseAwardItem = new GuildAward();
			}
			else if (num2 == 2917253745u)
			{
				baseAwardItem = new GuildCreationAward();
			}
			else if (num2 == 3530821286u)
			{
				baseAwardItem = new ChallengeAward();
			}
			else if (num2 == 637610300u)
			{
				baseAwardItem = new OpsUtilAward();
			}
			else if (num2 == 419036965u)
			{
				baseAwardItem = new LevelUnlockAward();
			}
			else if (num2 == 2489280553u)
			{
				baseAwardItem = new GameCodeAward();
			}
			else if (num2 == 416722753u)
			{
				baseAwardItem = new RevokeSteamDLCAward();
			}
			else if (num2 == 1628633092u)
			{
				baseAwardItem = new BucketUnlockAward();
			}
			else if (num2 == 3842159476u)
			{
				baseAwardItem = new HeroicDyeAwardItem();
			}
			else if (num2 == 510495055u)
			{
				baseAwardItem = new VIPSlotUnlockAward();
			}
			else if (num2 == 1771139669u)
			{
				baseAwardItem = new KeystoneWinAward();
			}
			else if (num2 == 1030536601u)
			{
				baseAwardItem = new PlayerMessageCommunityEventFullAwardItem();
			}
			else if (num2 == 3419439331u)
			{
				baseAwardItem = new PlayerMessageCommunityEventFullAwardChestItem();
			}
			else if (num2 == 673919886u)
			{
				baseAwardItem = new PlayerMessageCommunityEventPartialAwardItem();
			}
			else if (num2 == 1458992936u)
			{
				baseAwardItem = new PlayerMessageCommunityEventPartialAwardChestItem();
			}
			else if (num2 == 3443600518u)
			{
				baseAwardItem = new PlayerMessageCommunityEventGoalAwardItem();
			}
			else if (num2 == 146092671u)
			{
				baseAwardItem = new PlayerMessageCommunityEventGoalAwardChestItem();
			}
			else if (num2 == 2074030368u)
			{
				baseAwardItem = new PlayerMessageCommunityEventIndividualContributionAwardItem();
			}
			else if (num2 == 1613350415u)
			{
				baseAwardItem = new PlayerMessageCommunityEventIndividualContributionAwardChestItem();
			}
			else if (num2 == 4168978622u)
			{
				baseAwardItem = new CommunityEventFullAwardItem();
			}
			else if (num2 == 1090580056u)
			{
				baseAwardItem = new CommunityEventFullAwardChestItem();
			}
			else if (num2 == 1605572915u)
			{
				baseAwardItem = new CommunityEventPartialAwardItem();
			}
			else if (num2 == 3796955822u)
			{
				baseAwardItem = new CommunityEventPartialAwardChestItem();
			}
			else if (num2 == 139461025u)
			{
				baseAwardItem = new CommunityEventGoalAwardItem();
			}
			else if (num2 == 2187680964u)
			{
				baseAwardItem = new CommunityEventGoalAwardChestItem();
			}
			else if (num2 == 73304286u)
			{
				baseAwardItem = new CommunityEventIndividualContributionAwardItem();
			}
			else if (num2 == 3483218029u)
			{
				baseAwardItem = new CommunityEventIndividualContributionAwardChestItem();
			}
			else if (num2 == 2468791128u)
			{
				baseAwardItem = new GibsConversionRemovalFromInventory();
			}
			else if (num2 == 3266926118u)
			{
				baseAwardItem = new KeystoneRerollAwardItem();
			}
			num -= 4;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			baseAwardItem.DeserializeMessage(array);
			return baseAwardItem;
		}

		// Token: 0x060020A3 RID: 8355 RVA: 0x000D0500 File Offset: 0x000CE700
		public static List<BaseAwardItem> ReadListBaseAwardItem(byte[] data, ref int offset)
		{
			List<BaseAwardItem> list = new List<BaseAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BaseAwardItem item = ArrayManager.ReadBaseAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020A4 RID: 8356 RVA: 0x000D0544 File Offset: 0x000CE744
		public static void WriteInsertPartIntoSlot(ref byte[] data, ref int offset, InsertPartIntoSlot value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020A5 RID: 8357 RVA: 0x000D0560 File Offset: 0x000CE760
		public static void WriteListInsertPartIntoSlot(ref byte[] data, ref int offset, List<InsertPartIntoSlot> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (InsertPartIntoSlot value in values)
			{
				ArrayManager.WriteInsertPartIntoSlot(ref data, ref offset, value);
			}
		}

		// Token: 0x060020A6 RID: 8358 RVA: 0x000D05DC File Offset: 0x000CE7DC
		public static InsertPartIntoSlot ReadInsertPartIntoSlot(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			InsertPartIntoSlot insertPartIntoSlot = new InsertPartIntoSlot();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			insertPartIntoSlot.DeserializeMessage(array);
			return insertPartIntoSlot;
		}

		// Token: 0x060020A7 RID: 8359 RVA: 0x000D0620 File Offset: 0x000CE820
		public static List<InsertPartIntoSlot> ReadListInsertPartIntoSlot(byte[] data, ref int offset)
		{
			List<InsertPartIntoSlot> list = new List<InsertPartIntoSlot>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				InsertPartIntoSlot item = ArrayManager.ReadInsertPartIntoSlot(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020A8 RID: 8360 RVA: 0x000D0664 File Offset: 0x000CE864
		public static void WriteUpgradeTrapToNewStrength(ref byte[] data, ref int offset, UpgradeTrapToNewStrength value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020A9 RID: 8361 RVA: 0x000D0680 File Offset: 0x000CE880
		public static void WriteListUpgradeTrapToNewStrength(ref byte[] data, ref int offset, List<UpgradeTrapToNewStrength> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UpgradeTrapToNewStrength value in values)
			{
				ArrayManager.WriteUpgradeTrapToNewStrength(ref data, ref offset, value);
			}
		}

		// Token: 0x060020AA RID: 8362 RVA: 0x000D06FC File Offset: 0x000CE8FC
		public static UpgradeTrapToNewStrength ReadUpgradeTrapToNewStrength(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UpgradeTrapToNewStrength upgradeTrapToNewStrength = new UpgradeTrapToNewStrength();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			upgradeTrapToNewStrength.DeserializeMessage(array);
			return upgradeTrapToNewStrength;
		}

		// Token: 0x060020AB RID: 8363 RVA: 0x000D0740 File Offset: 0x000CE940
		public static List<UpgradeTrapToNewStrength> ReadListUpgradeTrapToNewStrength(byte[] data, ref int offset)
		{
			List<UpgradeTrapToNewStrength> list = new List<UpgradeTrapToNewStrength>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UpgradeTrapToNewStrength item = ArrayManager.ReadUpgradeTrapToNewStrength(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020AC RID: 8364 RVA: 0x000D0784 File Offset: 0x000CE984
		public static void WriteEUAdminGrant(ref byte[] data, ref int offset, EUAdminGrant value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020AD RID: 8365 RVA: 0x000D07A0 File Offset: 0x000CE9A0
		public static void WriteListEUAdminGrant(ref byte[] data, ref int offset, List<EUAdminGrant> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (EUAdminGrant value in values)
			{
				ArrayManager.WriteEUAdminGrant(ref data, ref offset, value);
			}
		}

		// Token: 0x060020AE RID: 8366 RVA: 0x000D081C File Offset: 0x000CEA1C
		public static EUAdminGrant ReadEUAdminGrant(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			EUAdminGrant euadminGrant = new EUAdminGrant();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			euadminGrant.DeserializeMessage(array);
			return euadminGrant;
		}

		// Token: 0x060020AF RID: 8367 RVA: 0x000D0860 File Offset: 0x000CEA60
		public static List<EUAdminGrant> ReadListEUAdminGrant(byte[] data, ref int offset)
		{
			List<EUAdminGrant> list = new List<EUAdminGrant>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				EUAdminGrant item = ArrayManager.ReadEUAdminGrant(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020B0 RID: 8368 RVA: 0x000D08A4 File Offset: 0x000CEAA4
		public static void WriteEUAdminDelete(ref byte[] data, ref int offset, EUAdminDelete value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020B1 RID: 8369 RVA: 0x000D08C0 File Offset: 0x000CEAC0
		public static void WriteListEUAdminDelete(ref byte[] data, ref int offset, List<EUAdminDelete> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (EUAdminDelete value in values)
			{
				ArrayManager.WriteEUAdminDelete(ref data, ref offset, value);
			}
		}

		// Token: 0x060020B2 RID: 8370 RVA: 0x000D093C File Offset: 0x000CEB3C
		public static EUAdminDelete ReadEUAdminDelete(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			EUAdminDelete euadminDelete = new EUAdminDelete();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			euadminDelete.DeserializeMessage(array);
			return euadminDelete;
		}

		// Token: 0x060020B3 RID: 8371 RVA: 0x000D0980 File Offset: 0x000CEB80
		public static List<EUAdminDelete> ReadListEUAdminDelete(byte[] data, ref int offset)
		{
			List<EUAdminDelete> list = new List<EUAdminDelete>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				EUAdminDelete item = ArrayManager.ReadEUAdminDelete(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020B4 RID: 8372 RVA: 0x000D09C4 File Offset: 0x000CEBC4
		public static void WriteCNIDIPItemGrant(ref byte[] data, ref int offset, CNIDIPItemGrant value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020B5 RID: 8373 RVA: 0x000D09E0 File Offset: 0x000CEBE0
		public static void WriteListCNIDIPItemGrant(ref byte[] data, ref int offset, List<CNIDIPItemGrant> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CNIDIPItemGrant value in values)
			{
				ArrayManager.WriteCNIDIPItemGrant(ref data, ref offset, value);
			}
		}

		// Token: 0x060020B6 RID: 8374 RVA: 0x000D0A5C File Offset: 0x000CEC5C
		public static CNIDIPItemGrant ReadCNIDIPItemGrant(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CNIDIPItemGrant cnidipitemGrant = new CNIDIPItemGrant();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			cnidipitemGrant.DeserializeMessage(array);
			return cnidipitemGrant;
		}

		// Token: 0x060020B7 RID: 8375 RVA: 0x000D0AA0 File Offset: 0x000CECA0
		public static List<CNIDIPItemGrant> ReadListCNIDIPItemGrant(byte[] data, ref int offset)
		{
			List<CNIDIPItemGrant> list = new List<CNIDIPItemGrant>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CNIDIPItemGrant item = ArrayManager.ReadCNIDIPItemGrant(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020B8 RID: 8376 RVA: 0x000D0AE4 File Offset: 0x000CECE4
		public static void WriteAdminWebEditCard(ref byte[] data, ref int offset, AdminWebEditCard value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020B9 RID: 8377 RVA: 0x000D0B00 File Offset: 0x000CED00
		public static void WriteListAdminWebEditCard(ref byte[] data, ref int offset, List<AdminWebEditCard> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AdminWebEditCard value in values)
			{
				ArrayManager.WriteAdminWebEditCard(ref data, ref offset, value);
			}
		}

		// Token: 0x060020BA RID: 8378 RVA: 0x000D0B7C File Offset: 0x000CED7C
		public static AdminWebEditCard ReadAdminWebEditCard(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AdminWebEditCard adminWebEditCard = new AdminWebEditCard();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			adminWebEditCard.DeserializeMessage(array);
			return adminWebEditCard;
		}

		// Token: 0x060020BB RID: 8379 RVA: 0x000D0BC0 File Offset: 0x000CEDC0
		public static List<AdminWebEditCard> ReadListAdminWebEditCard(byte[] data, ref int offset)
		{
			List<AdminWebEditCard> list = new List<AdminWebEditCard>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AdminWebEditCard item = ArrayManager.ReadAdminWebEditCard(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020BC RID: 8380 RVA: 0x000D0C04 File Offset: 0x000CEE04
		public static void WriteAdminWebGrantEverything(ref byte[] data, ref int offset, AdminWebGrantEverything value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020BD RID: 8381 RVA: 0x000D0C20 File Offset: 0x000CEE20
		public static void WriteListAdminWebGrantEverything(ref byte[] data, ref int offset, List<AdminWebGrantEverything> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AdminWebGrantEverything value in values)
			{
				ArrayManager.WriteAdminWebGrantEverything(ref data, ref offset, value);
			}
		}

		// Token: 0x060020BE RID: 8382 RVA: 0x000D0C9C File Offset: 0x000CEE9C
		public static AdminWebGrantEverything ReadAdminWebGrantEverything(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AdminWebGrantEverything adminWebGrantEverything = new AdminWebGrantEverything();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			adminWebGrantEverything.DeserializeMessage(array);
			return adminWebGrantEverything;
		}

		// Token: 0x060020BF RID: 8383 RVA: 0x000D0CE0 File Offset: 0x000CEEE0
		public static List<AdminWebGrantEverything> ReadListAdminWebGrantEverything(byte[] data, ref int offset)
		{
			List<AdminWebGrantEverything> list = new List<AdminWebGrantEverything>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AdminWebGrantEverything item = ArrayManager.ReadAdminWebGrantEverything(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020C0 RID: 8384 RVA: 0x000D0D24 File Offset: 0x000CEF24
		public static void WriteTestPopulateLeaderboardsAward(ref byte[] data, ref int offset, TestPopulateLeaderboardsAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020C1 RID: 8385 RVA: 0x000D0D40 File Offset: 0x000CEF40
		public static void WriteListTestPopulateLeaderboardsAward(ref byte[] data, ref int offset, List<TestPopulateLeaderboardsAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TestPopulateLeaderboardsAward value in values)
			{
				ArrayManager.WriteTestPopulateLeaderboardsAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020C2 RID: 8386 RVA: 0x000D0DBC File Offset: 0x000CEFBC
		public static TestPopulateLeaderboardsAward ReadTestPopulateLeaderboardsAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TestPopulateLeaderboardsAward testPopulateLeaderboardsAward = new TestPopulateLeaderboardsAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			testPopulateLeaderboardsAward.DeserializeMessage(array);
			return testPopulateLeaderboardsAward;
		}

		// Token: 0x060020C3 RID: 8387 RVA: 0x000D0E00 File Offset: 0x000CF000
		public static List<TestPopulateLeaderboardsAward> ReadListTestPopulateLeaderboardsAward(byte[] data, ref int offset)
		{
			List<TestPopulateLeaderboardsAward> list = new List<TestPopulateLeaderboardsAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TestPopulateLeaderboardsAward item = ArrayManager.ReadTestPopulateLeaderboardsAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020C4 RID: 8388 RVA: 0x000D0E44 File Offset: 0x000CF044
		public static void WriteNewTestAccount(ref byte[] data, ref int offset, NewTestAccount value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020C5 RID: 8389 RVA: 0x000D0E60 File Offset: 0x000CF060
		public static void WriteListNewTestAccount(ref byte[] data, ref int offset, List<NewTestAccount> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NewTestAccount value in values)
			{
				ArrayManager.WriteNewTestAccount(ref data, ref offset, value);
			}
		}

		// Token: 0x060020C6 RID: 8390 RVA: 0x000D0EDC File Offset: 0x000CF0DC
		public static NewTestAccount ReadNewTestAccount(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NewTestAccount newTestAccount = new NewTestAccount();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			newTestAccount.DeserializeMessage(array);
			return newTestAccount;
		}

		// Token: 0x060020C7 RID: 8391 RVA: 0x000D0F20 File Offset: 0x000CF120
		public static List<NewTestAccount> ReadListNewTestAccount(byte[] data, ref int offset)
		{
			List<NewTestAccount> list = new List<NewTestAccount>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NewTestAccount item = ArrayManager.ReadNewTestAccount(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020C8 RID: 8392 RVA: 0x000D0F64 File Offset: 0x000CF164
		public static void WriteAdminWebEditCurrency(ref byte[] data, ref int offset, AdminWebEditCurrency value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020C9 RID: 8393 RVA: 0x000D0F80 File Offset: 0x000CF180
		public static void WriteListAdminWebEditCurrency(ref byte[] data, ref int offset, List<AdminWebEditCurrency> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AdminWebEditCurrency value in values)
			{
				ArrayManager.WriteAdminWebEditCurrency(ref data, ref offset, value);
			}
		}

		// Token: 0x060020CA RID: 8394 RVA: 0x000D0FFC File Offset: 0x000CF1FC
		public static AdminWebEditCurrency ReadAdminWebEditCurrency(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AdminWebEditCurrency adminWebEditCurrency = new AdminWebEditCurrency();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			adminWebEditCurrency.DeserializeMessage(array);
			return adminWebEditCurrency;
		}

		// Token: 0x060020CB RID: 8395 RVA: 0x000D1040 File Offset: 0x000CF240
		public static List<AdminWebEditCurrency> ReadListAdminWebEditCurrency(byte[] data, ref int offset)
		{
			List<AdminWebEditCurrency> list = new List<AdminWebEditCurrency>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AdminWebEditCurrency item = ArrayManager.ReadAdminWebEditCurrency(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020CC RID: 8396 RVA: 0x000D1084 File Offset: 0x000CF284
		public static void WriteAdminWebSetLevel(ref byte[] data, ref int offset, AdminWebSetLevel value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020CD RID: 8397 RVA: 0x000D10A0 File Offset: 0x000CF2A0
		public static void WriteListAdminWebSetLevel(ref byte[] data, ref int offset, List<AdminWebSetLevel> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AdminWebSetLevel value in values)
			{
				ArrayManager.WriteAdminWebSetLevel(ref data, ref offset, value);
			}
		}

		// Token: 0x060020CE RID: 8398 RVA: 0x000D111C File Offset: 0x000CF31C
		public static AdminWebSetLevel ReadAdminWebSetLevel(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AdminWebSetLevel adminWebSetLevel = new AdminWebSetLevel();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			adminWebSetLevel.DeserializeMessage(array);
			return adminWebSetLevel;
		}

		// Token: 0x060020CF RID: 8399 RVA: 0x000D1160 File Offset: 0x000CF360
		public static List<AdminWebSetLevel> ReadListAdminWebSetLevel(byte[] data, ref int offset)
		{
			List<AdminWebSetLevel> list = new List<AdminWebSetLevel>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AdminWebSetLevel item = ArrayManager.ReadAdminWebSetLevel(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020D0 RID: 8400 RVA: 0x000D11A4 File Offset: 0x000CF3A4
		public static void WriteNewAccount(ref byte[] data, ref int offset, NewAccount value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020D1 RID: 8401 RVA: 0x000D11C0 File Offset: 0x000CF3C0
		public static void WriteListNewAccount(ref byte[] data, ref int offset, List<NewAccount> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NewAccount value in values)
			{
				ArrayManager.WriteNewAccount(ref data, ref offset, value);
			}
		}

		// Token: 0x060020D2 RID: 8402 RVA: 0x000D123C File Offset: 0x000CF43C
		public static NewAccount ReadNewAccount(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NewAccount newAccount = new NewAccount();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			newAccount.DeserializeMessage(array);
			return newAccount;
		}

		// Token: 0x060020D3 RID: 8403 RVA: 0x000D1280 File Offset: 0x000CF480
		public static List<NewAccount> ReadListNewAccount(byte[] data, ref int offset)
		{
			List<NewAccount> list = new List<NewAccount>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NewAccount item = ArrayManager.ReadNewAccount(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020D4 RID: 8404 RVA: 0x000D12C4 File Offset: 0x000CF4C4
		public static void WriteUpgradeTrap(ref byte[] data, ref int offset, UpgradeTrap value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020D5 RID: 8405 RVA: 0x000D12E0 File Offset: 0x000CF4E0
		public static void WriteListUpgradeTrap(ref byte[] data, ref int offset, List<UpgradeTrap> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UpgradeTrap value in values)
			{
				ArrayManager.WriteUpgradeTrap(ref data, ref offset, value);
			}
		}

		// Token: 0x060020D6 RID: 8406 RVA: 0x000D135C File Offset: 0x000CF55C
		public static UpgradeTrap ReadUpgradeTrap(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UpgradeTrap upgradeTrap = new UpgradeTrap();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			upgradeTrap.DeserializeMessage(array);
			return upgradeTrap;
		}

		// Token: 0x060020D7 RID: 8407 RVA: 0x000D13A0 File Offset: 0x000CF5A0
		public static List<UpgradeTrap> ReadListUpgradeTrap(byte[] data, ref int offset)
		{
			List<UpgradeTrap> list = new List<UpgradeTrap>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UpgradeTrap item = ArrayManager.ReadUpgradeTrap(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020D8 RID: 8408 RVA: 0x000D13E4 File Offset: 0x000CF5E4
		public static void WriteCraftItem(ref byte[] data, ref int offset, CraftItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020D9 RID: 8409 RVA: 0x000D1400 File Offset: 0x000CF600
		public static void WriteListCraftItem(ref byte[] data, ref int offset, List<CraftItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CraftItem value in values)
			{
				ArrayManager.WriteCraftItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060020DA RID: 8410 RVA: 0x000D147C File Offset: 0x000CF67C
		public static CraftItem ReadCraftItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CraftItem craftItem = new CraftItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			craftItem.DeserializeMessage(array);
			return craftItem;
		}

		// Token: 0x060020DB RID: 8411 RVA: 0x000D14C0 File Offset: 0x000CF6C0
		public static List<CraftItem> ReadListCraftItem(byte[] data, ref int offset)
		{
			List<CraftItem> list = new List<CraftItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CraftItem item = ArrayManager.ReadCraftItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020DC RID: 8412 RVA: 0x000D1504 File Offset: 0x000CF704
		public static void WriteSlotPartIntoTrap(ref byte[] data, ref int offset, SlotPartIntoTrap value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020DD RID: 8413 RVA: 0x000D1520 File Offset: 0x000CF720
		public static void WriteListSlotPartIntoTrap(ref byte[] data, ref int offset, List<SlotPartIntoTrap> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SlotPartIntoTrap value in values)
			{
				ArrayManager.WriteSlotPartIntoTrap(ref data, ref offset, value);
			}
		}

		// Token: 0x060020DE RID: 8414 RVA: 0x000D159C File Offset: 0x000CF79C
		public static SlotPartIntoTrap ReadSlotPartIntoTrap(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SlotPartIntoTrap slotPartIntoTrap = new SlotPartIntoTrap();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			slotPartIntoTrap.DeserializeMessage(array);
			return slotPartIntoTrap;
		}

		// Token: 0x060020DF RID: 8415 RVA: 0x000D15E0 File Offset: 0x000CF7E0
		public static List<SlotPartIntoTrap> ReadListSlotPartIntoTrap(byte[] data, ref int offset)
		{
			List<SlotPartIntoTrap> list = new List<SlotPartIntoTrap>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SlotPartIntoTrap item = ArrayManager.ReadSlotPartIntoTrap(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020E0 RID: 8416 RVA: 0x000D1624 File Offset: 0x000CF824
		public static void WriteRemovePartFromTrap(ref byte[] data, ref int offset, RemovePartFromTrap value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020E1 RID: 8417 RVA: 0x000D1640 File Offset: 0x000CF840
		public static void WriteListRemovePartFromTrap(ref byte[] data, ref int offset, List<RemovePartFromTrap> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RemovePartFromTrap value in values)
			{
				ArrayManager.WriteRemovePartFromTrap(ref data, ref offset, value);
			}
		}

		// Token: 0x060020E2 RID: 8418 RVA: 0x000D16BC File Offset: 0x000CF8BC
		public static RemovePartFromTrap ReadRemovePartFromTrap(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RemovePartFromTrap removePartFromTrap = new RemovePartFromTrap();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			removePartFromTrap.DeserializeMessage(array);
			return removePartFromTrap;
		}

		// Token: 0x060020E3 RID: 8419 RVA: 0x000D1700 File Offset: 0x000CF900
		public static List<RemovePartFromTrap> ReadListRemovePartFromTrap(byte[] data, ref int offset)
		{
			List<RemovePartFromTrap> list = new List<RemovePartFromTrap>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RemovePartFromTrap item = ArrayManager.ReadRemovePartFromTrap(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020E4 RID: 8420 RVA: 0x000D1744 File Offset: 0x000CF944
		public static void WriteGameResultsAward(ref byte[] data, ref int offset, GameResultsAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020E5 RID: 8421 RVA: 0x000D1760 File Offset: 0x000CF960
		public static void WriteListGameResultsAward(ref byte[] data, ref int offset, List<GameResultsAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GameResultsAward value in values)
			{
				ArrayManager.WriteGameResultsAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020E6 RID: 8422 RVA: 0x000D17DC File Offset: 0x000CF9DC
		public static GameResultsAward ReadGameResultsAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GameResultsAward gameResultsAward = new GameResultsAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gameResultsAward.DeserializeMessage(array);
			return gameResultsAward;
		}

		// Token: 0x060020E7 RID: 8423 RVA: 0x000D1820 File Offset: 0x000CFA20
		public static List<GameResultsAward> ReadListGameResultsAward(byte[] data, ref int offset)
		{
			List<GameResultsAward> list = new List<GameResultsAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GameResultsAward item = ArrayManager.ReadGameResultsAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020E8 RID: 8424 RVA: 0x000D1864 File Offset: 0x000CFA64
		public static void WriteOverLevelAward(ref byte[] data, ref int offset, OverLevelAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020E9 RID: 8425 RVA: 0x000D1880 File Offset: 0x000CFA80
		public static void WriteListOverLevelAward(ref byte[] data, ref int offset, List<OverLevelAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (OverLevelAward value in values)
			{
				ArrayManager.WriteOverLevelAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020EA RID: 8426 RVA: 0x000D18FC File Offset: 0x000CFAFC
		public static OverLevelAward ReadOverLevelAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			OverLevelAward overLevelAward = new OverLevelAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			overLevelAward.DeserializeMessage(array);
			return overLevelAward;
		}

		// Token: 0x060020EB RID: 8427 RVA: 0x000D1940 File Offset: 0x000CFB40
		public static List<OverLevelAward> ReadListOverLevelAward(byte[] data, ref int offset)
		{
			List<OverLevelAward> list = new List<OverLevelAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				OverLevelAward item = ArrayManager.ReadOverLevelAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020EC RID: 8428 RVA: 0x000D1984 File Offset: 0x000CFB84
		public static void WriteLevelUpAward(ref byte[] data, ref int offset, LevelUpAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020ED RID: 8429 RVA: 0x000D19A0 File Offset: 0x000CFBA0
		public static void WriteListLevelUpAward(ref byte[] data, ref int offset, List<LevelUpAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LevelUpAward value in values)
			{
				ArrayManager.WriteLevelUpAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020EE RID: 8430 RVA: 0x000D1A1C File Offset: 0x000CFC1C
		public static LevelUpAward ReadLevelUpAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LevelUpAward levelUpAward = new LevelUpAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			levelUpAward.DeserializeMessage(array);
			return levelUpAward;
		}

		// Token: 0x060020EF RID: 8431 RVA: 0x000D1A60 File Offset: 0x000CFC60
		public static List<LevelUpAward> ReadListLevelUpAward(byte[] data, ref int offset)
		{
			List<LevelUpAward> list = new List<LevelUpAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LevelUpAward item = ArrayManager.ReadLevelUpAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020F0 RID: 8432 RVA: 0x000D1AA4 File Offset: 0x000CFCA4
		public static void WriteHeroProgressAward(ref byte[] data, ref int offset, HeroProgressAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020F1 RID: 8433 RVA: 0x000D1AC0 File Offset: 0x000CFCC0
		public static void WriteListHeroProgressAward(ref byte[] data, ref int offset, List<HeroProgressAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroProgressAward value in values)
			{
				ArrayManager.WriteHeroProgressAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020F2 RID: 8434 RVA: 0x000D1B3C File Offset: 0x000CFD3C
		public static HeroProgressAward ReadHeroProgressAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroProgressAward heroProgressAward = new HeroProgressAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroProgressAward.DeserializeMessage(array);
			return heroProgressAward;
		}

		// Token: 0x060020F3 RID: 8435 RVA: 0x000D1B80 File Offset: 0x000CFD80
		public static List<HeroProgressAward> ReadListHeroProgressAward(byte[] data, ref int offset)
		{
			List<HeroProgressAward> list = new List<HeroProgressAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroProgressAward item = ArrayManager.ReadHeroProgressAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020F4 RID: 8436 RVA: 0x000D1BC4 File Offset: 0x000CFDC4
		public static void WriteLevelProgressAward(ref byte[] data, ref int offset, LevelProgressAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020F5 RID: 8437 RVA: 0x000D1BE0 File Offset: 0x000CFDE0
		public static void WriteListLevelProgressAward(ref byte[] data, ref int offset, List<LevelProgressAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LevelProgressAward value in values)
			{
				ArrayManager.WriteLevelProgressAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020F6 RID: 8438 RVA: 0x000D1C5C File Offset: 0x000CFE5C
		public static LevelProgressAward ReadLevelProgressAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LevelProgressAward levelProgressAward = new LevelProgressAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			levelProgressAward.DeserializeMessage(array);
			return levelProgressAward;
		}

		// Token: 0x060020F7 RID: 8439 RVA: 0x000D1CA0 File Offset: 0x000CFEA0
		public static List<LevelProgressAward> ReadListLevelProgressAward(byte[] data, ref int offset)
		{
			List<LevelProgressAward> list = new List<LevelProgressAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LevelProgressAward item = ArrayManager.ReadLevelProgressAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020F8 RID: 8440 RVA: 0x000D1CE4 File Offset: 0x000CFEE4
		public static void WriteHeroLevelUpAward(ref byte[] data, ref int offset, HeroLevelUpAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020F9 RID: 8441 RVA: 0x000D1D00 File Offset: 0x000CFF00
		public static void WriteListHeroLevelUpAward(ref byte[] data, ref int offset, List<HeroLevelUpAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroLevelUpAward value in values)
			{
				ArrayManager.WriteHeroLevelUpAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020FA RID: 8442 RVA: 0x000D1D7C File Offset: 0x000CFF7C
		public static HeroLevelUpAward ReadHeroLevelUpAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroLevelUpAward heroLevelUpAward = new HeroLevelUpAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroLevelUpAward.DeserializeMessage(array);
			return heroLevelUpAward;
		}

		// Token: 0x060020FB RID: 8443 RVA: 0x000D1DC0 File Offset: 0x000CFFC0
		public static List<HeroLevelUpAward> ReadListHeroLevelUpAward(byte[] data, ref int offset)
		{
			List<HeroLevelUpAward> list = new List<HeroLevelUpAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroLevelUpAward item = ArrayManager.ReadHeroLevelUpAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060020FC RID: 8444 RVA: 0x000D1E04 File Offset: 0x000D0004
		public static void WriteDropsAndConsumablesAward(ref byte[] data, ref int offset, DropsAndConsumablesAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060020FD RID: 8445 RVA: 0x000D1E20 File Offset: 0x000D0020
		public static void WriteListDropsAndConsumablesAward(ref byte[] data, ref int offset, List<DropsAndConsumablesAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DropsAndConsumablesAward value in values)
			{
				ArrayManager.WriteDropsAndConsumablesAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060020FE RID: 8446 RVA: 0x000D1E9C File Offset: 0x000D009C
		public static DropsAndConsumablesAward ReadDropsAndConsumablesAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DropsAndConsumablesAward dropsAndConsumablesAward = new DropsAndConsumablesAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dropsAndConsumablesAward.DeserializeMessage(array);
			return dropsAndConsumablesAward;
		}

		// Token: 0x060020FF RID: 8447 RVA: 0x000D1EE0 File Offset: 0x000D00E0
		public static List<DropsAndConsumablesAward> ReadListDropsAndConsumablesAward(byte[] data, ref int offset)
		{
			List<DropsAndConsumablesAward> list = new List<DropsAndConsumablesAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DropsAndConsumablesAward item = ArrayManager.ReadDropsAndConsumablesAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002100 RID: 8448 RVA: 0x000D1F24 File Offset: 0x000D0124
		public static void WriteTutorialRewardsAward(ref byte[] data, ref int offset, TutorialRewardsAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002101 RID: 8449 RVA: 0x000D1F40 File Offset: 0x000D0140
		public static void WriteListTutorialRewardsAward(ref byte[] data, ref int offset, List<TutorialRewardsAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TutorialRewardsAward value in values)
			{
				ArrayManager.WriteTutorialRewardsAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002102 RID: 8450 RVA: 0x000D1FBC File Offset: 0x000D01BC
		public static TutorialRewardsAward ReadTutorialRewardsAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TutorialRewardsAward tutorialRewardsAward = new TutorialRewardsAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			tutorialRewardsAward.DeserializeMessage(array);
			return tutorialRewardsAward;
		}

		// Token: 0x06002103 RID: 8451 RVA: 0x000D2000 File Offset: 0x000D0200
		public static List<TutorialRewardsAward> ReadListTutorialRewardsAward(byte[] data, ref int offset)
		{
			List<TutorialRewardsAward> list = new List<TutorialRewardsAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TutorialRewardsAward item = ArrayManager.ReadTutorialRewardsAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002104 RID: 8452 RVA: 0x000D2044 File Offset: 0x000D0244
		public static void WriteDailyLoginAward(ref byte[] data, ref int offset, DailyLoginAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002105 RID: 8453 RVA: 0x000D2060 File Offset: 0x000D0260
		public static void WriteListDailyLoginAward(ref byte[] data, ref int offset, List<DailyLoginAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DailyLoginAward value in values)
			{
				ArrayManager.WriteDailyLoginAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002106 RID: 8454 RVA: 0x000D20DC File Offset: 0x000D02DC
		public static DailyLoginAward ReadDailyLoginAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DailyLoginAward dailyLoginAward = new DailyLoginAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dailyLoginAward.DeserializeMessage(array);
			return dailyLoginAward;
		}

		// Token: 0x06002107 RID: 8455 RVA: 0x000D2120 File Offset: 0x000D0320
		public static List<DailyLoginAward> ReadListDailyLoginAward(byte[] data, ref int offset)
		{
			List<DailyLoginAward> list = new List<DailyLoginAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DailyLoginAward item = ArrayManager.ReadDailyLoginAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002108 RID: 8456 RVA: 0x000D2164 File Offset: 0x000D0364
		public static void WriteEventChestAward(ref byte[] data, ref int offset, EventChestAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002109 RID: 8457 RVA: 0x000D2180 File Offset: 0x000D0380
		public static void WriteListEventChestAward(ref byte[] data, ref int offset, List<EventChestAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (EventChestAward value in values)
			{
				ArrayManager.WriteEventChestAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600210A RID: 8458 RVA: 0x000D21FC File Offset: 0x000D03FC
		public static EventChestAward ReadEventChestAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			EventChestAward eventChestAward = new EventChestAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			eventChestAward.DeserializeMessage(array);
			return eventChestAward;
		}

		// Token: 0x0600210B RID: 8459 RVA: 0x000D2240 File Offset: 0x000D0440
		public static List<EventChestAward> ReadListEventChestAward(byte[] data, ref int offset)
		{
			List<EventChestAward> list = new List<EventChestAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				EventChestAward item = ArrayManager.ReadEventChestAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600210C RID: 8460 RVA: 0x000D2284 File Offset: 0x000D0484
		public static void WriteHeroWinAward(ref byte[] data, ref int offset, HeroWinAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600210D RID: 8461 RVA: 0x000D22A0 File Offset: 0x000D04A0
		public static void WriteListHeroWinAward(ref byte[] data, ref int offset, List<HeroWinAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroWinAward value in values)
			{
				ArrayManager.WriteHeroWinAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600210E RID: 8462 RVA: 0x000D231C File Offset: 0x000D051C
		public static HeroWinAward ReadHeroWinAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroWinAward heroWinAward = new HeroWinAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroWinAward.DeserializeMessage(array);
			return heroWinAward;
		}

		// Token: 0x0600210F RID: 8463 RVA: 0x000D2360 File Offset: 0x000D0560
		public static List<HeroWinAward> ReadListHeroWinAward(byte[] data, ref int offset)
		{
			List<HeroWinAward> list = new List<HeroWinAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroWinAward item = ArrayManager.ReadHeroWinAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002110 RID: 8464 RVA: 0x000D23A4 File Offset: 0x000D05A4
		public static void WriteSabotageAward(ref byte[] data, ref int offset, SabotageAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002111 RID: 8465 RVA: 0x000D23C0 File Offset: 0x000D05C0
		public static void WriteListSabotageAward(ref byte[] data, ref int offset, List<SabotageAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SabotageAward value in values)
			{
				ArrayManager.WriteSabotageAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002112 RID: 8466 RVA: 0x000D243C File Offset: 0x000D063C
		public static SabotageAward ReadSabotageAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SabotageAward sabotageAward = new SabotageAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			sabotageAward.DeserializeMessage(array);
			return sabotageAward;
		}

		// Token: 0x06002113 RID: 8467 RVA: 0x000D2480 File Offset: 0x000D0680
		public static List<SabotageAward> ReadListSabotageAward(byte[] data, ref int offset)
		{
			List<SabotageAward> list = new List<SabotageAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SabotageAward item = ArrayManager.ReadSabotageAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002114 RID: 8468 RVA: 0x000D24C4 File Offset: 0x000D06C4
		public static void WriteKeystoneAward(ref byte[] data, ref int offset, KeystoneAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002115 RID: 8469 RVA: 0x000D24E0 File Offset: 0x000D06E0
		public static void WriteListKeystoneAward(ref byte[] data, ref int offset, List<KeystoneAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneAward value in values)
			{
				ArrayManager.WriteKeystoneAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002116 RID: 8470 RVA: 0x000D255C File Offset: 0x000D075C
		public static KeystoneAward ReadKeystoneAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneAward keystoneAward = new KeystoneAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneAward.DeserializeMessage(array);
			return keystoneAward;
		}

		// Token: 0x06002117 RID: 8471 RVA: 0x000D25A0 File Offset: 0x000D07A0
		public static List<KeystoneAward> ReadListKeystoneAward(byte[] data, ref int offset)
		{
			List<KeystoneAward> list = new List<KeystoneAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneAward item = ArrayManager.ReadKeystoneAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002118 RID: 8472 RVA: 0x000D25E4 File Offset: 0x000D07E4
		public static void WriteReferralChestAward(ref byte[] data, ref int offset, ReferralChestAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002119 RID: 8473 RVA: 0x000D2600 File Offset: 0x000D0800
		public static void WriteListReferralChestAward(ref byte[] data, ref int offset, List<ReferralChestAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ReferralChestAward value in values)
			{
				ArrayManager.WriteReferralChestAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600211A RID: 8474 RVA: 0x000D267C File Offset: 0x000D087C
		public static ReferralChestAward ReadReferralChestAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ReferralChestAward referralChestAward = new ReferralChestAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			referralChestAward.DeserializeMessage(array);
			return referralChestAward;
		}

		// Token: 0x0600211B RID: 8475 RVA: 0x000D26C0 File Offset: 0x000D08C0
		public static List<ReferralChestAward> ReadListReferralChestAward(byte[] data, ref int offset)
		{
			List<ReferralChestAward> list = new List<ReferralChestAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ReferralChestAward item = ArrayManager.ReadReferralChestAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600211C RID: 8476 RVA: 0x000D2704 File Offset: 0x000D0904
		public static void WriteReferralItemAward(ref byte[] data, ref int offset, ReferralItemAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600211D RID: 8477 RVA: 0x000D2720 File Offset: 0x000D0920
		public static void WriteListReferralItemAward(ref byte[] data, ref int offset, List<ReferralItemAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ReferralItemAward value in values)
			{
				ArrayManager.WriteReferralItemAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600211E RID: 8478 RVA: 0x000D279C File Offset: 0x000D099C
		public static ReferralItemAward ReadReferralItemAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ReferralItemAward referralItemAward = new ReferralItemAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			referralItemAward.DeserializeMessage(array);
			return referralItemAward;
		}

		// Token: 0x0600211F RID: 8479 RVA: 0x000D27E0 File Offset: 0x000D09E0
		public static List<ReferralItemAward> ReadListReferralItemAward(byte[] data, ref int offset)
		{
			List<ReferralItemAward> list = new List<ReferralItemAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ReferralItemAward item = ArrayManager.ReadReferralItemAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002120 RID: 8480 RVA: 0x000D2824 File Offset: 0x000D0A24
		public static void WriteEventRewardAward(ref byte[] data, ref int offset, EventRewardAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002121 RID: 8481 RVA: 0x000D2840 File Offset: 0x000D0A40
		public static void WriteListEventRewardAward(ref byte[] data, ref int offset, List<EventRewardAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (EventRewardAward value in values)
			{
				ArrayManager.WriteEventRewardAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002122 RID: 8482 RVA: 0x000D28BC File Offset: 0x000D0ABC
		public static EventRewardAward ReadEventRewardAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			EventRewardAward eventRewardAward = new EventRewardAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			eventRewardAward.DeserializeMessage(array);
			return eventRewardAward;
		}

		// Token: 0x06002123 RID: 8483 RVA: 0x000D2900 File Offset: 0x000D0B00
		public static List<EventRewardAward> ReadListEventRewardAward(byte[] data, ref int offset)
		{
			List<EventRewardAward> list = new List<EventRewardAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				EventRewardAward item = ArrayManager.ReadEventRewardAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002124 RID: 8484 RVA: 0x000D2944 File Offset: 0x000D0B44
		public static void WriteStorePaymentPurchase(ref byte[] data, ref int offset, StorePaymentPurchase value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002125 RID: 8485 RVA: 0x000D2960 File Offset: 0x000D0B60
		public static void WriteListStorePaymentPurchase(ref byte[] data, ref int offset, List<StorePaymentPurchase> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StorePaymentPurchase value in values)
			{
				ArrayManager.WriteStorePaymentPurchase(ref data, ref offset, value);
			}
		}

		// Token: 0x06002126 RID: 8486 RVA: 0x000D29DC File Offset: 0x000D0BDC
		public static StorePaymentPurchase ReadStorePaymentPurchase(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StorePaymentPurchase storePaymentPurchase = new StorePaymentPurchase();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storePaymentPurchase.DeserializeMessage(array);
			return storePaymentPurchase;
		}

		// Token: 0x06002127 RID: 8487 RVA: 0x000D2A20 File Offset: 0x000D0C20
		public static List<StorePaymentPurchase> ReadListStorePaymentPurchase(byte[] data, ref int offset)
		{
			List<StorePaymentPurchase> list = new List<StorePaymentPurchase>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StorePaymentPurchase item = ArrayManager.ReadStorePaymentPurchase(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002128 RID: 8488 RVA: 0x000D2A64 File Offset: 0x000D0C64
		public static void WriteStoreVirtualCurrencyPurchase(ref byte[] data, ref int offset, StoreVirtualCurrencyPurchase value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002129 RID: 8489 RVA: 0x000D2A80 File Offset: 0x000D0C80
		public static void WriteListStoreVirtualCurrencyPurchase(ref byte[] data, ref int offset, List<StoreVirtualCurrencyPurchase> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreVirtualCurrencyPurchase value in values)
			{
				ArrayManager.WriteStoreVirtualCurrencyPurchase(ref data, ref offset, value);
			}
		}

		// Token: 0x0600212A RID: 8490 RVA: 0x000D2AFC File Offset: 0x000D0CFC
		public static StoreVirtualCurrencyPurchase ReadStoreVirtualCurrencyPurchase(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreVirtualCurrencyPurchase storeVirtualCurrencyPurchase = new StoreVirtualCurrencyPurchase();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeVirtualCurrencyPurchase.DeserializeMessage(array);
			return storeVirtualCurrencyPurchase;
		}

		// Token: 0x0600212B RID: 8491 RVA: 0x000D2B40 File Offset: 0x000D0D40
		public static List<StoreVirtualCurrencyPurchase> ReadListStoreVirtualCurrencyPurchase(byte[] data, ref int offset)
		{
			List<StoreVirtualCurrencyPurchase> list = new List<StoreVirtualCurrencyPurchase>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreVirtualCurrencyPurchase item = ArrayManager.ReadStoreVirtualCurrencyPurchase(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600212C RID: 8492 RVA: 0x000D2B84 File Offset: 0x000D0D84
		public static void WriteQuestAward(ref byte[] data, ref int offset, QuestAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600212D RID: 8493 RVA: 0x000D2BA0 File Offset: 0x000D0DA0
		public static void WriteListQuestAward(ref byte[] data, ref int offset, List<QuestAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (QuestAward value in values)
			{
				ArrayManager.WriteQuestAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600212E RID: 8494 RVA: 0x000D2C1C File Offset: 0x000D0E1C
		public static QuestAward ReadQuestAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			QuestAward questAward = new QuestAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			questAward.DeserializeMessage(array);
			return questAward;
		}

		// Token: 0x0600212F RID: 8495 RVA: 0x000D2C60 File Offset: 0x000D0E60
		public static List<QuestAward> ReadListQuestAward(byte[] data, ref int offset)
		{
			List<QuestAward> list = new List<QuestAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				QuestAward item = ArrayManager.ReadQuestAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002130 RID: 8496 RVA: 0x000D2CA4 File Offset: 0x000D0EA4
		public static void WriteQuestAwardChestItem(ref byte[] data, ref int offset, QuestAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002131 RID: 8497 RVA: 0x000D2CC0 File Offset: 0x000D0EC0
		public static void WriteListQuestAwardChestItem(ref byte[] data, ref int offset, List<QuestAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (QuestAwardChestItem value in values)
			{
				ArrayManager.WriteQuestAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002132 RID: 8498 RVA: 0x000D2D3C File Offset: 0x000D0F3C
		public static QuestAwardChestItem ReadQuestAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			QuestAwardChestItem questAwardChestItem = new QuestAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			questAwardChestItem.DeserializeMessage(array);
			return questAwardChestItem;
		}

		// Token: 0x06002133 RID: 8499 RVA: 0x000D2D80 File Offset: 0x000D0F80
		public static List<QuestAwardChestItem> ReadListQuestAwardChestItem(byte[] data, ref int offset)
		{
			List<QuestAwardChestItem> list = new List<QuestAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				QuestAwardChestItem item = ArrayManager.ReadQuestAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002134 RID: 8500 RVA: 0x000D2DC4 File Offset: 0x000D0FC4
		public static void WriteAchievementAward(ref byte[] data, ref int offset, AchievementAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002135 RID: 8501 RVA: 0x000D2DE0 File Offset: 0x000D0FE0
		public static void WriteListAchievementAward(ref byte[] data, ref int offset, List<AchievementAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementAward value in values)
			{
				ArrayManager.WriteAchievementAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002136 RID: 8502 RVA: 0x000D2E5C File Offset: 0x000D105C
		public static AchievementAward ReadAchievementAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementAward achievementAward = new AchievementAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementAward.DeserializeMessage(array);
			return achievementAward;
		}

		// Token: 0x06002137 RID: 8503 RVA: 0x000D2EA0 File Offset: 0x000D10A0
		public static List<AchievementAward> ReadListAchievementAward(byte[] data, ref int offset)
		{
			List<AchievementAward> list = new List<AchievementAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementAward item = ArrayManager.ReadAchievementAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002138 RID: 8504 RVA: 0x000D2EE4 File Offset: 0x000D10E4
		public static void WriteAchievementAwardChestItem(ref byte[] data, ref int offset, AchievementAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002139 RID: 8505 RVA: 0x000D2F00 File Offset: 0x000D1100
		public static void WriteListAchievementAwardChestItem(ref byte[] data, ref int offset, List<AchievementAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementAwardChestItem value in values)
			{
				ArrayManager.WriteAchievementAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600213A RID: 8506 RVA: 0x000D2F7C File Offset: 0x000D117C
		public static AchievementAwardChestItem ReadAchievementAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementAwardChestItem achievementAwardChestItem = new AchievementAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementAwardChestItem.DeserializeMessage(array);
			return achievementAwardChestItem;
		}

		// Token: 0x0600213B RID: 8507 RVA: 0x000D2FC0 File Offset: 0x000D11C0
		public static List<AchievementAwardChestItem> ReadListAchievementAwardChestItem(byte[] data, ref int offset)
		{
			List<AchievementAwardChestItem> list = new List<AchievementAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementAwardChestItem item = ArrayManager.ReadAchievementAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600213C RID: 8508 RVA: 0x000D3004 File Offset: 0x000D1204
		public static void WriteAchievementAwardKeystoneItem(ref byte[] data, ref int offset, AchievementAwardKeystoneItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600213D RID: 8509 RVA: 0x000D3020 File Offset: 0x000D1220
		public static void WriteListAchievementAwardKeystoneItem(ref byte[] data, ref int offset, List<AchievementAwardKeystoneItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementAwardKeystoneItem value in values)
			{
				ArrayManager.WriteAchievementAwardKeystoneItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600213E RID: 8510 RVA: 0x000D309C File Offset: 0x000D129C
		public static AchievementAwardKeystoneItem ReadAchievementAwardKeystoneItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementAwardKeystoneItem achievementAwardKeystoneItem = new AchievementAwardKeystoneItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementAwardKeystoneItem.DeserializeMessage(array);
			return achievementAwardKeystoneItem;
		}

		// Token: 0x0600213F RID: 8511 RVA: 0x000D30E0 File Offset: 0x000D12E0
		public static List<AchievementAwardKeystoneItem> ReadListAchievementAwardKeystoneItem(byte[] data, ref int offset)
		{
			List<AchievementAwardKeystoneItem> list = new List<AchievementAwardKeystoneItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementAwardKeystoneItem item = ArrayManager.ReadAchievementAwardKeystoneItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002140 RID: 8512 RVA: 0x000D3124 File Offset: 0x000D1324
		public static void WriteAchievementAwardItem(ref byte[] data, ref int offset, AchievementAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002141 RID: 8513 RVA: 0x000D3140 File Offset: 0x000D1340
		public static void WriteListAchievementAwardItem(ref byte[] data, ref int offset, List<AchievementAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementAwardItem value in values)
			{
				ArrayManager.WriteAchievementAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002142 RID: 8514 RVA: 0x000D31BC File Offset: 0x000D13BC
		public static AchievementAwardItem ReadAchievementAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementAwardItem achievementAwardItem = new AchievementAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementAwardItem.DeserializeMessage(array);
			return achievementAwardItem;
		}

		// Token: 0x06002143 RID: 8515 RVA: 0x000D3200 File Offset: 0x000D1400
		public static List<AchievementAwardItem> ReadListAchievementAwardItem(byte[] data, ref int offset)
		{
			List<AchievementAwardItem> list = new List<AchievementAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementAwardItem item = ArrayManager.ReadAchievementAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002144 RID: 8516 RVA: 0x000D3244 File Offset: 0x000D1444
		public static void WriteStarAwards(ref byte[] data, ref int offset, StarAwards value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002145 RID: 8517 RVA: 0x000D3260 File Offset: 0x000D1460
		public static void WriteListStarAwards(ref byte[] data, ref int offset, List<StarAwards> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StarAwards value in values)
			{
				ArrayManager.WriteStarAwards(ref data, ref offset, value);
			}
		}

		// Token: 0x06002146 RID: 8518 RVA: 0x000D32DC File Offset: 0x000D14DC
		public static StarAwards ReadStarAwards(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StarAwards starAwards = new StarAwards();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			starAwards.DeserializeMessage(array);
			return starAwards;
		}

		// Token: 0x06002147 RID: 8519 RVA: 0x000D3320 File Offset: 0x000D1520
		public static List<StarAwards> ReadListStarAwards(byte[] data, ref int offset)
		{
			List<StarAwards> list = new List<StarAwards>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StarAwards item = ArrayManager.ReadStarAwards(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002148 RID: 8520 RVA: 0x000D3364 File Offset: 0x000D1564
		public static void WriteStarAwardChestItem(ref byte[] data, ref int offset, StarAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002149 RID: 8521 RVA: 0x000D3380 File Offset: 0x000D1580
		public static void WriteListStarAwardChestItem(ref byte[] data, ref int offset, List<StarAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StarAwardChestItem value in values)
			{
				ArrayManager.WriteStarAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600214A RID: 8522 RVA: 0x000D33FC File Offset: 0x000D15FC
		public static StarAwardChestItem ReadStarAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StarAwardChestItem starAwardChestItem = new StarAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			starAwardChestItem.DeserializeMessage(array);
			return starAwardChestItem;
		}

		// Token: 0x0600214B RID: 8523 RVA: 0x000D3440 File Offset: 0x000D1640
		public static List<StarAwardChestItem> ReadListStarAwardChestItem(byte[] data, ref int offset)
		{
			List<StarAwardChestItem> list = new List<StarAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StarAwardChestItem item = ArrayManager.ReadStarAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600214C RID: 8524 RVA: 0x000D3484 File Offset: 0x000D1684
		public static void WriteDailyLoginAwardChestItem(ref byte[] data, ref int offset, DailyLoginAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600214D RID: 8525 RVA: 0x000D34A0 File Offset: 0x000D16A0
		public static void WriteListDailyLoginAwardChestItem(ref byte[] data, ref int offset, List<DailyLoginAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DailyLoginAwardChestItem value in values)
			{
				ArrayManager.WriteDailyLoginAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600214E RID: 8526 RVA: 0x000D351C File Offset: 0x000D171C
		public static DailyLoginAwardChestItem ReadDailyLoginAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DailyLoginAwardChestItem dailyLoginAwardChestItem = new DailyLoginAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dailyLoginAwardChestItem.DeserializeMessage(array);
			return dailyLoginAwardChestItem;
		}

		// Token: 0x0600214F RID: 8527 RVA: 0x000D3560 File Offset: 0x000D1760
		public static List<DailyLoginAwardChestItem> ReadListDailyLoginAwardChestItem(byte[] data, ref int offset)
		{
			List<DailyLoginAwardChestItem> list = new List<DailyLoginAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DailyLoginAwardChestItem item = ArrayManager.ReadDailyLoginAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002150 RID: 8528 RVA: 0x000D35A4 File Offset: 0x000D17A4
		public static void WriteHeroWinAwardChestItem(ref byte[] data, ref int offset, HeroWinAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002151 RID: 8529 RVA: 0x000D35C0 File Offset: 0x000D17C0
		public static void WriteListHeroWinAwardChestItem(ref byte[] data, ref int offset, List<HeroWinAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroWinAwardChestItem value in values)
			{
				ArrayManager.WriteHeroWinAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002152 RID: 8530 RVA: 0x000D363C File Offset: 0x000D183C
		public static HeroWinAwardChestItem ReadHeroWinAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroWinAwardChestItem heroWinAwardChestItem = new HeroWinAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroWinAwardChestItem.DeserializeMessage(array);
			return heroWinAwardChestItem;
		}

		// Token: 0x06002153 RID: 8531 RVA: 0x000D3680 File Offset: 0x000D1880
		public static List<HeroWinAwardChestItem> ReadListHeroWinAwardChestItem(byte[] data, ref int offset)
		{
			List<HeroWinAwardChestItem> list = new List<HeroWinAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroWinAwardChestItem item = ArrayManager.ReadHeroWinAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002154 RID: 8532 RVA: 0x000D36C4 File Offset: 0x000D18C4
		public static void WriteReferralMessageItemAward(ref byte[] data, ref int offset, ReferralMessageItemAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002155 RID: 8533 RVA: 0x000D36E0 File Offset: 0x000D18E0
		public static void WriteListReferralMessageItemAward(ref byte[] data, ref int offset, List<ReferralMessageItemAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ReferralMessageItemAward value in values)
			{
				ArrayManager.WriteReferralMessageItemAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002156 RID: 8534 RVA: 0x000D375C File Offset: 0x000D195C
		public static ReferralMessageItemAward ReadReferralMessageItemAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ReferralMessageItemAward referralMessageItemAward = new ReferralMessageItemAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			referralMessageItemAward.DeserializeMessage(array);
			return referralMessageItemAward;
		}

		// Token: 0x06002157 RID: 8535 RVA: 0x000D37A0 File Offset: 0x000D19A0
		public static List<ReferralMessageItemAward> ReadListReferralMessageItemAward(byte[] data, ref int offset)
		{
			List<ReferralMessageItemAward> list = new List<ReferralMessageItemAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ReferralMessageItemAward item = ArrayManager.ReadReferralMessageItemAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002158 RID: 8536 RVA: 0x000D37E4 File Offset: 0x000D19E4
		public static void WriteGuildAward(ref byte[] data, ref int offset, GuildAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002159 RID: 8537 RVA: 0x000D3800 File Offset: 0x000D1A00
		public static void WriteListGuildAward(ref byte[] data, ref int offset, List<GuildAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildAward value in values)
			{
				ArrayManager.WriteGuildAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600215A RID: 8538 RVA: 0x000D387C File Offset: 0x000D1A7C
		public static GuildAward ReadGuildAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildAward guildAward = new GuildAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildAward.DeserializeMessage(array);
			return guildAward;
		}

		// Token: 0x0600215B RID: 8539 RVA: 0x000D38C0 File Offset: 0x000D1AC0
		public static List<GuildAward> ReadListGuildAward(byte[] data, ref int offset)
		{
			List<GuildAward> list = new List<GuildAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildAward item = ArrayManager.ReadGuildAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600215C RID: 8540 RVA: 0x000D3904 File Offset: 0x000D1B04
		public static void WriteGuildCreationAward(ref byte[] data, ref int offset, GuildCreationAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600215D RID: 8541 RVA: 0x000D3920 File Offset: 0x000D1B20
		public static void WriteListGuildCreationAward(ref byte[] data, ref int offset, List<GuildCreationAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildCreationAward value in values)
			{
				ArrayManager.WriteGuildCreationAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600215E RID: 8542 RVA: 0x000D399C File Offset: 0x000D1B9C
		public static GuildCreationAward ReadGuildCreationAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildCreationAward guildCreationAward = new GuildCreationAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildCreationAward.DeserializeMessage(array);
			return guildCreationAward;
		}

		// Token: 0x0600215F RID: 8543 RVA: 0x000D39E0 File Offset: 0x000D1BE0
		public static List<GuildCreationAward> ReadListGuildCreationAward(byte[] data, ref int offset)
		{
			List<GuildCreationAward> list = new List<GuildCreationAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildCreationAward item = ArrayManager.ReadGuildCreationAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002160 RID: 8544 RVA: 0x000D3A24 File Offset: 0x000D1C24
		public static void WriteChallengeAward(ref byte[] data, ref int offset, ChallengeAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002161 RID: 8545 RVA: 0x000D3A40 File Offset: 0x000D1C40
		public static void WriteListChallengeAward(ref byte[] data, ref int offset, List<ChallengeAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ChallengeAward value in values)
			{
				ArrayManager.WriteChallengeAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002162 RID: 8546 RVA: 0x000D3ABC File Offset: 0x000D1CBC
		public static ChallengeAward ReadChallengeAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ChallengeAward challengeAward = new ChallengeAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			challengeAward.DeserializeMessage(array);
			return challengeAward;
		}

		// Token: 0x06002163 RID: 8547 RVA: 0x000D3B00 File Offset: 0x000D1D00
		public static List<ChallengeAward> ReadListChallengeAward(byte[] data, ref int offset)
		{
			List<ChallengeAward> list = new List<ChallengeAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ChallengeAward item = ArrayManager.ReadChallengeAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002164 RID: 8548 RVA: 0x000D3B44 File Offset: 0x000D1D44
		public static void WriteOpsUtilAward(ref byte[] data, ref int offset, OpsUtilAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002165 RID: 8549 RVA: 0x000D3B60 File Offset: 0x000D1D60
		public static void WriteListOpsUtilAward(ref byte[] data, ref int offset, List<OpsUtilAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (OpsUtilAward value in values)
			{
				ArrayManager.WriteOpsUtilAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002166 RID: 8550 RVA: 0x000D3BDC File Offset: 0x000D1DDC
		public static OpsUtilAward ReadOpsUtilAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			OpsUtilAward opsUtilAward = new OpsUtilAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			opsUtilAward.DeserializeMessage(array);
			return opsUtilAward;
		}

		// Token: 0x06002167 RID: 8551 RVA: 0x000D3C20 File Offset: 0x000D1E20
		public static List<OpsUtilAward> ReadListOpsUtilAward(byte[] data, ref int offset)
		{
			List<OpsUtilAward> list = new List<OpsUtilAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				OpsUtilAward item = ArrayManager.ReadOpsUtilAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002168 RID: 8552 RVA: 0x000D3C64 File Offset: 0x000D1E64
		public static void WriteLevelUnlockAward(ref byte[] data, ref int offset, LevelUnlockAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002169 RID: 8553 RVA: 0x000D3C80 File Offset: 0x000D1E80
		public static void WriteListLevelUnlockAward(ref byte[] data, ref int offset, List<LevelUnlockAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LevelUnlockAward value in values)
			{
				ArrayManager.WriteLevelUnlockAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600216A RID: 8554 RVA: 0x000D3CFC File Offset: 0x000D1EFC
		public static LevelUnlockAward ReadLevelUnlockAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LevelUnlockAward levelUnlockAward = new LevelUnlockAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			levelUnlockAward.DeserializeMessage(array);
			return levelUnlockAward;
		}

		// Token: 0x0600216B RID: 8555 RVA: 0x000D3D40 File Offset: 0x000D1F40
		public static List<LevelUnlockAward> ReadListLevelUnlockAward(byte[] data, ref int offset)
		{
			List<LevelUnlockAward> list = new List<LevelUnlockAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LevelUnlockAward item = ArrayManager.ReadLevelUnlockAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600216C RID: 8556 RVA: 0x000D3D84 File Offset: 0x000D1F84
		public static void WriteGameCodeAward(ref byte[] data, ref int offset, GameCodeAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600216D RID: 8557 RVA: 0x000D3DA0 File Offset: 0x000D1FA0
		public static void WriteListGameCodeAward(ref byte[] data, ref int offset, List<GameCodeAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GameCodeAward value in values)
			{
				ArrayManager.WriteGameCodeAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600216E RID: 8558 RVA: 0x000D3E1C File Offset: 0x000D201C
		public static GameCodeAward ReadGameCodeAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GameCodeAward gameCodeAward = new GameCodeAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gameCodeAward.DeserializeMessage(array);
			return gameCodeAward;
		}

		// Token: 0x0600216F RID: 8559 RVA: 0x000D3E60 File Offset: 0x000D2060
		public static List<GameCodeAward> ReadListGameCodeAward(byte[] data, ref int offset)
		{
			List<GameCodeAward> list = new List<GameCodeAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GameCodeAward item = ArrayManager.ReadGameCodeAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002170 RID: 8560 RVA: 0x000D3EA4 File Offset: 0x000D20A4
		public static void WriteRevokeSteamDLCAward(ref byte[] data, ref int offset, RevokeSteamDLCAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002171 RID: 8561 RVA: 0x000D3EC0 File Offset: 0x000D20C0
		public static void WriteListRevokeSteamDLCAward(ref byte[] data, ref int offset, List<RevokeSteamDLCAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RevokeSteamDLCAward value in values)
			{
				ArrayManager.WriteRevokeSteamDLCAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002172 RID: 8562 RVA: 0x000D3F3C File Offset: 0x000D213C
		public static RevokeSteamDLCAward ReadRevokeSteamDLCAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RevokeSteamDLCAward revokeSteamDLCAward = new RevokeSteamDLCAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			revokeSteamDLCAward.DeserializeMessage(array);
			return revokeSteamDLCAward;
		}

		// Token: 0x06002173 RID: 8563 RVA: 0x000D3F80 File Offset: 0x000D2180
		public static List<RevokeSteamDLCAward> ReadListRevokeSteamDLCAward(byte[] data, ref int offset)
		{
			List<RevokeSteamDLCAward> list = new List<RevokeSteamDLCAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RevokeSteamDLCAward item = ArrayManager.ReadRevokeSteamDLCAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002174 RID: 8564 RVA: 0x000D3FC4 File Offset: 0x000D21C4
		public static void WriteBucketUnlockAward(ref byte[] data, ref int offset, BucketUnlockAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002175 RID: 8565 RVA: 0x000D3FE0 File Offset: 0x000D21E0
		public static void WriteListBucketUnlockAward(ref byte[] data, ref int offset, List<BucketUnlockAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BucketUnlockAward value in values)
			{
				ArrayManager.WriteBucketUnlockAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002176 RID: 8566 RVA: 0x000D405C File Offset: 0x000D225C
		public static BucketUnlockAward ReadBucketUnlockAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BucketUnlockAward bucketUnlockAward = new BucketUnlockAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			bucketUnlockAward.DeserializeMessage(array);
			return bucketUnlockAward;
		}

		// Token: 0x06002177 RID: 8567 RVA: 0x000D40A0 File Offset: 0x000D22A0
		public static List<BucketUnlockAward> ReadListBucketUnlockAward(byte[] data, ref int offset)
		{
			List<BucketUnlockAward> list = new List<BucketUnlockAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BucketUnlockAward item = ArrayManager.ReadBucketUnlockAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002178 RID: 8568 RVA: 0x000D40E4 File Offset: 0x000D22E4
		public static void WriteHeroicDyeAwardItem(ref byte[] data, ref int offset, HeroicDyeAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002179 RID: 8569 RVA: 0x000D4100 File Offset: 0x000D2300
		public static void WriteListHeroicDyeAwardItem(ref byte[] data, ref int offset, List<HeroicDyeAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroicDyeAwardItem value in values)
			{
				ArrayManager.WriteHeroicDyeAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600217A RID: 8570 RVA: 0x000D417C File Offset: 0x000D237C
		public static HeroicDyeAwardItem ReadHeroicDyeAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroicDyeAwardItem heroicDyeAwardItem = new HeroicDyeAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroicDyeAwardItem.DeserializeMessage(array);
			return heroicDyeAwardItem;
		}

		// Token: 0x0600217B RID: 8571 RVA: 0x000D41C0 File Offset: 0x000D23C0
		public static List<HeroicDyeAwardItem> ReadListHeroicDyeAwardItem(byte[] data, ref int offset)
		{
			List<HeroicDyeAwardItem> list = new List<HeroicDyeAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroicDyeAwardItem item = ArrayManager.ReadHeroicDyeAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600217C RID: 8572 RVA: 0x000D4204 File Offset: 0x000D2404
		public static void WriteVIPSlotUnlockAward(ref byte[] data, ref int offset, VIPSlotUnlockAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600217D RID: 8573 RVA: 0x000D4220 File Offset: 0x000D2420
		public static void WriteListVIPSlotUnlockAward(ref byte[] data, ref int offset, List<VIPSlotUnlockAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (VIPSlotUnlockAward value in values)
			{
				ArrayManager.WriteVIPSlotUnlockAward(ref data, ref offset, value);
			}
		}

		// Token: 0x0600217E RID: 8574 RVA: 0x000D429C File Offset: 0x000D249C
		public static VIPSlotUnlockAward ReadVIPSlotUnlockAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			VIPSlotUnlockAward vipslotUnlockAward = new VIPSlotUnlockAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			vipslotUnlockAward.DeserializeMessage(array);
			return vipslotUnlockAward;
		}

		// Token: 0x0600217F RID: 8575 RVA: 0x000D42E0 File Offset: 0x000D24E0
		public static List<VIPSlotUnlockAward> ReadListVIPSlotUnlockAward(byte[] data, ref int offset)
		{
			List<VIPSlotUnlockAward> list = new List<VIPSlotUnlockAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				VIPSlotUnlockAward item = ArrayManager.ReadVIPSlotUnlockAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002180 RID: 8576 RVA: 0x000D4324 File Offset: 0x000D2524
		public static void WriteKeystoneWinAward(ref byte[] data, ref int offset, KeystoneWinAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002181 RID: 8577 RVA: 0x000D4340 File Offset: 0x000D2540
		public static void WriteListKeystoneWinAward(ref byte[] data, ref int offset, List<KeystoneWinAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneWinAward value in values)
			{
				ArrayManager.WriteKeystoneWinAward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002182 RID: 8578 RVA: 0x000D43BC File Offset: 0x000D25BC
		public static KeystoneWinAward ReadKeystoneWinAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneWinAward keystoneWinAward = new KeystoneWinAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneWinAward.DeserializeMessage(array);
			return keystoneWinAward;
		}

		// Token: 0x06002183 RID: 8579 RVA: 0x000D4400 File Offset: 0x000D2600
		public static List<KeystoneWinAward> ReadListKeystoneWinAward(byte[] data, ref int offset)
		{
			List<KeystoneWinAward> list = new List<KeystoneWinAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneWinAward item = ArrayManager.ReadKeystoneWinAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002184 RID: 8580 RVA: 0x000D4444 File Offset: 0x000D2644
		public static void WritePlayerMessageCommunityEventFullAwardItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventFullAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002185 RID: 8581 RVA: 0x000D4460 File Offset: 0x000D2660
		public static void WriteListPlayerMessageCommunityEventFullAwardItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventFullAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventFullAwardItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventFullAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002186 RID: 8582 RVA: 0x000D44DC File Offset: 0x000D26DC
		public static PlayerMessageCommunityEventFullAwardItem ReadPlayerMessageCommunityEventFullAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventFullAwardItem playerMessageCommunityEventFullAwardItem = new PlayerMessageCommunityEventFullAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventFullAwardItem.DeserializeMessage(array);
			return playerMessageCommunityEventFullAwardItem;
		}

		// Token: 0x06002187 RID: 8583 RVA: 0x000D4520 File Offset: 0x000D2720
		public static List<PlayerMessageCommunityEventFullAwardItem> ReadListPlayerMessageCommunityEventFullAwardItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventFullAwardItem> list = new List<PlayerMessageCommunityEventFullAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventFullAwardItem item = ArrayManager.ReadPlayerMessageCommunityEventFullAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002188 RID: 8584 RVA: 0x000D4564 File Offset: 0x000D2764
		public static void WritePlayerMessageCommunityEventFullAwardChestItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventFullAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002189 RID: 8585 RVA: 0x000D4580 File Offset: 0x000D2780
		public static void WriteListPlayerMessageCommunityEventFullAwardChestItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventFullAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventFullAwardChestItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventFullAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600218A RID: 8586 RVA: 0x000D45FC File Offset: 0x000D27FC
		public static PlayerMessageCommunityEventFullAwardChestItem ReadPlayerMessageCommunityEventFullAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventFullAwardChestItem playerMessageCommunityEventFullAwardChestItem = new PlayerMessageCommunityEventFullAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventFullAwardChestItem.DeserializeMessage(array);
			return playerMessageCommunityEventFullAwardChestItem;
		}

		// Token: 0x0600218B RID: 8587 RVA: 0x000D4640 File Offset: 0x000D2840
		public static List<PlayerMessageCommunityEventFullAwardChestItem> ReadListPlayerMessageCommunityEventFullAwardChestItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventFullAwardChestItem> list = new List<PlayerMessageCommunityEventFullAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventFullAwardChestItem item = ArrayManager.ReadPlayerMessageCommunityEventFullAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600218C RID: 8588 RVA: 0x000D4684 File Offset: 0x000D2884
		public static void WritePlayerMessageCommunityEventPartialAwardItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventPartialAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600218D RID: 8589 RVA: 0x000D46A0 File Offset: 0x000D28A0
		public static void WriteListPlayerMessageCommunityEventPartialAwardItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventPartialAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventPartialAwardItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventPartialAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600218E RID: 8590 RVA: 0x000D471C File Offset: 0x000D291C
		public static PlayerMessageCommunityEventPartialAwardItem ReadPlayerMessageCommunityEventPartialAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventPartialAwardItem playerMessageCommunityEventPartialAwardItem = new PlayerMessageCommunityEventPartialAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventPartialAwardItem.DeserializeMessage(array);
			return playerMessageCommunityEventPartialAwardItem;
		}

		// Token: 0x0600218F RID: 8591 RVA: 0x000D4760 File Offset: 0x000D2960
		public static List<PlayerMessageCommunityEventPartialAwardItem> ReadListPlayerMessageCommunityEventPartialAwardItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventPartialAwardItem> list = new List<PlayerMessageCommunityEventPartialAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventPartialAwardItem item = ArrayManager.ReadPlayerMessageCommunityEventPartialAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002190 RID: 8592 RVA: 0x000D47A4 File Offset: 0x000D29A4
		public static void WritePlayerMessageCommunityEventPartialAwardChestItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventPartialAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002191 RID: 8593 RVA: 0x000D47C0 File Offset: 0x000D29C0
		public static void WriteListPlayerMessageCommunityEventPartialAwardChestItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventPartialAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventPartialAwardChestItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventPartialAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002192 RID: 8594 RVA: 0x000D483C File Offset: 0x000D2A3C
		public static PlayerMessageCommunityEventPartialAwardChestItem ReadPlayerMessageCommunityEventPartialAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventPartialAwardChestItem playerMessageCommunityEventPartialAwardChestItem = new PlayerMessageCommunityEventPartialAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventPartialAwardChestItem.DeserializeMessage(array);
			return playerMessageCommunityEventPartialAwardChestItem;
		}

		// Token: 0x06002193 RID: 8595 RVA: 0x000D4880 File Offset: 0x000D2A80
		public static List<PlayerMessageCommunityEventPartialAwardChestItem> ReadListPlayerMessageCommunityEventPartialAwardChestItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventPartialAwardChestItem> list = new List<PlayerMessageCommunityEventPartialAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventPartialAwardChestItem item = ArrayManager.ReadPlayerMessageCommunityEventPartialAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002194 RID: 8596 RVA: 0x000D48C4 File Offset: 0x000D2AC4
		public static void WritePlayerMessageCommunityEventGoalAwardItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventGoalAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002195 RID: 8597 RVA: 0x000D48E0 File Offset: 0x000D2AE0
		public static void WriteListPlayerMessageCommunityEventGoalAwardItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventGoalAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventGoalAwardItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventGoalAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002196 RID: 8598 RVA: 0x000D495C File Offset: 0x000D2B5C
		public static PlayerMessageCommunityEventGoalAwardItem ReadPlayerMessageCommunityEventGoalAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventGoalAwardItem playerMessageCommunityEventGoalAwardItem = new PlayerMessageCommunityEventGoalAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventGoalAwardItem.DeserializeMessage(array);
			return playerMessageCommunityEventGoalAwardItem;
		}

		// Token: 0x06002197 RID: 8599 RVA: 0x000D49A0 File Offset: 0x000D2BA0
		public static List<PlayerMessageCommunityEventGoalAwardItem> ReadListPlayerMessageCommunityEventGoalAwardItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventGoalAwardItem> list = new List<PlayerMessageCommunityEventGoalAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventGoalAwardItem item = ArrayManager.ReadPlayerMessageCommunityEventGoalAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002198 RID: 8600 RVA: 0x000D49E4 File Offset: 0x000D2BE4
		public static void WritePlayerMessageCommunityEventGoalAwardChestItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventGoalAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002199 RID: 8601 RVA: 0x000D4A00 File Offset: 0x000D2C00
		public static void WriteListPlayerMessageCommunityEventGoalAwardChestItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventGoalAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventGoalAwardChestItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventGoalAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600219A RID: 8602 RVA: 0x000D4A7C File Offset: 0x000D2C7C
		public static PlayerMessageCommunityEventGoalAwardChestItem ReadPlayerMessageCommunityEventGoalAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventGoalAwardChestItem playerMessageCommunityEventGoalAwardChestItem = new PlayerMessageCommunityEventGoalAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventGoalAwardChestItem.DeserializeMessage(array);
			return playerMessageCommunityEventGoalAwardChestItem;
		}

		// Token: 0x0600219B RID: 8603 RVA: 0x000D4AC0 File Offset: 0x000D2CC0
		public static List<PlayerMessageCommunityEventGoalAwardChestItem> ReadListPlayerMessageCommunityEventGoalAwardChestItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventGoalAwardChestItem> list = new List<PlayerMessageCommunityEventGoalAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventGoalAwardChestItem item = ArrayManager.ReadPlayerMessageCommunityEventGoalAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600219C RID: 8604 RVA: 0x000D4B04 File Offset: 0x000D2D04
		public static void WritePlayerMessageCommunityEventIndividualContributionAwardItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventIndividualContributionAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600219D RID: 8605 RVA: 0x000D4B20 File Offset: 0x000D2D20
		public static void WriteListPlayerMessageCommunityEventIndividualContributionAwardItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventIndividualContributionAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventIndividualContributionAwardItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventIndividualContributionAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600219E RID: 8606 RVA: 0x000D4B9C File Offset: 0x000D2D9C
		public static PlayerMessageCommunityEventIndividualContributionAwardItem ReadPlayerMessageCommunityEventIndividualContributionAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventIndividualContributionAwardItem playerMessageCommunityEventIndividualContributionAwardItem = new PlayerMessageCommunityEventIndividualContributionAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventIndividualContributionAwardItem.DeserializeMessage(array);
			return playerMessageCommunityEventIndividualContributionAwardItem;
		}

		// Token: 0x0600219F RID: 8607 RVA: 0x000D4BE0 File Offset: 0x000D2DE0
		public static List<PlayerMessageCommunityEventIndividualContributionAwardItem> ReadListPlayerMessageCommunityEventIndividualContributionAwardItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventIndividualContributionAwardItem> list = new List<PlayerMessageCommunityEventIndividualContributionAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventIndividualContributionAwardItem item = ArrayManager.ReadPlayerMessageCommunityEventIndividualContributionAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021A0 RID: 8608 RVA: 0x000D4C24 File Offset: 0x000D2E24
		public static void WritePlayerMessageCommunityEventIndividualContributionAwardChestItem(ref byte[] data, ref int offset, PlayerMessageCommunityEventIndividualContributionAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021A1 RID: 8609 RVA: 0x000D4C40 File Offset: 0x000D2E40
		public static void WriteListPlayerMessageCommunityEventIndividualContributionAwardChestItem(ref byte[] data, ref int offset, List<PlayerMessageCommunityEventIndividualContributionAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMessageCommunityEventIndividualContributionAwardChestItem value in values)
			{
				ArrayManager.WritePlayerMessageCommunityEventIndividualContributionAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021A2 RID: 8610 RVA: 0x000D4CBC File Offset: 0x000D2EBC
		public static PlayerMessageCommunityEventIndividualContributionAwardChestItem ReadPlayerMessageCommunityEventIndividualContributionAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMessageCommunityEventIndividualContributionAwardChestItem playerMessageCommunityEventIndividualContributionAwardChestItem = new PlayerMessageCommunityEventIndividualContributionAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMessageCommunityEventIndividualContributionAwardChestItem.DeserializeMessage(array);
			return playerMessageCommunityEventIndividualContributionAwardChestItem;
		}

		// Token: 0x060021A3 RID: 8611 RVA: 0x000D4D00 File Offset: 0x000D2F00
		public static List<PlayerMessageCommunityEventIndividualContributionAwardChestItem> ReadListPlayerMessageCommunityEventIndividualContributionAwardChestItem(byte[] data, ref int offset)
		{
			List<PlayerMessageCommunityEventIndividualContributionAwardChestItem> list = new List<PlayerMessageCommunityEventIndividualContributionAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMessageCommunityEventIndividualContributionAwardChestItem item = ArrayManager.ReadPlayerMessageCommunityEventIndividualContributionAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021A4 RID: 8612 RVA: 0x000D4D44 File Offset: 0x000D2F44
		public static void WriteCommunityEventFullAwardItem(ref byte[] data, ref int offset, CommunityEventFullAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021A5 RID: 8613 RVA: 0x000D4D60 File Offset: 0x000D2F60
		public static void WriteListCommunityEventFullAwardItem(ref byte[] data, ref int offset, List<CommunityEventFullAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventFullAwardItem value in values)
			{
				ArrayManager.WriteCommunityEventFullAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021A6 RID: 8614 RVA: 0x000D4DDC File Offset: 0x000D2FDC
		public static CommunityEventFullAwardItem ReadCommunityEventFullAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventFullAwardItem communityEventFullAwardItem = new CommunityEventFullAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventFullAwardItem.DeserializeMessage(array);
			return communityEventFullAwardItem;
		}

		// Token: 0x060021A7 RID: 8615 RVA: 0x000D4E20 File Offset: 0x000D3020
		public static List<CommunityEventFullAwardItem> ReadListCommunityEventFullAwardItem(byte[] data, ref int offset)
		{
			List<CommunityEventFullAwardItem> list = new List<CommunityEventFullAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventFullAwardItem item = ArrayManager.ReadCommunityEventFullAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021A8 RID: 8616 RVA: 0x000D4E64 File Offset: 0x000D3064
		public static void WriteCommunityEventFullAwardChestItem(ref byte[] data, ref int offset, CommunityEventFullAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021A9 RID: 8617 RVA: 0x000D4E80 File Offset: 0x000D3080
		public static void WriteListCommunityEventFullAwardChestItem(ref byte[] data, ref int offset, List<CommunityEventFullAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventFullAwardChestItem value in values)
			{
				ArrayManager.WriteCommunityEventFullAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021AA RID: 8618 RVA: 0x000D4EFC File Offset: 0x000D30FC
		public static CommunityEventFullAwardChestItem ReadCommunityEventFullAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventFullAwardChestItem communityEventFullAwardChestItem = new CommunityEventFullAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventFullAwardChestItem.DeserializeMessage(array);
			return communityEventFullAwardChestItem;
		}

		// Token: 0x060021AB RID: 8619 RVA: 0x000D4F40 File Offset: 0x000D3140
		public static List<CommunityEventFullAwardChestItem> ReadListCommunityEventFullAwardChestItem(byte[] data, ref int offset)
		{
			List<CommunityEventFullAwardChestItem> list = new List<CommunityEventFullAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventFullAwardChestItem item = ArrayManager.ReadCommunityEventFullAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021AC RID: 8620 RVA: 0x000D4F84 File Offset: 0x000D3184
		public static void WriteCommunityEventPartialAwardItem(ref byte[] data, ref int offset, CommunityEventPartialAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021AD RID: 8621 RVA: 0x000D4FA0 File Offset: 0x000D31A0
		public static void WriteListCommunityEventPartialAwardItem(ref byte[] data, ref int offset, List<CommunityEventPartialAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventPartialAwardItem value in values)
			{
				ArrayManager.WriteCommunityEventPartialAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021AE RID: 8622 RVA: 0x000D501C File Offset: 0x000D321C
		public static CommunityEventPartialAwardItem ReadCommunityEventPartialAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventPartialAwardItem communityEventPartialAwardItem = new CommunityEventPartialAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventPartialAwardItem.DeserializeMessage(array);
			return communityEventPartialAwardItem;
		}

		// Token: 0x060021AF RID: 8623 RVA: 0x000D5060 File Offset: 0x000D3260
		public static List<CommunityEventPartialAwardItem> ReadListCommunityEventPartialAwardItem(byte[] data, ref int offset)
		{
			List<CommunityEventPartialAwardItem> list = new List<CommunityEventPartialAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventPartialAwardItem item = ArrayManager.ReadCommunityEventPartialAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021B0 RID: 8624 RVA: 0x000D50A4 File Offset: 0x000D32A4
		public static void WriteCommunityEventPartialAwardChestItem(ref byte[] data, ref int offset, CommunityEventPartialAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021B1 RID: 8625 RVA: 0x000D50C0 File Offset: 0x000D32C0
		public static void WriteListCommunityEventPartialAwardChestItem(ref byte[] data, ref int offset, List<CommunityEventPartialAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventPartialAwardChestItem value in values)
			{
				ArrayManager.WriteCommunityEventPartialAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021B2 RID: 8626 RVA: 0x000D513C File Offset: 0x000D333C
		public static CommunityEventPartialAwardChestItem ReadCommunityEventPartialAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventPartialAwardChestItem communityEventPartialAwardChestItem = new CommunityEventPartialAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventPartialAwardChestItem.DeserializeMessage(array);
			return communityEventPartialAwardChestItem;
		}

		// Token: 0x060021B3 RID: 8627 RVA: 0x000D5180 File Offset: 0x000D3380
		public static List<CommunityEventPartialAwardChestItem> ReadListCommunityEventPartialAwardChestItem(byte[] data, ref int offset)
		{
			List<CommunityEventPartialAwardChestItem> list = new List<CommunityEventPartialAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventPartialAwardChestItem item = ArrayManager.ReadCommunityEventPartialAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021B4 RID: 8628 RVA: 0x000D51C4 File Offset: 0x000D33C4
		public static void WriteCommunityEventGoalAwardItem(ref byte[] data, ref int offset, CommunityEventGoalAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021B5 RID: 8629 RVA: 0x000D51E0 File Offset: 0x000D33E0
		public static void WriteListCommunityEventGoalAwardItem(ref byte[] data, ref int offset, List<CommunityEventGoalAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventGoalAwardItem value in values)
			{
				ArrayManager.WriteCommunityEventGoalAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021B6 RID: 8630 RVA: 0x000D525C File Offset: 0x000D345C
		public static CommunityEventGoalAwardItem ReadCommunityEventGoalAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventGoalAwardItem communityEventGoalAwardItem = new CommunityEventGoalAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventGoalAwardItem.DeserializeMessage(array);
			return communityEventGoalAwardItem;
		}

		// Token: 0x060021B7 RID: 8631 RVA: 0x000D52A0 File Offset: 0x000D34A0
		public static List<CommunityEventGoalAwardItem> ReadListCommunityEventGoalAwardItem(byte[] data, ref int offset)
		{
			List<CommunityEventGoalAwardItem> list = new List<CommunityEventGoalAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventGoalAwardItem item = ArrayManager.ReadCommunityEventGoalAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021B8 RID: 8632 RVA: 0x000D52E4 File Offset: 0x000D34E4
		public static void WriteCommunityEventGoalAwardChestItem(ref byte[] data, ref int offset, CommunityEventGoalAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021B9 RID: 8633 RVA: 0x000D5300 File Offset: 0x000D3500
		public static void WriteListCommunityEventGoalAwardChestItem(ref byte[] data, ref int offset, List<CommunityEventGoalAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventGoalAwardChestItem value in values)
			{
				ArrayManager.WriteCommunityEventGoalAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021BA RID: 8634 RVA: 0x000D537C File Offset: 0x000D357C
		public static CommunityEventGoalAwardChestItem ReadCommunityEventGoalAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventGoalAwardChestItem communityEventGoalAwardChestItem = new CommunityEventGoalAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventGoalAwardChestItem.DeserializeMessage(array);
			return communityEventGoalAwardChestItem;
		}

		// Token: 0x060021BB RID: 8635 RVA: 0x000D53C0 File Offset: 0x000D35C0
		public static List<CommunityEventGoalAwardChestItem> ReadListCommunityEventGoalAwardChestItem(byte[] data, ref int offset)
		{
			List<CommunityEventGoalAwardChestItem> list = new List<CommunityEventGoalAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventGoalAwardChestItem item = ArrayManager.ReadCommunityEventGoalAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021BC RID: 8636 RVA: 0x000D5404 File Offset: 0x000D3604
		public static void WriteCommunityEventIndividualContributionAwardItem(ref byte[] data, ref int offset, CommunityEventIndividualContributionAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021BD RID: 8637 RVA: 0x000D5420 File Offset: 0x000D3620
		public static void WriteListCommunityEventIndividualContributionAwardItem(ref byte[] data, ref int offset, List<CommunityEventIndividualContributionAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventIndividualContributionAwardItem value in values)
			{
				ArrayManager.WriteCommunityEventIndividualContributionAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021BE RID: 8638 RVA: 0x000D549C File Offset: 0x000D369C
		public static CommunityEventIndividualContributionAwardItem ReadCommunityEventIndividualContributionAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventIndividualContributionAwardItem communityEventIndividualContributionAwardItem = new CommunityEventIndividualContributionAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventIndividualContributionAwardItem.DeserializeMessage(array);
			return communityEventIndividualContributionAwardItem;
		}

		// Token: 0x060021BF RID: 8639 RVA: 0x000D54E0 File Offset: 0x000D36E0
		public static List<CommunityEventIndividualContributionAwardItem> ReadListCommunityEventIndividualContributionAwardItem(byte[] data, ref int offset)
		{
			List<CommunityEventIndividualContributionAwardItem> list = new List<CommunityEventIndividualContributionAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventIndividualContributionAwardItem item = ArrayManager.ReadCommunityEventIndividualContributionAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021C0 RID: 8640 RVA: 0x000D5524 File Offset: 0x000D3724
		public static void WriteCommunityEventIndividualContributionAwardChestItem(ref byte[] data, ref int offset, CommunityEventIndividualContributionAwardChestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021C1 RID: 8641 RVA: 0x000D5540 File Offset: 0x000D3740
		public static void WriteListCommunityEventIndividualContributionAwardChestItem(ref byte[] data, ref int offset, List<CommunityEventIndividualContributionAwardChestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventIndividualContributionAwardChestItem value in values)
			{
				ArrayManager.WriteCommunityEventIndividualContributionAwardChestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021C2 RID: 8642 RVA: 0x000D55BC File Offset: 0x000D37BC
		public static CommunityEventIndividualContributionAwardChestItem ReadCommunityEventIndividualContributionAwardChestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventIndividualContributionAwardChestItem communityEventIndividualContributionAwardChestItem = new CommunityEventIndividualContributionAwardChestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventIndividualContributionAwardChestItem.DeserializeMessage(array);
			return communityEventIndividualContributionAwardChestItem;
		}

		// Token: 0x060021C3 RID: 8643 RVA: 0x000D5600 File Offset: 0x000D3800
		public static List<CommunityEventIndividualContributionAwardChestItem> ReadListCommunityEventIndividualContributionAwardChestItem(byte[] data, ref int offset)
		{
			List<CommunityEventIndividualContributionAwardChestItem> list = new List<CommunityEventIndividualContributionAwardChestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventIndividualContributionAwardChestItem item = ArrayManager.ReadCommunityEventIndividualContributionAwardChestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021C4 RID: 8644 RVA: 0x000D5644 File Offset: 0x000D3844
		public static void WriteGibsConversionRemovalFromInventory(ref byte[] data, ref int offset, GibsConversionRemovalFromInventory value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021C5 RID: 8645 RVA: 0x000D5660 File Offset: 0x000D3860
		public static void WriteListGibsConversionRemovalFromInventory(ref byte[] data, ref int offset, List<GibsConversionRemovalFromInventory> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GibsConversionRemovalFromInventory value in values)
			{
				ArrayManager.WriteGibsConversionRemovalFromInventory(ref data, ref offset, value);
			}
		}

		// Token: 0x060021C6 RID: 8646 RVA: 0x000D56DC File Offset: 0x000D38DC
		public static GibsConversionRemovalFromInventory ReadGibsConversionRemovalFromInventory(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GibsConversionRemovalFromInventory gibsConversionRemovalFromInventory = new GibsConversionRemovalFromInventory();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gibsConversionRemovalFromInventory.DeserializeMessage(array);
			return gibsConversionRemovalFromInventory;
		}

		// Token: 0x060021C7 RID: 8647 RVA: 0x000D5720 File Offset: 0x000D3920
		public static List<GibsConversionRemovalFromInventory> ReadListGibsConversionRemovalFromInventory(byte[] data, ref int offset)
		{
			List<GibsConversionRemovalFromInventory> list = new List<GibsConversionRemovalFromInventory>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GibsConversionRemovalFromInventory item = ArrayManager.ReadGibsConversionRemovalFromInventory(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021C8 RID: 8648 RVA: 0x000D5764 File Offset: 0x000D3964
		public static void WriteKeystoneRerollAwardItem(ref byte[] data, ref int offset, KeystoneRerollAwardItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021C9 RID: 8649 RVA: 0x000D5780 File Offset: 0x000D3980
		public static void WriteListKeystoneRerollAwardItem(ref byte[] data, ref int offset, List<KeystoneRerollAwardItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneRerollAwardItem value in values)
			{
				ArrayManager.WriteKeystoneRerollAwardItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060021CA RID: 8650 RVA: 0x000D57FC File Offset: 0x000D39FC
		public static KeystoneRerollAwardItem ReadKeystoneRerollAwardItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneRerollAwardItem keystoneRerollAwardItem = new KeystoneRerollAwardItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneRerollAwardItem.DeserializeMessage(array);
			return keystoneRerollAwardItem;
		}

		// Token: 0x060021CB RID: 8651 RVA: 0x000D5840 File Offset: 0x000D3A40
		public static List<KeystoneRerollAwardItem> ReadListKeystoneRerollAwardItem(byte[] data, ref int offset)
		{
			List<KeystoneRerollAwardItem> list = new List<KeystoneRerollAwardItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneRerollAwardItem item = ArrayManager.ReadKeystoneRerollAwardItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021CC RID: 8652 RVA: 0x000D5884 File Offset: 0x000D3A84
		public static void WritePlayerAwardNotification(ref byte[] data, ref int offset, PlayerAwardNotification value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021CD RID: 8653 RVA: 0x000D58A0 File Offset: 0x000D3AA0
		public static void WriteListPlayerAwardNotification(ref byte[] data, ref int offset, List<PlayerAwardNotification> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerAwardNotification value in values)
			{
				ArrayManager.WritePlayerAwardNotification(ref data, ref offset, value);
			}
		}

		// Token: 0x060021CE RID: 8654 RVA: 0x000D591C File Offset: 0x000D3B1C
		public static PlayerAwardNotification ReadPlayerAwardNotification(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerAwardNotification playerAwardNotification = new PlayerAwardNotification();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerAwardNotification.DeserializeMessage(array);
			return playerAwardNotification;
		}

		// Token: 0x060021CF RID: 8655 RVA: 0x000D5960 File Offset: 0x000D3B60
		public static List<PlayerAwardNotification> ReadListPlayerAwardNotification(byte[] data, ref int offset)
		{
			List<PlayerAwardNotification> list = new List<PlayerAwardNotification>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerAwardNotification item = ArrayManager.ReadPlayerAwardNotification(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021D0 RID: 8656 RVA: 0x000D59A4 File Offset: 0x000D3BA4
		public static void WriteDataGameResults(ref byte[] data, ref int offset, DataGameResults value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021D1 RID: 8657 RVA: 0x000D59C0 File Offset: 0x000D3BC0
		public static void WriteListDataGameResults(ref byte[] data, ref int offset, List<DataGameResults> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataGameResults value in values)
			{
				ArrayManager.WriteDataGameResults(ref data, ref offset, value);
			}
		}

		// Token: 0x060021D2 RID: 8658 RVA: 0x000D5A3C File Offset: 0x000D3C3C
		public static DataGameResults ReadDataGameResults(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataGameResults dataGameResults = new DataGameResults();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataGameResults.DeserializeMessage(array);
			return dataGameResults;
		}

		// Token: 0x060021D3 RID: 8659 RVA: 0x000D5A80 File Offset: 0x000D3C80
		public static List<DataGameResults> ReadListDataGameResults(byte[] data, ref int offset)
		{
			List<DataGameResults> list = new List<DataGameResults>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataGameResults item = ArrayManager.ReadDataGameResults(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021D4 RID: 8660 RVA: 0x000D5AC4 File Offset: 0x000D3CC4
		public static void WriteRequestFullPlayerAccountPush(ref byte[] data, ref int offset, RequestFullPlayerAccountPush value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021D5 RID: 8661 RVA: 0x000D5AE0 File Offset: 0x000D3CE0
		public static void WriteListRequestFullPlayerAccountPush(ref byte[] data, ref int offset, List<RequestFullPlayerAccountPush> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestFullPlayerAccountPush value in values)
			{
				ArrayManager.WriteRequestFullPlayerAccountPush(ref data, ref offset, value);
			}
		}

		// Token: 0x060021D6 RID: 8662 RVA: 0x000D5B5C File Offset: 0x000D3D5C
		public static RequestFullPlayerAccountPush ReadRequestFullPlayerAccountPush(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestFullPlayerAccountPush requestFullPlayerAccountPush = new RequestFullPlayerAccountPush();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestFullPlayerAccountPush.DeserializeMessage(array);
			return requestFullPlayerAccountPush;
		}

		// Token: 0x060021D7 RID: 8663 RVA: 0x000D5BA0 File Offset: 0x000D3DA0
		public static List<RequestFullPlayerAccountPush> ReadListRequestFullPlayerAccountPush(byte[] data, ref int offset)
		{
			List<RequestFullPlayerAccountPush> list = new List<RequestFullPlayerAccountPush>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestFullPlayerAccountPush item = ArrayManager.ReadRequestFullPlayerAccountPush(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021D8 RID: 8664 RVA: 0x000D5BE4 File Offset: 0x000D3DE4
		public static void WriteMMREntry(ref byte[] data, ref int offset, MMREntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021D9 RID: 8665 RVA: 0x000D5C00 File Offset: 0x000D3E00
		public static void WriteListMMREntry(ref byte[] data, ref int offset, List<MMREntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MMREntry value in values)
			{
				ArrayManager.WriteMMREntry(ref data, ref offset, value);
			}
		}

		// Token: 0x060021DA RID: 8666 RVA: 0x000D5C7C File Offset: 0x000D3E7C
		public static MMREntry ReadMMREntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MMREntry mmrentry = new MMREntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			mmrentry.DeserializeMessage(array);
			return mmrentry;
		}

		// Token: 0x060021DB RID: 8667 RVA: 0x000D5CC0 File Offset: 0x000D3EC0
		public static List<MMREntry> ReadListMMREntry(byte[] data, ref int offset)
		{
			List<MMREntry> list = new List<MMREntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MMREntry item = ArrayManager.ReadMMREntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021DC RID: 8668 RVA: 0x000D5D04 File Offset: 0x000D3F04
		public static void WritePushPlayerAccount(ref byte[] data, ref int offset, PushPlayerAccount value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021DD RID: 8669 RVA: 0x000D5D20 File Offset: 0x000D3F20
		public static void WriteListPushPlayerAccount(ref byte[] data, ref int offset, List<PushPlayerAccount> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerAccount value in values)
			{
				ArrayManager.WritePushPlayerAccount(ref data, ref offset, value);
			}
		}

		// Token: 0x060021DE RID: 8670 RVA: 0x000D5D9C File Offset: 0x000D3F9C
		public static PushPlayerAccount ReadPushPlayerAccount(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerAccount pushPlayerAccount = new PushPlayerAccount();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerAccount.DeserializeMessage(array);
			return pushPlayerAccount;
		}

		// Token: 0x060021DF RID: 8671 RVA: 0x000D5DE0 File Offset: 0x000D3FE0
		public static List<PushPlayerAccount> ReadListPushPlayerAccount(byte[] data, ref int offset)
		{
			List<PushPlayerAccount> list = new List<PushPlayerAccount>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerAccount item = ArrayManager.ReadPushPlayerAccount(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021E0 RID: 8672 RVA: 0x000D5E24 File Offset: 0x000D4024
		public static void WritePushTutorialProgress(ref byte[] data, ref int offset, PushTutorialProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021E1 RID: 8673 RVA: 0x000D5E40 File Offset: 0x000D4040
		public static void WriteListPushTutorialProgress(ref byte[] data, ref int offset, List<PushTutorialProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushTutorialProgress value in values)
			{
				ArrayManager.WritePushTutorialProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x060021E2 RID: 8674 RVA: 0x000D5EBC File Offset: 0x000D40BC
		public static PushTutorialProgress ReadPushTutorialProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushTutorialProgress pushTutorialProgress = new PushTutorialProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushTutorialProgress.DeserializeMessage(array);
			return pushTutorialProgress;
		}

		// Token: 0x060021E3 RID: 8675 RVA: 0x000D5F00 File Offset: 0x000D4100
		public static List<PushTutorialProgress> ReadListPushTutorialProgress(byte[] data, ref int offset)
		{
			List<PushTutorialProgress> list = new List<PushTutorialProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushTutorialProgress item = ArrayManager.ReadPushTutorialProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021E4 RID: 8676 RVA: 0x000D5F44 File Offset: 0x000D4144
		public static void WritePushPlayerInventoryUpdate(ref byte[] data, ref int offset, PushPlayerInventoryUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021E5 RID: 8677 RVA: 0x000D5F60 File Offset: 0x000D4160
		public static void WriteListPushPlayerInventoryUpdate(ref byte[] data, ref int offset, List<PushPlayerInventoryUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerInventoryUpdate value in values)
			{
				ArrayManager.WritePushPlayerInventoryUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x060021E6 RID: 8678 RVA: 0x000D5FDC File Offset: 0x000D41DC
		public static PushPlayerInventoryUpdate ReadPushPlayerInventoryUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerInventoryUpdate pushPlayerInventoryUpdate = new PushPlayerInventoryUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerInventoryUpdate.DeserializeMessage(array);
			return pushPlayerInventoryUpdate;
		}

		// Token: 0x060021E7 RID: 8679 RVA: 0x000D6020 File Offset: 0x000D4220
		public static List<PushPlayerInventoryUpdate> ReadListPushPlayerInventoryUpdate(byte[] data, ref int offset)
		{
			List<PushPlayerInventoryUpdate> list = new List<PushPlayerInventoryUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerInventoryUpdate item = ArrayManager.ReadPushPlayerInventoryUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021E8 RID: 8680 RVA: 0x000D6064 File Offset: 0x000D4264
		public static void WritePushHeroStats(ref byte[] data, ref int offset, PushHeroStats value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021E9 RID: 8681 RVA: 0x000D6080 File Offset: 0x000D4280
		public static void WriteListPushHeroStats(ref byte[] data, ref int offset, List<PushHeroStats> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushHeroStats value in values)
			{
				ArrayManager.WritePushHeroStats(ref data, ref offset, value);
			}
		}

		// Token: 0x060021EA RID: 8682 RVA: 0x000D60FC File Offset: 0x000D42FC
		public static PushHeroStats ReadPushHeroStats(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushHeroStats pushHeroStats = new PushHeroStats();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushHeroStats.DeserializeMessage(array);
			return pushHeroStats;
		}

		// Token: 0x060021EB RID: 8683 RVA: 0x000D6140 File Offset: 0x000D4340
		public static List<PushHeroStats> ReadListPushHeroStats(byte[] data, ref int offset)
		{
			List<PushHeroStats> list = new List<PushHeroStats>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushHeroStats item = ArrayManager.ReadPushHeroStats(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021EC RID: 8684 RVA: 0x000D6184 File Offset: 0x000D4384
		public static void WriteInventoryEntry(ref byte[] data, ref int offset, InventoryEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021ED RID: 8685 RVA: 0x000D61A0 File Offset: 0x000D43A0
		public static void WriteListInventoryEntry(ref byte[] data, ref int offset, List<InventoryEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (InventoryEntry value in values)
			{
				ArrayManager.WriteInventoryEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x060021EE RID: 8686 RVA: 0x000D621C File Offset: 0x000D441C
		public static InventoryEntry ReadInventoryEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			InventoryEntry inventoryEntry = new InventoryEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			inventoryEntry.DeserializeMessage(array);
			return inventoryEntry;
		}

		// Token: 0x060021EF RID: 8687 RVA: 0x000D6260 File Offset: 0x000D4460
		public static List<InventoryEntry> ReadListInventoryEntry(byte[] data, ref int offset)
		{
			List<InventoryEntry> list = new List<InventoryEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				InventoryEntry item = ArrayManager.ReadInventoryEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021F0 RID: 8688 RVA: 0x000D62A4 File Offset: 0x000D44A4
		public static void WritePlayerHeroMapStat(ref byte[] data, ref int offset, PlayerHeroMapStat value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021F1 RID: 8689 RVA: 0x000D62C0 File Offset: 0x000D44C0
		public static void WriteListPlayerHeroMapStat(ref byte[] data, ref int offset, List<PlayerHeroMapStat> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerHeroMapStat value in values)
			{
				ArrayManager.WritePlayerHeroMapStat(ref data, ref offset, value);
			}
		}

		// Token: 0x060021F2 RID: 8690 RVA: 0x000D633C File Offset: 0x000D453C
		public static PlayerHeroMapStat ReadPlayerHeroMapStat(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerHeroMapStat playerHeroMapStat = new PlayerHeroMapStat();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerHeroMapStat.DeserializeMessage(array);
			return playerHeroMapStat;
		}

		// Token: 0x060021F3 RID: 8691 RVA: 0x000D6380 File Offset: 0x000D4580
		public static List<PlayerHeroMapStat> ReadListPlayerHeroMapStat(byte[] data, ref int offset)
		{
			List<PlayerHeroMapStat> list = new List<PlayerHeroMapStat>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerHeroMapStat item = ArrayManager.ReadPlayerHeroMapStat(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021F4 RID: 8692 RVA: 0x000D63C4 File Offset: 0x000D45C4
		public static void WritePlayerHeroStats(ref byte[] data, ref int offset, PlayerHeroStats value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021F5 RID: 8693 RVA: 0x000D63E0 File Offset: 0x000D45E0
		public static void WriteListPlayerHeroStats(ref byte[] data, ref int offset, List<PlayerHeroStats> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerHeroStats value in values)
			{
				ArrayManager.WritePlayerHeroStats(ref data, ref offset, value);
			}
		}

		// Token: 0x060021F6 RID: 8694 RVA: 0x000D645C File Offset: 0x000D465C
		public static PlayerHeroStats ReadPlayerHeroStats(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerHeroStats playerHeroStats = new PlayerHeroStats();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerHeroStats.DeserializeMessage(array);
			return playerHeroStats;
		}

		// Token: 0x060021F7 RID: 8695 RVA: 0x000D64A0 File Offset: 0x000D46A0
		public static List<PlayerHeroStats> ReadListPlayerHeroStats(byte[] data, ref int offset)
		{
			List<PlayerHeroStats> list = new List<PlayerHeroStats>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerHeroStats item = ArrayManager.ReadPlayerHeroStats(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021F8 RID: 8696 RVA: 0x000D64E4 File Offset: 0x000D46E4
		public static void WriteRequestSetHeroSelectedSkin(ref byte[] data, ref int offset, RequestSetHeroSelectedSkin value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021F9 RID: 8697 RVA: 0x000D6500 File Offset: 0x000D4700
		public static void WriteListRequestSetHeroSelectedSkin(ref byte[] data, ref int offset, List<RequestSetHeroSelectedSkin> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSetHeroSelectedSkin value in values)
			{
				ArrayManager.WriteRequestSetHeroSelectedSkin(ref data, ref offset, value);
			}
		}

		// Token: 0x060021FA RID: 8698 RVA: 0x000D657C File Offset: 0x000D477C
		public static RequestSetHeroSelectedSkin ReadRequestSetHeroSelectedSkin(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSetHeroSelectedSkin requestSetHeroSelectedSkin = new RequestSetHeroSelectedSkin();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSetHeroSelectedSkin.DeserializeMessage(array);
			return requestSetHeroSelectedSkin;
		}

		// Token: 0x060021FB RID: 8699 RVA: 0x000D65C0 File Offset: 0x000D47C0
		public static List<RequestSetHeroSelectedSkin> ReadListRequestSetHeroSelectedSkin(byte[] data, ref int offset)
		{
			List<RequestSetHeroSelectedSkin> list = new List<RequestSetHeroSelectedSkin>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSetHeroSelectedSkin item = ArrayManager.ReadRequestSetHeroSelectedSkin(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060021FC RID: 8700 RVA: 0x000D6604 File Offset: 0x000D4804
		public static void WriteResponseSetHeroSelectedSkin(ref byte[] data, ref int offset, ResponseSetHeroSelectedSkin value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060021FD RID: 8701 RVA: 0x000D6620 File Offset: 0x000D4820
		public static void WriteListResponseSetHeroSelectedSkin(ref byte[] data, ref int offset, List<ResponseSetHeroSelectedSkin> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSetHeroSelectedSkin value in values)
			{
				ArrayManager.WriteResponseSetHeroSelectedSkin(ref data, ref offset, value);
			}
		}

		// Token: 0x060021FE RID: 8702 RVA: 0x000D669C File Offset: 0x000D489C
		public static ResponseSetHeroSelectedSkin ReadResponseSetHeroSelectedSkin(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSetHeroSelectedSkin responseSetHeroSelectedSkin = new ResponseSetHeroSelectedSkin();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSetHeroSelectedSkin.DeserializeMessage(array);
			return responseSetHeroSelectedSkin;
		}

		// Token: 0x060021FF RID: 8703 RVA: 0x000D66E0 File Offset: 0x000D48E0
		public static List<ResponseSetHeroSelectedSkin> ReadListResponseSetHeroSelectedSkin(byte[] data, ref int offset)
		{
			List<ResponseSetHeroSelectedSkin> list = new List<ResponseSetHeroSelectedSkin>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSetHeroSelectedSkin item = ArrayManager.ReadResponseSetHeroSelectedSkin(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002200 RID: 8704 RVA: 0x000D6724 File Offset: 0x000D4924
		public static void WriteRequestUpgradeTrap(ref byte[] data, ref int offset, RequestUpgradeTrap value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002201 RID: 8705 RVA: 0x000D6740 File Offset: 0x000D4940
		public static void WriteListRequestUpgradeTrap(ref byte[] data, ref int offset, List<RequestUpgradeTrap> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestUpgradeTrap value in values)
			{
				ArrayManager.WriteRequestUpgradeTrap(ref data, ref offset, value);
			}
		}

		// Token: 0x06002202 RID: 8706 RVA: 0x000D67BC File Offset: 0x000D49BC
		public static RequestUpgradeTrap ReadRequestUpgradeTrap(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestUpgradeTrap requestUpgradeTrap = new RequestUpgradeTrap();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestUpgradeTrap.DeserializeMessage(array);
			return requestUpgradeTrap;
		}

		// Token: 0x06002203 RID: 8707 RVA: 0x000D6800 File Offset: 0x000D4A00
		public static List<RequestUpgradeTrap> ReadListRequestUpgradeTrap(byte[] data, ref int offset)
		{
			List<RequestUpgradeTrap> list = new List<RequestUpgradeTrap>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestUpgradeTrap item = ArrayManager.ReadRequestUpgradeTrap(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002204 RID: 8708 RVA: 0x000D6844 File Offset: 0x000D4A44
		public static void WriteResponseUpgradeTrap(ref byte[] data, ref int offset, ResponseUpgradeTrap value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002205 RID: 8709 RVA: 0x000D6860 File Offset: 0x000D4A60
		public static void WriteListResponseUpgradeTrap(ref byte[] data, ref int offset, List<ResponseUpgradeTrap> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseUpgradeTrap value in values)
			{
				ArrayManager.WriteResponseUpgradeTrap(ref data, ref offset, value);
			}
		}

		// Token: 0x06002206 RID: 8710 RVA: 0x000D68DC File Offset: 0x000D4ADC
		public static ResponseUpgradeTrap ReadResponseUpgradeTrap(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseUpgradeTrap responseUpgradeTrap = new ResponseUpgradeTrap();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseUpgradeTrap.DeserializeMessage(array);
			return responseUpgradeTrap;
		}

		// Token: 0x06002207 RID: 8711 RVA: 0x000D6920 File Offset: 0x000D4B20
		public static List<ResponseUpgradeTrap> ReadListResponseUpgradeTrap(byte[] data, ref int offset)
		{
			List<ResponseUpgradeTrap> list = new List<ResponseUpgradeTrap>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseUpgradeTrap item = ArrayManager.ReadResponseUpgradeTrap(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002208 RID: 8712 RVA: 0x000D6964 File Offset: 0x000D4B64
		public static void WriteRequestInsertPartIntoSlot(ref byte[] data, ref int offset, RequestInsertPartIntoSlot value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002209 RID: 8713 RVA: 0x000D6980 File Offset: 0x000D4B80
		public static void WriteListRequestInsertPartIntoSlot(ref byte[] data, ref int offset, List<RequestInsertPartIntoSlot> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestInsertPartIntoSlot value in values)
			{
				ArrayManager.WriteRequestInsertPartIntoSlot(ref data, ref offset, value);
			}
		}

		// Token: 0x0600220A RID: 8714 RVA: 0x000D69FC File Offset: 0x000D4BFC
		public static RequestInsertPartIntoSlot ReadRequestInsertPartIntoSlot(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestInsertPartIntoSlot requestInsertPartIntoSlot = new RequestInsertPartIntoSlot();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestInsertPartIntoSlot.DeserializeMessage(array);
			return requestInsertPartIntoSlot;
		}

		// Token: 0x0600220B RID: 8715 RVA: 0x000D6A40 File Offset: 0x000D4C40
		public static List<RequestInsertPartIntoSlot> ReadListRequestInsertPartIntoSlot(byte[] data, ref int offset)
		{
			List<RequestInsertPartIntoSlot> list = new List<RequestInsertPartIntoSlot>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestInsertPartIntoSlot item = ArrayManager.ReadRequestInsertPartIntoSlot(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600220C RID: 8716 RVA: 0x000D6A84 File Offset: 0x000D4C84
		public static void WriteResponseInsertPartIntoSlot(ref byte[] data, ref int offset, ResponseInsertPartIntoSlot value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600220D RID: 8717 RVA: 0x000D6AA0 File Offset: 0x000D4CA0
		public static void WriteListResponseInsertPartIntoSlot(ref byte[] data, ref int offset, List<ResponseInsertPartIntoSlot> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseInsertPartIntoSlot value in values)
			{
				ArrayManager.WriteResponseInsertPartIntoSlot(ref data, ref offset, value);
			}
		}

		// Token: 0x0600220E RID: 8718 RVA: 0x000D6B1C File Offset: 0x000D4D1C
		public static ResponseInsertPartIntoSlot ReadResponseInsertPartIntoSlot(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseInsertPartIntoSlot responseInsertPartIntoSlot = new ResponseInsertPartIntoSlot();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseInsertPartIntoSlot.DeserializeMessage(array);
			return responseInsertPartIntoSlot;
		}

		// Token: 0x0600220F RID: 8719 RVA: 0x000D6B60 File Offset: 0x000D4D60
		public static List<ResponseInsertPartIntoSlot> ReadListResponseInsertPartIntoSlot(byte[] data, ref int offset)
		{
			List<ResponseInsertPartIntoSlot> list = new List<ResponseInsertPartIntoSlot>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseInsertPartIntoSlot item = ArrayManager.ReadResponseInsertPartIntoSlot(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002210 RID: 8720 RVA: 0x000D6BA4 File Offset: 0x000D4DA4
		public static void WriteRequestRemovePartFromSlot(ref byte[] data, ref int offset, RequestRemovePartFromSlot value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002211 RID: 8721 RVA: 0x000D6BC0 File Offset: 0x000D4DC0
		public static void WriteListRequestRemovePartFromSlot(ref byte[] data, ref int offset, List<RequestRemovePartFromSlot> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestRemovePartFromSlot value in values)
			{
				ArrayManager.WriteRequestRemovePartFromSlot(ref data, ref offset, value);
			}
		}

		// Token: 0x06002212 RID: 8722 RVA: 0x000D6C3C File Offset: 0x000D4E3C
		public static RequestRemovePartFromSlot ReadRequestRemovePartFromSlot(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestRemovePartFromSlot requestRemovePartFromSlot = new RequestRemovePartFromSlot();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestRemovePartFromSlot.DeserializeMessage(array);
			return requestRemovePartFromSlot;
		}

		// Token: 0x06002213 RID: 8723 RVA: 0x000D6C80 File Offset: 0x000D4E80
		public static List<RequestRemovePartFromSlot> ReadListRequestRemovePartFromSlot(byte[] data, ref int offset)
		{
			List<RequestRemovePartFromSlot> list = new List<RequestRemovePartFromSlot>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestRemovePartFromSlot item = ArrayManager.ReadRequestRemovePartFromSlot(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002214 RID: 8724 RVA: 0x000D6CC4 File Offset: 0x000D4EC4
		public static void WriteResponseRemovePartFromSlot(ref byte[] data, ref int offset, ResponseRemovePartFromSlot value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002215 RID: 8725 RVA: 0x000D6CE0 File Offset: 0x000D4EE0
		public static void WriteListResponseRemovePartFromSlot(ref byte[] data, ref int offset, List<ResponseRemovePartFromSlot> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseRemovePartFromSlot value in values)
			{
				ArrayManager.WriteResponseRemovePartFromSlot(ref data, ref offset, value);
			}
		}

		// Token: 0x06002216 RID: 8726 RVA: 0x000D6D5C File Offset: 0x000D4F5C
		public static ResponseRemovePartFromSlot ReadResponseRemovePartFromSlot(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseRemovePartFromSlot responseRemovePartFromSlot = new ResponseRemovePartFromSlot();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseRemovePartFromSlot.DeserializeMessage(array);
			return responseRemovePartFromSlot;
		}

		// Token: 0x06002217 RID: 8727 RVA: 0x000D6DA0 File Offset: 0x000D4FA0
		public static List<ResponseRemovePartFromSlot> ReadListResponseRemovePartFromSlot(byte[] data, ref int offset)
		{
			List<ResponseRemovePartFromSlot> list = new List<ResponseRemovePartFromSlot>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseRemovePartFromSlot item = ArrayManager.ReadResponseRemovePartFromSlot(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002218 RID: 8728 RVA: 0x000D6DE4 File Offset: 0x000D4FE4
		public static void WriteResponsePlayerChangePortraitIndex(ref byte[] data, ref int offset, ResponsePlayerChangePortraitIndex value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002219 RID: 8729 RVA: 0x000D6E00 File Offset: 0x000D5000
		public static void WriteListResponsePlayerChangePortraitIndex(ref byte[] data, ref int offset, List<ResponsePlayerChangePortraitIndex> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerChangePortraitIndex value in values)
			{
				ArrayManager.WriteResponsePlayerChangePortraitIndex(ref data, ref offset, value);
			}
		}

		// Token: 0x0600221A RID: 8730 RVA: 0x000D6E7C File Offset: 0x000D507C
		public static ResponsePlayerChangePortraitIndex ReadResponsePlayerChangePortraitIndex(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerChangePortraitIndex responsePlayerChangePortraitIndex = new ResponsePlayerChangePortraitIndex();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerChangePortraitIndex.DeserializeMessage(array);
			return responsePlayerChangePortraitIndex;
		}

		// Token: 0x0600221B RID: 8731 RVA: 0x000D6EC0 File Offset: 0x000D50C0
		public static List<ResponsePlayerChangePortraitIndex> ReadListResponsePlayerChangePortraitIndex(byte[] data, ref int offset)
		{
			List<ResponsePlayerChangePortraitIndex> list = new List<ResponsePlayerChangePortraitIndex>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerChangePortraitIndex item = ArrayManager.ReadResponsePlayerChangePortraitIndex(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600221C RID: 8732 RVA: 0x000D6F04 File Offset: 0x000D5104
		public static void WriteDeckEntry(ref byte[] data, ref int offset, DeckEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600221D RID: 8733 RVA: 0x000D6F20 File Offset: 0x000D5120
		public static void WriteListDeckEntry(ref byte[] data, ref int offset, List<DeckEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DeckEntry value in values)
			{
				ArrayManager.WriteDeckEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600221E RID: 8734 RVA: 0x000D6F9C File Offset: 0x000D519C
		public static DeckEntry ReadDeckEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DeckEntry deckEntry = new DeckEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			deckEntry.DeserializeMessage(array);
			return deckEntry;
		}

		// Token: 0x0600221F RID: 8735 RVA: 0x000D6FE0 File Offset: 0x000D51E0
		public static List<DeckEntry> ReadListDeckEntry(byte[] data, ref int offset)
		{
			List<DeckEntry> list = new List<DeckEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DeckEntry item = ArrayManager.ReadDeckEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002220 RID: 8736 RVA: 0x000D7024 File Offset: 0x000D5224
		public static void WriteDeckItem(ref byte[] data, ref int offset, DeckItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002221 RID: 8737 RVA: 0x000D7040 File Offset: 0x000D5240
		public static void WriteListDeckItem(ref byte[] data, ref int offset, List<DeckItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DeckItem value in values)
			{
				ArrayManager.WriteDeckItem(ref data, ref offset, value);
			}
		}

		// Token: 0x06002222 RID: 8738 RVA: 0x000D70BC File Offset: 0x000D52BC
		public static DeckItem ReadDeckItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DeckItem deckItem = new DeckItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			deckItem.DeserializeMessage(array);
			return deckItem;
		}

		// Token: 0x06002223 RID: 8739 RVA: 0x000D7100 File Offset: 0x000D5300
		public static List<DeckItem> ReadListDeckItem(byte[] data, ref int offset)
		{
			List<DeckItem> list = new List<DeckItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DeckItem item = ArrayManager.ReadDeckItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002224 RID: 8740 RVA: 0x000D7144 File Offset: 0x000D5344
		public static void WriteResponsePlayerDecks(ref byte[] data, ref int offset, ResponsePlayerDecks value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002225 RID: 8741 RVA: 0x000D7160 File Offset: 0x000D5360
		public static void WriteListResponsePlayerDecks(ref byte[] data, ref int offset, List<ResponsePlayerDecks> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerDecks value in values)
			{
				ArrayManager.WriteResponsePlayerDecks(ref data, ref offset, value);
			}
		}

		// Token: 0x06002226 RID: 8742 RVA: 0x000D71DC File Offset: 0x000D53DC
		public static ResponsePlayerDecks ReadResponsePlayerDecks(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerDecks responsePlayerDecks = new ResponsePlayerDecks();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerDecks.DeserializeMessage(array);
			return responsePlayerDecks;
		}

		// Token: 0x06002227 RID: 8743 RVA: 0x000D7220 File Offset: 0x000D5420
		public static List<ResponsePlayerDecks> ReadListResponsePlayerDecks(byte[] data, ref int offset)
		{
			List<ResponsePlayerDecks> list = new List<ResponsePlayerDecks>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerDecks item = ArrayManager.ReadResponsePlayerDecks(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002228 RID: 8744 RVA: 0x000D7264 File Offset: 0x000D5464
		public static void WriteResponsePlayerDeckDetailEntry(ref byte[] data, ref int offset, ResponsePlayerDeckDetailEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002229 RID: 8745 RVA: 0x000D7280 File Offset: 0x000D5480
		public static void WriteListResponsePlayerDeckDetailEntry(ref byte[] data, ref int offset, List<ResponsePlayerDeckDetailEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerDeckDetailEntry value in values)
			{
				ArrayManager.WriteResponsePlayerDeckDetailEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600222A RID: 8746 RVA: 0x000D72FC File Offset: 0x000D54FC
		public static ResponsePlayerDeckDetailEntry ReadResponsePlayerDeckDetailEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerDeckDetailEntry responsePlayerDeckDetailEntry = new ResponsePlayerDeckDetailEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerDeckDetailEntry.DeserializeMessage(array);
			return responsePlayerDeckDetailEntry;
		}

		// Token: 0x0600222B RID: 8747 RVA: 0x000D7340 File Offset: 0x000D5540
		public static List<ResponsePlayerDeckDetailEntry> ReadListResponsePlayerDeckDetailEntry(byte[] data, ref int offset)
		{
			List<ResponsePlayerDeckDetailEntry> list = new List<ResponsePlayerDeckDetailEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerDeckDetailEntry item = ArrayManager.ReadResponsePlayerDeckDetailEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600222C RID: 8748 RVA: 0x000D7384 File Offset: 0x000D5584
		public static void WriteResponsePlayerDeckDetail(ref byte[] data, ref int offset, ResponsePlayerDeckDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600222D RID: 8749 RVA: 0x000D73A0 File Offset: 0x000D55A0
		public static void WriteListResponsePlayerDeckDetail(ref byte[] data, ref int offset, List<ResponsePlayerDeckDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerDeckDetail value in values)
			{
				ArrayManager.WriteResponsePlayerDeckDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x0600222E RID: 8750 RVA: 0x000D741C File Offset: 0x000D561C
		public static ResponsePlayerDeckDetail ReadResponsePlayerDeckDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerDeckDetail responsePlayerDeckDetail = new ResponsePlayerDeckDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerDeckDetail.DeserializeMessage(array);
			return responsePlayerDeckDetail;
		}

		// Token: 0x0600222F RID: 8751 RVA: 0x000D7460 File Offset: 0x000D5660
		public static List<ResponsePlayerDeckDetail> ReadListResponsePlayerDeckDetail(byte[] data, ref int offset)
		{
			List<ResponsePlayerDeckDetail> list = new List<ResponsePlayerDeckDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerDeckDetail item = ArrayManager.ReadResponsePlayerDeckDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002230 RID: 8752 RVA: 0x000D74A4 File Offset: 0x000D56A4
		public static void WriteResponsePlayerAddDeck(ref byte[] data, ref int offset, ResponsePlayerAddDeck value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002231 RID: 8753 RVA: 0x000D74C0 File Offset: 0x000D56C0
		public static void WriteListResponsePlayerAddDeck(ref byte[] data, ref int offset, List<ResponsePlayerAddDeck> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerAddDeck value in values)
			{
				ArrayManager.WriteResponsePlayerAddDeck(ref data, ref offset, value);
			}
		}

		// Token: 0x06002232 RID: 8754 RVA: 0x000D753C File Offset: 0x000D573C
		public static ResponsePlayerAddDeck ReadResponsePlayerAddDeck(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerAddDeck responsePlayerAddDeck = new ResponsePlayerAddDeck();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerAddDeck.DeserializeMessage(array);
			return responsePlayerAddDeck;
		}

		// Token: 0x06002233 RID: 8755 RVA: 0x000D7580 File Offset: 0x000D5780
		public static List<ResponsePlayerAddDeck> ReadListResponsePlayerAddDeck(byte[] data, ref int offset)
		{
			List<ResponsePlayerAddDeck> list = new List<ResponsePlayerAddDeck>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerAddDeck item = ArrayManager.ReadResponsePlayerAddDeck(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002234 RID: 8756 RVA: 0x000D75C4 File Offset: 0x000D57C4
		public static void WriteResponsePlayerDeleteDeck(ref byte[] data, ref int offset, ResponsePlayerDeleteDeck value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002235 RID: 8757 RVA: 0x000D75E0 File Offset: 0x000D57E0
		public static void WriteListResponsePlayerDeleteDeck(ref byte[] data, ref int offset, List<ResponsePlayerDeleteDeck> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerDeleteDeck value in values)
			{
				ArrayManager.WriteResponsePlayerDeleteDeck(ref data, ref offset, value);
			}
		}

		// Token: 0x06002236 RID: 8758 RVA: 0x000D765C File Offset: 0x000D585C
		public static ResponsePlayerDeleteDeck ReadResponsePlayerDeleteDeck(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerDeleteDeck responsePlayerDeleteDeck = new ResponsePlayerDeleteDeck();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerDeleteDeck.DeserializeMessage(array);
			return responsePlayerDeleteDeck;
		}

		// Token: 0x06002237 RID: 8759 RVA: 0x000D76A0 File Offset: 0x000D58A0
		public static List<ResponsePlayerDeleteDeck> ReadListResponsePlayerDeleteDeck(byte[] data, ref int offset)
		{
			List<ResponsePlayerDeleteDeck> list = new List<ResponsePlayerDeleteDeck>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerDeleteDeck item = ArrayManager.ReadResponsePlayerDeleteDeck(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002238 RID: 8760 RVA: 0x000D76E4 File Offset: 0x000D58E4
		public static void WriteResponsePlayerChangeDeckMeta(ref byte[] data, ref int offset, ResponsePlayerChangeDeckMeta value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002239 RID: 8761 RVA: 0x000D7700 File Offset: 0x000D5900
		public static void WriteListResponsePlayerChangeDeckMeta(ref byte[] data, ref int offset, List<ResponsePlayerChangeDeckMeta> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerChangeDeckMeta value in values)
			{
				ArrayManager.WriteResponsePlayerChangeDeckMeta(ref data, ref offset, value);
			}
		}

		// Token: 0x0600223A RID: 8762 RVA: 0x000D777C File Offset: 0x000D597C
		public static ResponsePlayerChangeDeckMeta ReadResponsePlayerChangeDeckMeta(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerChangeDeckMeta responsePlayerChangeDeckMeta = new ResponsePlayerChangeDeckMeta();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerChangeDeckMeta.DeserializeMessage(array);
			return responsePlayerChangeDeckMeta;
		}

		// Token: 0x0600223B RID: 8763 RVA: 0x000D77C0 File Offset: 0x000D59C0
		public static List<ResponsePlayerChangeDeckMeta> ReadListResponsePlayerChangeDeckMeta(byte[] data, ref int offset)
		{
			List<ResponsePlayerChangeDeckMeta> list = new List<ResponsePlayerChangeDeckMeta>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerChangeDeckMeta item = ArrayManager.ReadResponsePlayerChangeDeckMeta(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600223C RID: 8764 RVA: 0x000D7804 File Offset: 0x000D5A04
		public static void WriteResponsePlayerPostDeckUpdate(ref byte[] data, ref int offset, ResponsePlayerPostDeckUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600223D RID: 8765 RVA: 0x000D7820 File Offset: 0x000D5A20
		public static void WriteListResponsePlayerPostDeckUpdate(ref byte[] data, ref int offset, List<ResponsePlayerPostDeckUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerPostDeckUpdate value in values)
			{
				ArrayManager.WriteResponsePlayerPostDeckUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x0600223E RID: 8766 RVA: 0x000D789C File Offset: 0x000D5A9C
		public static ResponsePlayerPostDeckUpdate ReadResponsePlayerPostDeckUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerPostDeckUpdate responsePlayerPostDeckUpdate = new ResponsePlayerPostDeckUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerPostDeckUpdate.DeserializeMessage(array);
			return responsePlayerPostDeckUpdate;
		}

		// Token: 0x0600223F RID: 8767 RVA: 0x000D78E0 File Offset: 0x000D5AE0
		public static List<ResponsePlayerPostDeckUpdate> ReadListResponsePlayerPostDeckUpdate(byte[] data, ref int offset)
		{
			List<ResponsePlayerPostDeckUpdate> list = new List<ResponsePlayerPostDeckUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerPostDeckUpdate item = ArrayManager.ReadResponsePlayerPostDeckUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002240 RID: 8768 RVA: 0x000D7924 File Offset: 0x000D5B24
		public static void WriteUserRegisterRequest(ref byte[] data, ref int offset, UserRegisterRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002241 RID: 8769 RVA: 0x000D7940 File Offset: 0x000D5B40
		public static void WriteListUserRegisterRequest(ref byte[] data, ref int offset, List<UserRegisterRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UserRegisterRequest value in values)
			{
				ArrayManager.WriteUserRegisterRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x06002242 RID: 8770 RVA: 0x000D79BC File Offset: 0x000D5BBC
		public static UserRegisterRequest ReadUserRegisterRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UserRegisterRequest userRegisterRequest = new UserRegisterRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			userRegisterRequest.DeserializeMessage(array);
			return userRegisterRequest;
		}

		// Token: 0x06002243 RID: 8771 RVA: 0x000D7A00 File Offset: 0x000D5C00
		public static List<UserRegisterRequest> ReadListUserRegisterRequest(byte[] data, ref int offset)
		{
			List<UserRegisterRequest> list = new List<UserRegisterRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UserRegisterRequest item = ArrayManager.ReadUserRegisterRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002244 RID: 8772 RVA: 0x000D7A44 File Offset: 0x000D5C44
		public static void WriteUserRegisterResponse(ref byte[] data, ref int offset, UserRegisterResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002245 RID: 8773 RVA: 0x000D7A60 File Offset: 0x000D5C60
		public static void WriteListUserRegisterResponse(ref byte[] data, ref int offset, List<UserRegisterResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UserRegisterResponse value in values)
			{
				ArrayManager.WriteUserRegisterResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x06002246 RID: 8774 RVA: 0x000D7ADC File Offset: 0x000D5CDC
		public static UserRegisterResponse ReadUserRegisterResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UserRegisterResponse userRegisterResponse = new UserRegisterResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			userRegisterResponse.DeserializeMessage(array);
			return userRegisterResponse;
		}

		// Token: 0x06002247 RID: 8775 RVA: 0x000D7B20 File Offset: 0x000D5D20
		public static List<UserRegisterResponse> ReadListUserRegisterResponse(byte[] data, ref int offset)
		{
			List<UserRegisterResponse> list = new List<UserRegisterResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UserRegisterResponse item = ArrayManager.ReadUserRegisterResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002248 RID: 8776 RVA: 0x000D7B64 File Offset: 0x000D5D64
		public static void WriteUserLoginRequest(ref byte[] data, ref int offset, UserLoginRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002249 RID: 8777 RVA: 0x000D7B80 File Offset: 0x000D5D80
		public static void WriteListUserLoginRequest(ref byte[] data, ref int offset, List<UserLoginRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UserLoginRequest value in values)
			{
				ArrayManager.WriteUserLoginRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x0600224A RID: 8778 RVA: 0x000D7BFC File Offset: 0x000D5DFC
		public static UserLoginRequest ReadUserLoginRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UserLoginRequest userLoginRequest = new UserLoginRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			userLoginRequest.DeserializeMessage(array);
			return userLoginRequest;
		}

		// Token: 0x0600224B RID: 8779 RVA: 0x000D7C40 File Offset: 0x000D5E40
		public static List<UserLoginRequest> ReadListUserLoginRequest(byte[] data, ref int offset)
		{
			List<UserLoginRequest> list = new List<UserLoginRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UserLoginRequest item = ArrayManager.ReadUserLoginRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600224C RID: 8780 RVA: 0x000D7C84 File Offset: 0x000D5E84
		public static void WriteUserLoginResponse(ref byte[] data, ref int offset, UserLoginResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600224D RID: 8781 RVA: 0x000D7CA0 File Offset: 0x000D5EA0
		public static void WriteListUserLoginResponse(ref byte[] data, ref int offset, List<UserLoginResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UserLoginResponse value in values)
			{
				ArrayManager.WriteUserLoginResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x0600224E RID: 8782 RVA: 0x000D7D1C File Offset: 0x000D5F1C
		public static UserLoginResponse ReadUserLoginResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UserLoginResponse userLoginResponse = new UserLoginResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			userLoginResponse.DeserializeMessage(array);
			return userLoginResponse;
		}

		// Token: 0x0600224F RID: 8783 RVA: 0x000D7D60 File Offset: 0x000D5F60
		public static List<UserLoginResponse> ReadListUserLoginResponse(byte[] data, ref int offset)
		{
			List<UserLoginResponse> list = new List<UserLoginResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UserLoginResponse item = ArrayManager.ReadUserLoginResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002250 RID: 8784 RVA: 0x000D7DA4 File Offset: 0x000D5FA4
		public static void WritePushUserRegionStore(ref byte[] data, ref int offset, PushUserRegionStore value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002251 RID: 8785 RVA: 0x000D7DC0 File Offset: 0x000D5FC0
		public static void WriteListPushUserRegionStore(ref byte[] data, ref int offset, List<PushUserRegionStore> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushUserRegionStore value in values)
			{
				ArrayManager.WritePushUserRegionStore(ref data, ref offset, value);
			}
		}

		// Token: 0x06002252 RID: 8786 RVA: 0x000D7E3C File Offset: 0x000D603C
		public static PushUserRegionStore ReadPushUserRegionStore(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushUserRegionStore pushUserRegionStore = new PushUserRegionStore();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushUserRegionStore.DeserializeMessage(array);
			return pushUserRegionStore;
		}

		// Token: 0x06002253 RID: 8787 RVA: 0x000D7E80 File Offset: 0x000D6080
		public static List<PushUserRegionStore> ReadListPushUserRegionStore(byte[] data, ref int offset)
		{
			List<PushUserRegionStore> list = new List<PushUserRegionStore>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushUserRegionStore item = ArrayManager.ReadPushUserRegionStore(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002254 RID: 8788 RVA: 0x000D7EC4 File Offset: 0x000D60C4
		public static void WriteUserLogoutRequest(ref byte[] data, ref int offset, UserLogoutRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002255 RID: 8789 RVA: 0x000D7EE0 File Offset: 0x000D60E0
		public static void WriteListUserLogoutRequest(ref byte[] data, ref int offset, List<UserLogoutRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UserLogoutRequest value in values)
			{
				ArrayManager.WriteUserLogoutRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x06002256 RID: 8790 RVA: 0x000D7F5C File Offset: 0x000D615C
		public static UserLogoutRequest ReadUserLogoutRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UserLogoutRequest userLogoutRequest = new UserLogoutRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			userLogoutRequest.DeserializeMessage(array);
			return userLogoutRequest;
		}

		// Token: 0x06002257 RID: 8791 RVA: 0x000D7FA0 File Offset: 0x000D61A0
		public static List<UserLogoutRequest> ReadListUserLogoutRequest(byte[] data, ref int offset)
		{
			List<UserLogoutRequest> list = new List<UserLogoutRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UserLogoutRequest item = ArrayManager.ReadUserLogoutRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002258 RID: 8792 RVA: 0x000D7FE4 File Offset: 0x000D61E4
		public static void WriteUserLogoutResponse(ref byte[] data, ref int offset, UserLogoutResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002259 RID: 8793 RVA: 0x000D8000 File Offset: 0x000D6200
		public static void WriteListUserLogoutResponse(ref byte[] data, ref int offset, List<UserLogoutResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UserLogoutResponse value in values)
			{
				ArrayManager.WriteUserLogoutResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x0600225A RID: 8794 RVA: 0x000D807C File Offset: 0x000D627C
		public static UserLogoutResponse ReadUserLogoutResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UserLogoutResponse userLogoutResponse = new UserLogoutResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			userLogoutResponse.DeserializeMessage(array);
			return userLogoutResponse;
		}

		// Token: 0x0600225B RID: 8795 RVA: 0x000D80C0 File Offset: 0x000D62C0
		public static List<UserLogoutResponse> ReadListUserLogoutResponse(byte[] data, ref int offset)
		{
			List<UserLogoutResponse> list = new List<UserLogoutResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UserLogoutResponse item = ArrayManager.ReadUserLogoutResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600225C RID: 8796 RVA: 0x000D8104 File Offset: 0x000D6304
		public static void WritePS4LoginUserRequest(ref byte[] data, ref int offset, PS4LoginUserRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600225D RID: 8797 RVA: 0x000D8120 File Offset: 0x000D6320
		public static void WriteListPS4LoginUserRequest(ref byte[] data, ref int offset, List<PS4LoginUserRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PS4LoginUserRequest value in values)
			{
				ArrayManager.WritePS4LoginUserRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x0600225E RID: 8798 RVA: 0x000D819C File Offset: 0x000D639C
		public static PS4LoginUserRequest ReadPS4LoginUserRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PS4LoginUserRequest ps4LoginUserRequest = new PS4LoginUserRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			ps4LoginUserRequest.DeserializeMessage(array);
			return ps4LoginUserRequest;
		}

		// Token: 0x0600225F RID: 8799 RVA: 0x000D81E0 File Offset: 0x000D63E0
		public static List<PS4LoginUserRequest> ReadListPS4LoginUserRequest(byte[] data, ref int offset)
		{
			List<PS4LoginUserRequest> list = new List<PS4LoginUserRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PS4LoginUserRequest item = ArrayManager.ReadPS4LoginUserRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002260 RID: 8800 RVA: 0x000D8224 File Offset: 0x000D6424
		public static void WritePS4LoginUserResponse(ref byte[] data, ref int offset, PS4LoginUserResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002261 RID: 8801 RVA: 0x000D8240 File Offset: 0x000D6440
		public static void WriteListPS4LoginUserResponse(ref byte[] data, ref int offset, List<PS4LoginUserResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PS4LoginUserResponse value in values)
			{
				ArrayManager.WritePS4LoginUserResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x06002262 RID: 8802 RVA: 0x000D82BC File Offset: 0x000D64BC
		public static PS4LoginUserResponse ReadPS4LoginUserResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PS4LoginUserResponse ps4LoginUserResponse = new PS4LoginUserResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			ps4LoginUserResponse.DeserializeMessage(array);
			return ps4LoginUserResponse;
		}

		// Token: 0x06002263 RID: 8803 RVA: 0x000D8300 File Offset: 0x000D6500
		public static List<PS4LoginUserResponse> ReadListPS4LoginUserResponse(byte[] data, ref int offset)
		{
			List<PS4LoginUserResponse> list = new List<PS4LoginUserResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PS4LoginUserResponse item = ArrayManager.ReadPS4LoginUserResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002264 RID: 8804 RVA: 0x000D8344 File Offset: 0x000D6544
		public static void WriteRequestStoreData(ref byte[] data, ref int offset, RequestStoreData value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002265 RID: 8805 RVA: 0x000D8360 File Offset: 0x000D6560
		public static void WriteListRequestStoreData(ref byte[] data, ref int offset, List<RequestStoreData> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestStoreData value in values)
			{
				ArrayManager.WriteRequestStoreData(ref data, ref offset, value);
			}
		}

		// Token: 0x06002266 RID: 8806 RVA: 0x000D83DC File Offset: 0x000D65DC
		public static RequestStoreData ReadRequestStoreData(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestStoreData requestStoreData = new RequestStoreData();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestStoreData.DeserializeMessage(array);
			return requestStoreData;
		}

		// Token: 0x06002267 RID: 8807 RVA: 0x000D8420 File Offset: 0x000D6620
		public static List<RequestStoreData> ReadListRequestStoreData(byte[] data, ref int offset)
		{
			List<RequestStoreData> list = new List<RequestStoreData>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestStoreData item = ArrayManager.ReadRequestStoreData(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002268 RID: 8808 RVA: 0x000D8464 File Offset: 0x000D6664
		public static void WriteResponseStoreData(ref byte[] data, ref int offset, ResponseStoreData value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002269 RID: 8809 RVA: 0x000D8480 File Offset: 0x000D6680
		public static void WriteListResponseStoreData(ref byte[] data, ref int offset, List<ResponseStoreData> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseStoreData value in values)
			{
				ArrayManager.WriteResponseStoreData(ref data, ref offset, value);
			}
		}

		// Token: 0x0600226A RID: 8810 RVA: 0x000D84FC File Offset: 0x000D66FC
		public static ResponseStoreData ReadResponseStoreData(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseStoreData responseStoreData = new ResponseStoreData();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseStoreData.DeserializeMessage(array);
			return responseStoreData;
		}

		// Token: 0x0600226B RID: 8811 RVA: 0x000D8540 File Offset: 0x000D6740
		public static List<ResponseStoreData> ReadListResponseStoreData(byte[] data, ref int offset)
		{
			List<ResponseStoreData> list = new List<ResponseStoreData>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseStoreData item = ArrayManager.ReadResponseStoreData(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600226C RID: 8812 RVA: 0x000D8584 File Offset: 0x000D6784
		public static void WriteStoreDataOffer(ref byte[] data, ref int offset, StoreDataOffer value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600226D RID: 8813 RVA: 0x000D85A0 File Offset: 0x000D67A0
		public static void WriteListStoreDataOffer(ref byte[] data, ref int offset, List<StoreDataOffer> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreDataOffer value in values)
			{
				ArrayManager.WriteStoreDataOffer(ref data, ref offset, value);
			}
		}

		// Token: 0x0600226E RID: 8814 RVA: 0x000D861C File Offset: 0x000D681C
		public static StoreDataOffer ReadStoreDataOffer(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreDataOffer storeDataOffer = new StoreDataOffer();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeDataOffer.DeserializeMessage(array);
			return storeDataOffer;
		}

		// Token: 0x0600226F RID: 8815 RVA: 0x000D8660 File Offset: 0x000D6860
		public static List<StoreDataOffer> ReadListStoreDataOffer(byte[] data, ref int offset)
		{
			List<StoreDataOffer> list = new List<StoreDataOffer>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreDataOffer item = ArrayManager.ReadStoreDataOffer(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002270 RID: 8816 RVA: 0x000D86A4 File Offset: 0x000D68A4
		public static void WriteStoreDataPrice(ref byte[] data, ref int offset, StoreDataPrice value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002271 RID: 8817 RVA: 0x000D86C0 File Offset: 0x000D68C0
		public static void WriteListStoreDataPrice(ref byte[] data, ref int offset, List<StoreDataPrice> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreDataPrice value in values)
			{
				ArrayManager.WriteStoreDataPrice(ref data, ref offset, value);
			}
		}

		// Token: 0x06002272 RID: 8818 RVA: 0x000D873C File Offset: 0x000D693C
		public static StoreDataPrice ReadStoreDataPrice(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreDataPrice storeDataPrice = new StoreDataPrice();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeDataPrice.DeserializeMessage(array);
			return storeDataPrice;
		}

		// Token: 0x06002273 RID: 8819 RVA: 0x000D8780 File Offset: 0x000D6980
		public static List<StoreDataPrice> ReadListStoreDataPrice(byte[] data, ref int offset)
		{
			List<StoreDataPrice> list = new List<StoreDataPrice>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreDataPrice item = ArrayManager.ReadStoreDataPrice(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002274 RID: 8820 RVA: 0x000D87C4 File Offset: 0x000D69C4
		public static void WriteKeystoneRerollDataForNetwork(ref byte[] data, ref int offset, KeystoneRerollDataForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002275 RID: 8821 RVA: 0x000D87E0 File Offset: 0x000D69E0
		public static void WriteListKeystoneRerollDataForNetwork(ref byte[] data, ref int offset, List<KeystoneRerollDataForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneRerollDataForNetwork value in values)
			{
				ArrayManager.WriteKeystoneRerollDataForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002276 RID: 8822 RVA: 0x000D885C File Offset: 0x000D6A5C
		public static KeystoneRerollDataForNetwork ReadKeystoneRerollDataForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneRerollDataForNetwork keystoneRerollDataForNetwork = new KeystoneRerollDataForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneRerollDataForNetwork.DeserializeMessage(array);
			return keystoneRerollDataForNetwork;
		}

		// Token: 0x06002277 RID: 8823 RVA: 0x000D88A0 File Offset: 0x000D6AA0
		public static List<KeystoneRerollDataForNetwork> ReadListKeystoneRerollDataForNetwork(byte[] data, ref int offset)
		{
			List<KeystoneRerollDataForNetwork> list = new List<KeystoneRerollDataForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneRerollDataForNetwork item = ArrayManager.ReadKeystoneRerollDataForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002278 RID: 8824 RVA: 0x000D88E4 File Offset: 0x000D6AE4
		public static void WriteStoreDataDateRange(ref byte[] data, ref int offset, StoreDataDateRange value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002279 RID: 8825 RVA: 0x000D8900 File Offset: 0x000D6B00
		public static void WriteListStoreDataDateRange(ref byte[] data, ref int offset, List<StoreDataDateRange> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreDataDateRange value in values)
			{
				ArrayManager.WriteStoreDataDateRange(ref data, ref offset, value);
			}
		}

		// Token: 0x0600227A RID: 8826 RVA: 0x000D897C File Offset: 0x000D6B7C
		public static StoreDataDateRange ReadStoreDataDateRange(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreDataDateRange storeDataDateRange = new StoreDataDateRange();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeDataDateRange.DeserializeMessage(array);
			return storeDataDateRange;
		}

		// Token: 0x0600227B RID: 8827 RVA: 0x000D89C0 File Offset: 0x000D6BC0
		public static List<StoreDataDateRange> ReadListStoreDataDateRange(byte[] data, ref int offset)
		{
			List<StoreDataDateRange> list = new List<StoreDataDateRange>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreDataDateRange item = ArrayManager.ReadStoreDataDateRange(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600227C RID: 8828 RVA: 0x000D8A04 File Offset: 0x000D6C04
		public static void WriteStoreDataSaleItem(ref byte[] data, ref int offset, StoreDataSaleItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600227D RID: 8829 RVA: 0x000D8A20 File Offset: 0x000D6C20
		public static void WriteListStoreDataSaleItem(ref byte[] data, ref int offset, List<StoreDataSaleItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreDataSaleItem value in values)
			{
				ArrayManager.WriteStoreDataSaleItem(ref data, ref offset, value);
			}
		}

		// Token: 0x0600227E RID: 8830 RVA: 0x000D8A9C File Offset: 0x000D6C9C
		public static StoreDataSaleItem ReadStoreDataSaleItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreDataSaleItem storeDataSaleItem = new StoreDataSaleItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeDataSaleItem.DeserializeMessage(array);
			return storeDataSaleItem;
		}

		// Token: 0x0600227F RID: 8831 RVA: 0x000D8AE0 File Offset: 0x000D6CE0
		public static List<StoreDataSaleItem> ReadListStoreDataSaleItem(byte[] data, ref int offset)
		{
			List<StoreDataSaleItem> list = new List<StoreDataSaleItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreDataSaleItem item = ArrayManager.ReadStoreDataSaleItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002280 RID: 8832 RVA: 0x000D8B24 File Offset: 0x000D6D24
		public static void WriteStoreDataLocalizedContent(ref byte[] data, ref int offset, StoreDataLocalizedContent value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002281 RID: 8833 RVA: 0x000D8B40 File Offset: 0x000D6D40
		public static void WriteListStoreDataLocalizedContent(ref byte[] data, ref int offset, List<StoreDataLocalizedContent> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StoreDataLocalizedContent value in values)
			{
				ArrayManager.WriteStoreDataLocalizedContent(ref data, ref offset, value);
			}
		}

		// Token: 0x06002282 RID: 8834 RVA: 0x000D8BBC File Offset: 0x000D6DBC
		public static StoreDataLocalizedContent ReadStoreDataLocalizedContent(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StoreDataLocalizedContent storeDataLocalizedContent = new StoreDataLocalizedContent();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			storeDataLocalizedContent.DeserializeMessage(array);
			return storeDataLocalizedContent;
		}

		// Token: 0x06002283 RID: 8835 RVA: 0x000D8C00 File Offset: 0x000D6E00
		public static List<StoreDataLocalizedContent> ReadListStoreDataLocalizedContent(byte[] data, ref int offset)
		{
			List<StoreDataLocalizedContent> list = new List<StoreDataLocalizedContent>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StoreDataLocalizedContent item = ArrayManager.ReadStoreDataLocalizedContent(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002284 RID: 8836 RVA: 0x000D8C44 File Offset: 0x000D6E44
		public static void WriteRequestSceneContent(ref byte[] data, ref int offset, RequestSceneContent value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002285 RID: 8837 RVA: 0x000D8C60 File Offset: 0x000D6E60
		public static void WriteListRequestSceneContent(ref byte[] data, ref int offset, List<RequestSceneContent> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSceneContent value in values)
			{
				ArrayManager.WriteRequestSceneContent(ref data, ref offset, value);
			}
		}

		// Token: 0x06002286 RID: 8838 RVA: 0x000D8CDC File Offset: 0x000D6EDC
		public static RequestSceneContent ReadRequestSceneContent(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSceneContent requestSceneContent = new RequestSceneContent();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSceneContent.DeserializeMessage(array);
			return requestSceneContent;
		}

		// Token: 0x06002287 RID: 8839 RVA: 0x000D8D20 File Offset: 0x000D6F20
		public static List<RequestSceneContent> ReadListRequestSceneContent(byte[] data, ref int offset)
		{
			List<RequestSceneContent> list = new List<RequestSceneContent>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSceneContent item = ArrayManager.ReadRequestSceneContent(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002288 RID: 8840 RVA: 0x000D8D64 File Offset: 0x000D6F64
		public static void WriteContentTemplate(ref byte[] data, ref int offset, ContentTemplate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002289 RID: 8841 RVA: 0x000D8D80 File Offset: 0x000D6F80
		public static void WriteListContentTemplate(ref byte[] data, ref int offset, List<ContentTemplate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ContentTemplate value in values)
			{
				ArrayManager.WriteContentTemplate(ref data, ref offset, value);
			}
		}

		// Token: 0x0600228A RID: 8842 RVA: 0x000D8DFC File Offset: 0x000D6FFC
		public static ContentTemplate ReadContentTemplate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ContentTemplate contentTemplate = new ContentTemplate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			contentTemplate.DeserializeMessage(array);
			return contentTemplate;
		}

		// Token: 0x0600228B RID: 8843 RVA: 0x000D8E40 File Offset: 0x000D7040
		public static List<ContentTemplate> ReadListContentTemplate(byte[] data, ref int offset)
		{
			List<ContentTemplate> list = new List<ContentTemplate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ContentTemplate item = ArrayManager.ReadContentTemplate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600228C RID: 8844 RVA: 0x000D8E84 File Offset: 0x000D7084
		public static void WriteContentDefinition(ref byte[] data, ref int offset, ContentDefinition value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600228D RID: 8845 RVA: 0x000D8EA0 File Offset: 0x000D70A0
		public static void WriteListContentDefinition(ref byte[] data, ref int offset, List<ContentDefinition> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ContentDefinition value in values)
			{
				ArrayManager.WriteContentDefinition(ref data, ref offset, value);
			}
		}

		// Token: 0x0600228E RID: 8846 RVA: 0x000D8F1C File Offset: 0x000D711C
		public static ContentDefinition ReadContentDefinition(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ContentDefinition contentDefinition = new ContentDefinition();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			contentDefinition.DeserializeMessage(array);
			return contentDefinition;
		}

		// Token: 0x0600228F RID: 8847 RVA: 0x000D8F60 File Offset: 0x000D7160
		public static List<ContentDefinition> ReadListContentDefinition(byte[] data, ref int offset)
		{
			List<ContentDefinition> list = new List<ContentDefinition>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ContentDefinition item = ArrayManager.ReadContentDefinition(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002290 RID: 8848 RVA: 0x000D8FA4 File Offset: 0x000D71A4
		public static void WriteContentBox(ref byte[] data, ref int offset, ContentBox value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002291 RID: 8849 RVA: 0x000D8FC0 File Offset: 0x000D71C0
		public static void WriteListContentBox(ref byte[] data, ref int offset, List<ContentBox> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ContentBox value in values)
			{
				ArrayManager.WriteContentBox(ref data, ref offset, value);
			}
		}

		// Token: 0x06002292 RID: 8850 RVA: 0x000D903C File Offset: 0x000D723C
		public static ContentBox ReadContentBox(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ContentBox contentBox = new ContentBox();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			contentBox.DeserializeMessage(array);
			return contentBox;
		}

		// Token: 0x06002293 RID: 8851 RVA: 0x000D9080 File Offset: 0x000D7280
		public static List<ContentBox> ReadListContentBox(byte[] data, ref int offset)
		{
			List<ContentBox> list = new List<ContentBox>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ContentBox item = ArrayManager.ReadContentBox(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002294 RID: 8852 RVA: 0x000D90C4 File Offset: 0x000D72C4
		public static void WriteResponseSceneContent(ref byte[] data, ref int offset, ResponseSceneContent value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002295 RID: 8853 RVA: 0x000D90E0 File Offset: 0x000D72E0
		public static void WriteListResponseSceneContent(ref byte[] data, ref int offset, List<ResponseSceneContent> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSceneContent value in values)
			{
				ArrayManager.WriteResponseSceneContent(ref data, ref offset, value);
			}
		}

		// Token: 0x06002296 RID: 8854 RVA: 0x000D915C File Offset: 0x000D735C
		public static ResponseSceneContent ReadResponseSceneContent(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSceneContent responseSceneContent = new ResponseSceneContent();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSceneContent.DeserializeMessage(array);
			return responseSceneContent;
		}

		// Token: 0x06002297 RID: 8855 RVA: 0x000D91A0 File Offset: 0x000D73A0
		public static List<ResponseSceneContent> ReadListResponseSceneContent(byte[] data, ref int offset)
		{
			List<ResponseSceneContent> list = new List<ResponseSceneContent>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSceneContent item = ArrayManager.ReadResponseSceneContent(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002298 RID: 8856 RVA: 0x000D91E4 File Offset: 0x000D73E4
		public static void WriteRequestStoreTransaction(ref byte[] data, ref int offset, RequestStoreTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002299 RID: 8857 RVA: 0x000D9200 File Offset: 0x000D7400
		public static void WriteListRequestStoreTransaction(ref byte[] data, ref int offset, List<RequestStoreTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestStoreTransaction value in values)
			{
				ArrayManager.WriteRequestStoreTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x0600229A RID: 8858 RVA: 0x000D927C File Offset: 0x000D747C
		public static RequestStoreTransaction ReadRequestStoreTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestStoreTransaction requestStoreTransaction = new RequestStoreTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestStoreTransaction.DeserializeMessage(array);
			return requestStoreTransaction;
		}

		// Token: 0x0600229B RID: 8859 RVA: 0x000D92C0 File Offset: 0x000D74C0
		public static List<RequestStoreTransaction> ReadListRequestStoreTransaction(byte[] data, ref int offset)
		{
			List<RequestStoreTransaction> list = new List<RequestStoreTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestStoreTransaction item = ArrayManager.ReadRequestStoreTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600229C RID: 8860 RVA: 0x000D9304 File Offset: 0x000D7504
		public static void WriteResponseStoreTransaction(ref byte[] data, ref int offset, ResponseStoreTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600229D RID: 8861 RVA: 0x000D9320 File Offset: 0x000D7520
		public static void WriteListResponseStoreTransaction(ref byte[] data, ref int offset, List<ResponseStoreTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseStoreTransaction value in values)
			{
				ArrayManager.WriteResponseStoreTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x0600229E RID: 8862 RVA: 0x000D939C File Offset: 0x000D759C
		public static ResponseStoreTransaction ReadResponseStoreTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseStoreTransaction responseStoreTransaction = new ResponseStoreTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseStoreTransaction.DeserializeMessage(array);
			return responseStoreTransaction;
		}

		// Token: 0x0600229F RID: 8863 RVA: 0x000D93E0 File Offset: 0x000D75E0
		public static List<ResponseStoreTransaction> ReadListResponseStoreTransaction(byte[] data, ref int offset)
		{
			List<ResponseStoreTransaction> list = new List<ResponseStoreTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseStoreTransaction item = ArrayManager.ReadResponseStoreTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022A0 RID: 8864 RVA: 0x000D9424 File Offset: 0x000D7624
		public static void WriteRequestVirtualCurrencyTransaction(ref byte[] data, ref int offset, RequestVirtualCurrencyTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022A1 RID: 8865 RVA: 0x000D9440 File Offset: 0x000D7640
		public static void WriteListRequestVirtualCurrencyTransaction(ref byte[] data, ref int offset, List<RequestVirtualCurrencyTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestVirtualCurrencyTransaction value in values)
			{
				ArrayManager.WriteRequestVirtualCurrencyTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x060022A2 RID: 8866 RVA: 0x000D94BC File Offset: 0x000D76BC
		public static RequestVirtualCurrencyTransaction ReadRequestVirtualCurrencyTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestVirtualCurrencyTransaction requestVirtualCurrencyTransaction = new RequestVirtualCurrencyTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestVirtualCurrencyTransaction.DeserializeMessage(array);
			return requestVirtualCurrencyTransaction;
		}

		// Token: 0x060022A3 RID: 8867 RVA: 0x000D9500 File Offset: 0x000D7700
		public static List<RequestVirtualCurrencyTransaction> ReadListRequestVirtualCurrencyTransaction(byte[] data, ref int offset)
		{
			List<RequestVirtualCurrencyTransaction> list = new List<RequestVirtualCurrencyTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestVirtualCurrencyTransaction item = ArrayManager.ReadRequestVirtualCurrencyTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022A4 RID: 8868 RVA: 0x000D9544 File Offset: 0x000D7744
		public static void WriteVirtualCurrencyTransactionResponseEntry(ref byte[] data, ref int offset, VirtualCurrencyTransactionResponseEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022A5 RID: 8869 RVA: 0x000D9560 File Offset: 0x000D7760
		public static void WriteListVirtualCurrencyTransactionResponseEntry(ref byte[] data, ref int offset, List<VirtualCurrencyTransactionResponseEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (VirtualCurrencyTransactionResponseEntry value in values)
			{
				ArrayManager.WriteVirtualCurrencyTransactionResponseEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x060022A6 RID: 8870 RVA: 0x000D95DC File Offset: 0x000D77DC
		public static VirtualCurrencyTransactionResponseEntry ReadVirtualCurrencyTransactionResponseEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			VirtualCurrencyTransactionResponseEntry virtualCurrencyTransactionResponseEntry = new VirtualCurrencyTransactionResponseEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			virtualCurrencyTransactionResponseEntry.DeserializeMessage(array);
			return virtualCurrencyTransactionResponseEntry;
		}

		// Token: 0x060022A7 RID: 8871 RVA: 0x000D9620 File Offset: 0x000D7820
		public static List<VirtualCurrencyTransactionResponseEntry> ReadListVirtualCurrencyTransactionResponseEntry(byte[] data, ref int offset)
		{
			List<VirtualCurrencyTransactionResponseEntry> list = new List<VirtualCurrencyTransactionResponseEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				VirtualCurrencyTransactionResponseEntry item = ArrayManager.ReadVirtualCurrencyTransactionResponseEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022A8 RID: 8872 RVA: 0x000D9664 File Offset: 0x000D7864
		public static void WriteResponseVirtualCurrencyTransaction(ref byte[] data, ref int offset, ResponseVirtualCurrencyTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022A9 RID: 8873 RVA: 0x000D9680 File Offset: 0x000D7880
		public static void WriteListResponseVirtualCurrencyTransaction(ref byte[] data, ref int offset, List<ResponseVirtualCurrencyTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseVirtualCurrencyTransaction value in values)
			{
				ArrayManager.WriteResponseVirtualCurrencyTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x060022AA RID: 8874 RVA: 0x000D96FC File Offset: 0x000D78FC
		public static ResponseVirtualCurrencyTransaction ReadResponseVirtualCurrencyTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseVirtualCurrencyTransaction responseVirtualCurrencyTransaction = new ResponseVirtualCurrencyTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseVirtualCurrencyTransaction.DeserializeMessage(array);
			return responseVirtualCurrencyTransaction;
		}

		// Token: 0x060022AB RID: 8875 RVA: 0x000D9740 File Offset: 0x000D7940
		public static List<ResponseVirtualCurrencyTransaction> ReadListResponseVirtualCurrencyTransaction(byte[] data, ref int offset)
		{
			List<ResponseVirtualCurrencyTransaction> list = new List<ResponseVirtualCurrencyTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseVirtualCurrencyTransaction item = ArrayManager.ReadResponseVirtualCurrencyTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022AC RID: 8876 RVA: 0x000D9784 File Offset: 0x000D7984
		public static void WriteResponseLevelUnlocks(ref byte[] data, ref int offset, ResponseLevelUnlocks value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022AD RID: 8877 RVA: 0x000D97A0 File Offset: 0x000D79A0
		public static void WriteListResponseLevelUnlocks(ref byte[] data, ref int offset, List<ResponseLevelUnlocks> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseLevelUnlocks value in values)
			{
				ArrayManager.WriteResponseLevelUnlocks(ref data, ref offset, value);
			}
		}

		// Token: 0x060022AE RID: 8878 RVA: 0x000D981C File Offset: 0x000D7A1C
		public static ResponseLevelUnlocks ReadResponseLevelUnlocks(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseLevelUnlocks responseLevelUnlocks = new ResponseLevelUnlocks();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseLevelUnlocks.DeserializeMessage(array);
			return responseLevelUnlocks;
		}

		// Token: 0x060022AF RID: 8879 RVA: 0x000D9860 File Offset: 0x000D7A60
		public static List<ResponseLevelUnlocks> ReadListResponseLevelUnlocks(byte[] data, ref int offset)
		{
			List<ResponseLevelUnlocks> list = new List<ResponseLevelUnlocks>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseLevelUnlocks item = ArrayManager.ReadResponseLevelUnlocks(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022B0 RID: 8880 RVA: 0x000D98A4 File Offset: 0x000D7AA4
		public static void WritePacketLevelUnlock(ref byte[] data, ref int offset, PacketLevelUnlock value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022B1 RID: 8881 RVA: 0x000D98C0 File Offset: 0x000D7AC0
		public static void WriteListPacketLevelUnlock(ref byte[] data, ref int offset, List<PacketLevelUnlock> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketLevelUnlock value in values)
			{
				ArrayManager.WritePacketLevelUnlock(ref data, ref offset, value);
			}
		}

		// Token: 0x060022B2 RID: 8882 RVA: 0x000D993C File Offset: 0x000D7B3C
		public static PacketLevelUnlock ReadPacketLevelUnlock(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketLevelUnlock packetLevelUnlock = new PacketLevelUnlock();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetLevelUnlock.DeserializeMessage(array);
			return packetLevelUnlock;
		}

		// Token: 0x060022B3 RID: 8883 RVA: 0x000D9980 File Offset: 0x000D7B80
		public static List<PacketLevelUnlock> ReadListPacketLevelUnlock(byte[] data, ref int offset)
		{
			List<PacketLevelUnlock> list = new List<PacketLevelUnlock>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketLevelUnlock item = ArrayManager.ReadPacketLevelUnlock(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022B4 RID: 8884 RVA: 0x000D99C4 File Offset: 0x000D7BC4
		public static void WritePacketUnlockedCraftRecipe(ref byte[] data, ref int offset, PacketUnlockedCraftRecipe value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022B5 RID: 8885 RVA: 0x000D99E0 File Offset: 0x000D7BE0
		public static void WriteListPacketUnlockedCraftRecipe(ref byte[] data, ref int offset, List<PacketUnlockedCraftRecipe> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketUnlockedCraftRecipe value in values)
			{
				ArrayManager.WritePacketUnlockedCraftRecipe(ref data, ref offset, value);
			}
		}

		// Token: 0x060022B6 RID: 8886 RVA: 0x000D9A5C File Offset: 0x000D7C5C
		public static PacketUnlockedCraftRecipe ReadPacketUnlockedCraftRecipe(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketUnlockedCraftRecipe packetUnlockedCraftRecipe = new PacketUnlockedCraftRecipe();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetUnlockedCraftRecipe.DeserializeMessage(array);
			return packetUnlockedCraftRecipe;
		}

		// Token: 0x060022B7 RID: 8887 RVA: 0x000D9AA0 File Offset: 0x000D7CA0
		public static List<PacketUnlockedCraftRecipe> ReadListPacketUnlockedCraftRecipe(byte[] data, ref int offset)
		{
			List<PacketUnlockedCraftRecipe> list = new List<PacketUnlockedCraftRecipe>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketUnlockedCraftRecipe item = ArrayManager.ReadPacketUnlockedCraftRecipe(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022B8 RID: 8888 RVA: 0x000D9AE4 File Offset: 0x000D7CE4
		public static void WritePacketPlayerAward(ref byte[] data, ref int offset, PacketPlayerAward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022B9 RID: 8889 RVA: 0x000D9B00 File Offset: 0x000D7D00
		public static void WriteListPacketPlayerAward(ref byte[] data, ref int offset, List<PacketPlayerAward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketPlayerAward value in values)
			{
				ArrayManager.WritePacketPlayerAward(ref data, ref offset, value);
			}
		}

		// Token: 0x060022BA RID: 8890 RVA: 0x000D9B7C File Offset: 0x000D7D7C
		public static PacketPlayerAward ReadPacketPlayerAward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketPlayerAward packetPlayerAward = new PacketPlayerAward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetPlayerAward.DeserializeMessage(array);
			return packetPlayerAward;
		}

		// Token: 0x060022BB RID: 8891 RVA: 0x000D9BC0 File Offset: 0x000D7DC0
		public static List<PacketPlayerAward> ReadListPacketPlayerAward(byte[] data, ref int offset)
		{
			List<PacketPlayerAward> list = new List<PacketPlayerAward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketPlayerAward item = ArrayManager.ReadPacketPlayerAward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022BC RID: 8892 RVA: 0x000D9C04 File Offset: 0x000D7E04
		public static void WritePacketHeroLevelReward(ref byte[] data, ref int offset, PacketHeroLevelReward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022BD RID: 8893 RVA: 0x000D9C20 File Offset: 0x000D7E20
		public static void WriteListPacketHeroLevelReward(ref byte[] data, ref int offset, List<PacketHeroLevelReward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketHeroLevelReward value in values)
			{
				ArrayManager.WritePacketHeroLevelReward(ref data, ref offset, value);
			}
		}

		// Token: 0x060022BE RID: 8894 RVA: 0x000D9C9C File Offset: 0x000D7E9C
		public static PacketHeroLevelReward ReadPacketHeroLevelReward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketHeroLevelReward packetHeroLevelReward = new PacketHeroLevelReward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetHeroLevelReward.DeserializeMessage(array);
			return packetHeroLevelReward;
		}

		// Token: 0x060022BF RID: 8895 RVA: 0x000D9CE0 File Offset: 0x000D7EE0
		public static List<PacketHeroLevelReward> ReadListPacketHeroLevelReward(byte[] data, ref int offset)
		{
			List<PacketHeroLevelReward> list = new List<PacketHeroLevelReward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketHeroLevelReward item = ArrayManager.ReadPacketHeroLevelReward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022C0 RID: 8896 RVA: 0x000D9D24 File Offset: 0x000D7F24
		public static void WriteResponseHeroLevelRewards(ref byte[] data, ref int offset, ResponseHeroLevelRewards value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022C1 RID: 8897 RVA: 0x000D9D40 File Offset: 0x000D7F40
		public static void WriteListResponseHeroLevelRewards(ref byte[] data, ref int offset, List<ResponseHeroLevelRewards> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseHeroLevelRewards value in values)
			{
				ArrayManager.WriteResponseHeroLevelRewards(ref data, ref offset, value);
			}
		}

		// Token: 0x060022C2 RID: 8898 RVA: 0x000D9DBC File Offset: 0x000D7FBC
		public static ResponseHeroLevelRewards ReadResponseHeroLevelRewards(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseHeroLevelRewards responseHeroLevelRewards = new ResponseHeroLevelRewards();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseHeroLevelRewards.DeserializeMessage(array);
			return responseHeroLevelRewards;
		}

		// Token: 0x060022C3 RID: 8899 RVA: 0x000D9E00 File Offset: 0x000D8000
		public static List<ResponseHeroLevelRewards> ReadListResponseHeroLevelRewards(byte[] data, ref int offset)
		{
			List<ResponseHeroLevelRewards> list = new List<ResponseHeroLevelRewards>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseHeroLevelRewards item = ArrayManager.ReadResponseHeroLevelRewards(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022C4 RID: 8900 RVA: 0x000D9E44 File Offset: 0x000D8044
		public static void WritePushBaseSabotageItems(ref byte[] data, ref int offset, PushBaseSabotageItems value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022C5 RID: 8901 RVA: 0x000D9E60 File Offset: 0x000D8060
		public static void WriteListPushBaseSabotageItems(ref byte[] data, ref int offset, List<PushBaseSabotageItems> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushBaseSabotageItems value in values)
			{
				ArrayManager.WritePushBaseSabotageItems(ref data, ref offset, value);
			}
		}

		// Token: 0x060022C6 RID: 8902 RVA: 0x000D9EDC File Offset: 0x000D80DC
		public static PushBaseSabotageItems ReadPushBaseSabotageItems(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushBaseSabotageItems pushBaseSabotageItems = new PushBaseSabotageItems();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushBaseSabotageItems.DeserializeMessage(array);
			return pushBaseSabotageItems;
		}

		// Token: 0x060022C7 RID: 8903 RVA: 0x000D9F20 File Offset: 0x000D8120
		public static List<PushBaseSabotageItems> ReadListPushBaseSabotageItems(byte[] data, ref int offset)
		{
			List<PushBaseSabotageItems> list = new List<PushBaseSabotageItems>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushBaseSabotageItems item = ArrayManager.ReadPushBaseSabotageItems(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022C8 RID: 8904 RVA: 0x000D9F64 File Offset: 0x000D8164
		public static void WriteResponseLevelCurve(ref byte[] data, ref int offset, ResponseLevelCurve value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022C9 RID: 8905 RVA: 0x000D9F80 File Offset: 0x000D8180
		public static void WriteListResponseLevelCurve(ref byte[] data, ref int offset, List<ResponseLevelCurve> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseLevelCurve value in values)
			{
				ArrayManager.WriteResponseLevelCurve(ref data, ref offset, value);
			}
		}

		// Token: 0x060022CA RID: 8906 RVA: 0x000D9FFC File Offset: 0x000D81FC
		public static ResponseLevelCurve ReadResponseLevelCurve(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseLevelCurve responseLevelCurve = new ResponseLevelCurve();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseLevelCurve.DeserializeMessage(array);
			return responseLevelCurve;
		}

		// Token: 0x060022CB RID: 8907 RVA: 0x000DA040 File Offset: 0x000D8240
		public static List<ResponseLevelCurve> ReadListResponseLevelCurve(byte[] data, ref int offset)
		{
			List<ResponseLevelCurve> list = new List<ResponseLevelCurve>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseLevelCurve item = ArrayManager.ReadResponseLevelCurve(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022CC RID: 8908 RVA: 0x000DA084 File Offset: 0x000D8284
		public static void WritePacketLevelCurveEntry(ref byte[] data, ref int offset, PacketLevelCurveEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022CD RID: 8909 RVA: 0x000DA0A0 File Offset: 0x000D82A0
		public static void WriteListPacketLevelCurveEntry(ref byte[] data, ref int offset, List<PacketLevelCurveEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketLevelCurveEntry value in values)
			{
				ArrayManager.WritePacketLevelCurveEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x060022CE RID: 8910 RVA: 0x000DA11C File Offset: 0x000D831C
		public static PacketLevelCurveEntry ReadPacketLevelCurveEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketLevelCurveEntry packetLevelCurveEntry = new PacketLevelCurveEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetLevelCurveEntry.DeserializeMessage(array);
			return packetLevelCurveEntry;
		}

		// Token: 0x060022CF RID: 8911 RVA: 0x000DA160 File Offset: 0x000D8360
		public static List<PacketLevelCurveEntry> ReadListPacketLevelCurveEntry(byte[] data, ref int offset)
		{
			List<PacketLevelCurveEntry> list = new List<PacketLevelCurveEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketLevelCurveEntry item = ArrayManager.ReadPacketLevelCurveEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022D0 RID: 8912 RVA: 0x000DA1A4 File Offset: 0x000D83A4
		public static void WriteMatchmakingBonusXPConfig(ref byte[] data, ref int offset, MatchmakingBonusXPConfig value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022D1 RID: 8913 RVA: 0x000DA1C0 File Offset: 0x000D83C0
		public static void WriteListMatchmakingBonusXPConfig(ref byte[] data, ref int offset, List<MatchmakingBonusXPConfig> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MatchmakingBonusXPConfig value in values)
			{
				ArrayManager.WriteMatchmakingBonusXPConfig(ref data, ref offset, value);
			}
		}

		// Token: 0x060022D2 RID: 8914 RVA: 0x000DA23C File Offset: 0x000D843C
		public static MatchmakingBonusXPConfig ReadMatchmakingBonusXPConfig(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MatchmakingBonusXPConfig matchmakingBonusXPConfig = new MatchmakingBonusXPConfig();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			matchmakingBonusXPConfig.DeserializeMessage(array);
			return matchmakingBonusXPConfig;
		}

		// Token: 0x060022D3 RID: 8915 RVA: 0x000DA280 File Offset: 0x000D8480
		public static List<MatchmakingBonusXPConfig> ReadListMatchmakingBonusXPConfig(byte[] data, ref int offset)
		{
			List<MatchmakingBonusXPConfig> list = new List<MatchmakingBonusXPConfig>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MatchmakingBonusXPConfig item = ArrayManager.ReadMatchmakingBonusXPConfig(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022D4 RID: 8916 RVA: 0x000DA2C4 File Offset: 0x000D84C4
		public static void WriteRequestServerProtoData(ref byte[] data, ref int offset, RequestServerProtoData value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022D5 RID: 8917 RVA: 0x000DA2E0 File Offset: 0x000D84E0
		public static void WriteListRequestServerProtoData(ref byte[] data, ref int offset, List<RequestServerProtoData> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestServerProtoData value in values)
			{
				ArrayManager.WriteRequestServerProtoData(ref data, ref offset, value);
			}
		}

		// Token: 0x060022D6 RID: 8918 RVA: 0x000DA35C File Offset: 0x000D855C
		public static RequestServerProtoData ReadRequestServerProtoData(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestServerProtoData requestServerProtoData = new RequestServerProtoData();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestServerProtoData.DeserializeMessage(array);
			return requestServerProtoData;
		}

		// Token: 0x060022D7 RID: 8919 RVA: 0x000DA3A0 File Offset: 0x000D85A0
		public static List<RequestServerProtoData> ReadListRequestServerProtoData(byte[] data, ref int offset)
		{
			List<RequestServerProtoData> list = new List<RequestServerProtoData>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestServerProtoData item = ArrayManager.ReadRequestServerProtoData(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022D8 RID: 8920 RVA: 0x000DA3E4 File Offset: 0x000D85E4
		public static void WritePacketDailyLoginPeriodEntry(ref byte[] data, ref int offset, PacketDailyLoginPeriodEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022D9 RID: 8921 RVA: 0x000DA400 File Offset: 0x000D8600
		public static void WriteListPacketDailyLoginPeriodEntry(ref byte[] data, ref int offset, List<PacketDailyLoginPeriodEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketDailyLoginPeriodEntry value in values)
			{
				ArrayManager.WritePacketDailyLoginPeriodEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x060022DA RID: 8922 RVA: 0x000DA47C File Offset: 0x000D867C
		public static PacketDailyLoginPeriodEntry ReadPacketDailyLoginPeriodEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketDailyLoginPeriodEntry packetDailyLoginPeriodEntry = new PacketDailyLoginPeriodEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetDailyLoginPeriodEntry.DeserializeMessage(array);
			return packetDailyLoginPeriodEntry;
		}

		// Token: 0x060022DB RID: 8923 RVA: 0x000DA4C0 File Offset: 0x000D86C0
		public static List<PacketDailyLoginPeriodEntry> ReadListPacketDailyLoginPeriodEntry(byte[] data, ref int offset)
		{
			List<PacketDailyLoginPeriodEntry> list = new List<PacketDailyLoginPeriodEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketDailyLoginPeriodEntry item = ArrayManager.ReadPacketDailyLoginPeriodEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022DC RID: 8924 RVA: 0x000DA504 File Offset: 0x000D8704
		public static void WriteResponseDailyLoginRewards(ref byte[] data, ref int offset, ResponseDailyLoginRewards value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022DD RID: 8925 RVA: 0x000DA520 File Offset: 0x000D8720
		public static void WriteListResponseDailyLoginRewards(ref byte[] data, ref int offset, List<ResponseDailyLoginRewards> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseDailyLoginRewards value in values)
			{
				ArrayManager.WriteResponseDailyLoginRewards(ref data, ref offset, value);
			}
		}

		// Token: 0x060022DE RID: 8926 RVA: 0x000DA59C File Offset: 0x000D879C
		public static ResponseDailyLoginRewards ReadResponseDailyLoginRewards(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseDailyLoginRewards responseDailyLoginRewards = new ResponseDailyLoginRewards();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseDailyLoginRewards.DeserializeMessage(array);
			return responseDailyLoginRewards;
		}

		// Token: 0x060022DF RID: 8927 RVA: 0x000DA5E0 File Offset: 0x000D87E0
		public static List<ResponseDailyLoginRewards> ReadListResponseDailyLoginRewards(byte[] data, ref int offset)
		{
			List<ResponseDailyLoginRewards> list = new List<ResponseDailyLoginRewards>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseDailyLoginRewards item = ArrayManager.ReadResponseDailyLoginRewards(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022E0 RID: 8928 RVA: 0x000DA624 File Offset: 0x000D8824
		public static void WriteRegexPattern(ref byte[] data, ref int offset, RegexPattern value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022E1 RID: 8929 RVA: 0x000DA640 File Offset: 0x000D8840
		public static void WriteListRegexPattern(ref byte[] data, ref int offset, List<RegexPattern> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RegexPattern value in values)
			{
				ArrayManager.WriteRegexPattern(ref data, ref offset, value);
			}
		}

		// Token: 0x060022E2 RID: 8930 RVA: 0x000DA6BC File Offset: 0x000D88BC
		public static RegexPattern ReadRegexPattern(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RegexPattern regexPattern = new RegexPattern();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			regexPattern.DeserializeMessage(array);
			return regexPattern;
		}

		// Token: 0x060022E3 RID: 8931 RVA: 0x000DA700 File Offset: 0x000D8900
		public static List<RegexPattern> ReadListRegexPattern(byte[] data, ref int offset)
		{
			List<RegexPattern> list = new List<RegexPattern>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RegexPattern item = ArrayManager.ReadRegexPattern(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022E4 RID: 8932 RVA: 0x000DA744 File Offset: 0x000D8944
		public static void WriteGuildRegexPattern(ref byte[] data, ref int offset, GuildRegexPattern value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022E5 RID: 8933 RVA: 0x000DA760 File Offset: 0x000D8960
		public static void WriteListGuildRegexPattern(ref byte[] data, ref int offset, List<GuildRegexPattern> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildRegexPattern value in values)
			{
				ArrayManager.WriteGuildRegexPattern(ref data, ref offset, value);
			}
		}

		// Token: 0x060022E6 RID: 8934 RVA: 0x000DA7DC File Offset: 0x000D89DC
		public static GuildRegexPattern ReadGuildRegexPattern(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildRegexPattern guildRegexPattern = new GuildRegexPattern();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildRegexPattern.DeserializeMessage(array);
			return guildRegexPattern;
		}

		// Token: 0x060022E7 RID: 8935 RVA: 0x000DA820 File Offset: 0x000D8A20
		public static List<GuildRegexPattern> ReadListGuildRegexPattern(byte[] data, ref int offset)
		{
			List<GuildRegexPattern> list = new List<GuildRegexPattern>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildRegexPattern item = ArrayManager.ReadGuildRegexPattern(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022E8 RID: 8936 RVA: 0x000DA864 File Offset: 0x000D8A64
		public static void WriteValidationRegex(ref byte[] data, ref int offset, ValidationRegex value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022E9 RID: 8937 RVA: 0x000DA880 File Offset: 0x000D8A80
		public static void WriteListValidationRegex(ref byte[] data, ref int offset, List<ValidationRegex> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ValidationRegex value in values)
			{
				ArrayManager.WriteValidationRegex(ref data, ref offset, value);
			}
		}

		// Token: 0x060022EA RID: 8938 RVA: 0x000DA8FC File Offset: 0x000D8AFC
		public static ValidationRegex ReadValidationRegex(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ValidationRegex validationRegex = new ValidationRegex();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			validationRegex.DeserializeMessage(array);
			return validationRegex;
		}

		// Token: 0x060022EB RID: 8939 RVA: 0x000DA940 File Offset: 0x000D8B40
		public static List<ValidationRegex> ReadListValidationRegex(byte[] data, ref int offset)
		{
			List<ValidationRegex> list = new List<ValidationRegex>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ValidationRegex item = ArrayManager.ReadValidationRegex(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022EC RID: 8940 RVA: 0x000DA984 File Offset: 0x000D8B84
		public static void WriteGuildCreationRegex(ref byte[] data, ref int offset, GuildCreationRegex value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022ED RID: 8941 RVA: 0x000DA9A0 File Offset: 0x000D8BA0
		public static void WriteListGuildCreationRegex(ref byte[] data, ref int offset, List<GuildCreationRegex> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildCreationRegex value in values)
			{
				ArrayManager.WriteGuildCreationRegex(ref data, ref offset, value);
			}
		}

		// Token: 0x060022EE RID: 8942 RVA: 0x000DAA1C File Offset: 0x000D8C1C
		public static GuildCreationRegex ReadGuildCreationRegex(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildCreationRegex guildCreationRegex = new GuildCreationRegex();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildCreationRegex.DeserializeMessage(array);
			return guildCreationRegex;
		}

		// Token: 0x060022EF RID: 8943 RVA: 0x000DAA60 File Offset: 0x000D8C60
		public static List<GuildCreationRegex> ReadListGuildCreationRegex(byte[] data, ref int offset)
		{
			List<GuildCreationRegex> list = new List<GuildCreationRegex>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildCreationRegex item = ArrayManager.ReadGuildCreationRegex(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022F0 RID: 8944 RVA: 0x000DAAA4 File Offset: 0x000D8CA4
		public static void WriteTrapTier(ref byte[] data, ref int offset, TrapTier value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022F1 RID: 8945 RVA: 0x000DAAC0 File Offset: 0x000D8CC0
		public static void WriteListTrapTier(ref byte[] data, ref int offset, List<TrapTier> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TrapTier value in values)
			{
				ArrayManager.WriteTrapTier(ref data, ref offset, value);
			}
		}

		// Token: 0x060022F2 RID: 8946 RVA: 0x000DAB3C File Offset: 0x000D8D3C
		public static TrapTier ReadTrapTier(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TrapTier trapTier = new TrapTier();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			trapTier.DeserializeMessage(array);
			return trapTier;
		}

		// Token: 0x060022F3 RID: 8947 RVA: 0x000DAB80 File Offset: 0x000D8D80
		public static List<TrapTier> ReadListTrapTier(byte[] data, ref int offset)
		{
			List<TrapTier> list = new List<TrapTier>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TrapTier item = ArrayManager.ReadTrapTier(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022F4 RID: 8948 RVA: 0x000DABC4 File Offset: 0x000D8DC4
		public static void WriteEventChestProto(ref byte[] data, ref int offset, EventChestProto value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022F5 RID: 8949 RVA: 0x000DABE0 File Offset: 0x000D8DE0
		public static void WriteListEventChestProto(ref byte[] data, ref int offset, List<EventChestProto> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (EventChestProto value in values)
			{
				ArrayManager.WriteEventChestProto(ref data, ref offset, value);
			}
		}

		// Token: 0x060022F6 RID: 8950 RVA: 0x000DAC5C File Offset: 0x000D8E5C
		public static EventChestProto ReadEventChestProto(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			EventChestProto eventChestProto = new EventChestProto();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			eventChestProto.DeserializeMessage(array);
			return eventChestProto;
		}

		// Token: 0x060022F7 RID: 8951 RVA: 0x000DACA0 File Offset: 0x000D8EA0
		public static List<EventChestProto> ReadListEventChestProto(byte[] data, ref int offset)
		{
			List<EventChestProto> list = new List<EventChestProto>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				EventChestProto item = ArrayManager.ReadEventChestProto(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022F8 RID: 8952 RVA: 0x000DACE4 File Offset: 0x000D8EE4
		public static void WriteEventChestProtoItem(ref byte[] data, ref int offset, EventChestProtoItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022F9 RID: 8953 RVA: 0x000DAD00 File Offset: 0x000D8F00
		public static void WriteListEventChestProtoItem(ref byte[] data, ref int offset, List<EventChestProtoItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (EventChestProtoItem value in values)
			{
				ArrayManager.WriteEventChestProtoItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060022FA RID: 8954 RVA: 0x000DAD7C File Offset: 0x000D8F7C
		public static EventChestProtoItem ReadEventChestProtoItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			EventChestProtoItem eventChestProtoItem = new EventChestProtoItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			eventChestProtoItem.DeserializeMessage(array);
			return eventChestProtoItem;
		}

		// Token: 0x060022FB RID: 8955 RVA: 0x000DADC0 File Offset: 0x000D8FC0
		public static List<EventChestProtoItem> ReadListEventChestProtoItem(byte[] data, ref int offset)
		{
			List<EventChestProtoItem> list = new List<EventChestProtoItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				EventChestProtoItem item = ArrayManager.ReadEventChestProtoItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060022FC RID: 8956 RVA: 0x000DAE04 File Offset: 0x000D9004
		public static void WriteResponseEventChestContents(ref byte[] data, ref int offset, ResponseEventChestContents value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060022FD RID: 8957 RVA: 0x000DAE20 File Offset: 0x000D9020
		public static void WriteListResponseEventChestContents(ref byte[] data, ref int offset, List<ResponseEventChestContents> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseEventChestContents value in values)
			{
				ArrayManager.WriteResponseEventChestContents(ref data, ref offset, value);
			}
		}

		// Token: 0x060022FE RID: 8958 RVA: 0x000DAE9C File Offset: 0x000D909C
		public static ResponseEventChestContents ReadResponseEventChestContents(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseEventChestContents responseEventChestContents = new ResponseEventChestContents();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseEventChestContents.DeserializeMessage(array);
			return responseEventChestContents;
		}

		// Token: 0x060022FF RID: 8959 RVA: 0x000DAEE0 File Offset: 0x000D90E0
		public static List<ResponseEventChestContents> ReadListResponseEventChestContents(byte[] data, ref int offset)
		{
			List<ResponseEventChestContents> list = new List<ResponseEventChestContents>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseEventChestContents item = ArrayManager.ReadResponseEventChestContents(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002300 RID: 8960 RVA: 0x000DAF24 File Offset: 0x000D9124
		public static void WriteResponseDashboardConfigs(ref byte[] data, ref int offset, ResponseDashboardConfigs value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002301 RID: 8961 RVA: 0x000DAF40 File Offset: 0x000D9140
		public static void WriteListResponseDashboardConfigs(ref byte[] data, ref int offset, List<ResponseDashboardConfigs> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseDashboardConfigs value in values)
			{
				ArrayManager.WriteResponseDashboardConfigs(ref data, ref offset, value);
			}
		}

		// Token: 0x06002302 RID: 8962 RVA: 0x000DAFBC File Offset: 0x000D91BC
		public static ResponseDashboardConfigs ReadResponseDashboardConfigs(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseDashboardConfigs responseDashboardConfigs = new ResponseDashboardConfigs();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseDashboardConfigs.DeserializeMessage(array);
			return responseDashboardConfigs;
		}

		// Token: 0x06002303 RID: 8963 RVA: 0x000DB000 File Offset: 0x000D9200
		public static List<ResponseDashboardConfigs> ReadListResponseDashboardConfigs(byte[] data, ref int offset)
		{
			List<ResponseDashboardConfigs> list = new List<ResponseDashboardConfigs>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseDashboardConfigs item = ArrayManager.ReadResponseDashboardConfigs(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002304 RID: 8964 RVA: 0x000DB044 File Offset: 0x000D9244
		public static void WritePushDailyLoginReward(ref byte[] data, ref int offset, PushDailyLoginReward value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002305 RID: 8965 RVA: 0x000DB060 File Offset: 0x000D9260
		public static void WriteListPushDailyLoginReward(ref byte[] data, ref int offset, List<PushDailyLoginReward> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushDailyLoginReward value in values)
			{
				ArrayManager.WritePushDailyLoginReward(ref data, ref offset, value);
			}
		}

		// Token: 0x06002306 RID: 8966 RVA: 0x000DB0DC File Offset: 0x000D92DC
		public static PushDailyLoginReward ReadPushDailyLoginReward(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushDailyLoginReward pushDailyLoginReward = new PushDailyLoginReward();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushDailyLoginReward.DeserializeMessage(array);
			return pushDailyLoginReward;
		}

		// Token: 0x06002307 RID: 8967 RVA: 0x000DB120 File Offset: 0x000D9320
		public static List<PushDailyLoginReward> ReadListPushDailyLoginReward(byte[] data, ref int offset)
		{
			List<PushDailyLoginReward> list = new List<PushDailyLoginReward>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushDailyLoginReward item = ArrayManager.ReadPushDailyLoginReward(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002308 RID: 8968 RVA: 0x000DB164 File Offset: 0x000D9364
		public static void WritePushLimitedTimeOffers(ref byte[] data, ref int offset, PushLimitedTimeOffers value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002309 RID: 8969 RVA: 0x000DB180 File Offset: 0x000D9380
		public static void WriteListPushLimitedTimeOffers(ref byte[] data, ref int offset, List<PushLimitedTimeOffers> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushLimitedTimeOffers value in values)
			{
				ArrayManager.WritePushLimitedTimeOffers(ref data, ref offset, value);
			}
		}

		// Token: 0x0600230A RID: 8970 RVA: 0x000DB1FC File Offset: 0x000D93FC
		public static PushLimitedTimeOffers ReadPushLimitedTimeOffers(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushLimitedTimeOffers pushLimitedTimeOffers = new PushLimitedTimeOffers();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushLimitedTimeOffers.DeserializeMessage(array);
			return pushLimitedTimeOffers;
		}

		// Token: 0x0600230B RID: 8971 RVA: 0x000DB240 File Offset: 0x000D9440
		public static List<PushLimitedTimeOffers> ReadListPushLimitedTimeOffers(byte[] data, ref int offset)
		{
			List<PushLimitedTimeOffers> list = new List<PushLimitedTimeOffers>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushLimitedTimeOffers item = ArrayManager.ReadPushLimitedTimeOffers(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600230C RID: 8972 RVA: 0x000DB284 File Offset: 0x000D9484
		public static void WriteRequestReplaceQuest(ref byte[] data, ref int offset, RequestReplaceQuest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600230D RID: 8973 RVA: 0x000DB2A0 File Offset: 0x000D94A0
		public static void WriteListRequestReplaceQuest(ref byte[] data, ref int offset, List<RequestReplaceQuest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestReplaceQuest value in values)
			{
				ArrayManager.WriteRequestReplaceQuest(ref data, ref offset, value);
			}
		}

		// Token: 0x0600230E RID: 8974 RVA: 0x000DB31C File Offset: 0x000D951C
		public static RequestReplaceQuest ReadRequestReplaceQuest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestReplaceQuest requestReplaceQuest = new RequestReplaceQuest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestReplaceQuest.DeserializeMessage(array);
			return requestReplaceQuest;
		}

		// Token: 0x0600230F RID: 8975 RVA: 0x000DB360 File Offset: 0x000D9560
		public static List<RequestReplaceQuest> ReadListRequestReplaceQuest(byte[] data, ref int offset)
		{
			List<RequestReplaceQuest> list = new List<RequestReplaceQuest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestReplaceQuest item = ArrayManager.ReadRequestReplaceQuest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002310 RID: 8976 RVA: 0x000DB3A4 File Offset: 0x000D95A4
		public static void WriteRequestRefreshQuests(ref byte[] data, ref int offset, RequestRefreshQuests value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002311 RID: 8977 RVA: 0x000DB3C0 File Offset: 0x000D95C0
		public static void WriteListRequestRefreshQuests(ref byte[] data, ref int offset, List<RequestRefreshQuests> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestRefreshQuests value in values)
			{
				ArrayManager.WriteRequestRefreshQuests(ref data, ref offset, value);
			}
		}

		// Token: 0x06002312 RID: 8978 RVA: 0x000DB43C File Offset: 0x000D963C
		public static RequestRefreshQuests ReadRequestRefreshQuests(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestRefreshQuests requestRefreshQuests = new RequestRefreshQuests();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestRefreshQuests.DeserializeMessage(array);
			return requestRefreshQuests;
		}

		// Token: 0x06002313 RID: 8979 RVA: 0x000DB480 File Offset: 0x000D9680
		public static List<RequestRefreshQuests> ReadListRequestRefreshQuests(byte[] data, ref int offset)
		{
			List<RequestRefreshQuests> list = new List<RequestRefreshQuests>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestRefreshQuests item = ArrayManager.ReadRequestRefreshQuests(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002314 RID: 8980 RVA: 0x000DB4C4 File Offset: 0x000D96C4
		public static void WriteReplaceQuestStatus(ref byte[] data, ref int offset, ReplaceQuestStatus value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002315 RID: 8981 RVA: 0x000DB4E0 File Offset: 0x000D96E0
		public static void WriteListReplaceQuestStatus(ref byte[] data, ref int offset, List<ReplaceQuestStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ReplaceQuestStatus value in values)
			{
				ArrayManager.WriteReplaceQuestStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06002316 RID: 8982 RVA: 0x000DB55C File Offset: 0x000D975C
		public static ReplaceQuestStatus ReadReplaceQuestStatus(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ReplaceQuestStatus replaceQuestStatus = new ReplaceQuestStatus();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			replaceQuestStatus.DeserializeMessage(array);
			return replaceQuestStatus;
		}

		// Token: 0x06002317 RID: 8983 RVA: 0x000DB5A0 File Offset: 0x000D97A0
		public static List<ReplaceQuestStatus> ReadListReplaceQuestStatus(byte[] data, ref int offset)
		{
			List<ReplaceQuestStatus> list = new List<ReplaceQuestStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ReplaceQuestStatus item = ArrayManager.ReadReplaceQuestStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002318 RID: 8984 RVA: 0x000DB5E4 File Offset: 0x000D97E4
		public static void WriteResponseReplaceQuest(ref byte[] data, ref int offset, ResponseReplaceQuest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002319 RID: 8985 RVA: 0x000DB600 File Offset: 0x000D9800
		public static void WriteListResponseReplaceQuest(ref byte[] data, ref int offset, List<ResponseReplaceQuest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseReplaceQuest value in values)
			{
				ArrayManager.WriteResponseReplaceQuest(ref data, ref offset, value);
			}
		}

		// Token: 0x0600231A RID: 8986 RVA: 0x000DB67C File Offset: 0x000D987C
		public static ResponseReplaceQuest ReadResponseReplaceQuest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseReplaceQuest responseReplaceQuest = new ResponseReplaceQuest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseReplaceQuest.DeserializeMessage(array);
			return responseReplaceQuest;
		}

		// Token: 0x0600231B RID: 8987 RVA: 0x000DB6C0 File Offset: 0x000D98C0
		public static List<ResponseReplaceQuest> ReadListResponseReplaceQuest(byte[] data, ref int offset)
		{
			List<ResponseReplaceQuest> list = new List<ResponseReplaceQuest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseReplaceQuest item = ArrayManager.ReadResponseReplaceQuest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600231C RID: 8988 RVA: 0x000DB704 File Offset: 0x000D9904
		public static void WriteCanReplaceQuests(ref byte[] data, ref int offset, CanReplaceQuests value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600231D RID: 8989 RVA: 0x000DB720 File Offset: 0x000D9920
		public static void WriteListCanReplaceQuests(ref byte[] data, ref int offset, List<CanReplaceQuests> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CanReplaceQuests value in values)
			{
				ArrayManager.WriteCanReplaceQuests(ref data, ref offset, value);
			}
		}

		// Token: 0x0600231E RID: 8990 RVA: 0x000DB79C File Offset: 0x000D999C
		public static CanReplaceQuests ReadCanReplaceQuests(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CanReplaceQuests canReplaceQuests = new CanReplaceQuests();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			canReplaceQuests.DeserializeMessage(array);
			return canReplaceQuests;
		}

		// Token: 0x0600231F RID: 8991 RVA: 0x000DB7E0 File Offset: 0x000D99E0
		public static List<CanReplaceQuests> ReadListCanReplaceQuests(byte[] data, ref int offset)
		{
			List<CanReplaceQuests> list = new List<CanReplaceQuests>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CanReplaceQuests item = ArrayManager.ReadCanReplaceQuests(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002320 RID: 8992 RVA: 0x000DB824 File Offset: 0x000D9A24
		public static void WritePushActiveQuests(ref byte[] data, ref int offset, PushActiveQuests value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002321 RID: 8993 RVA: 0x000DB840 File Offset: 0x000D9A40
		public static void WriteListPushActiveQuests(ref byte[] data, ref int offset, List<PushActiveQuests> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushActiveQuests value in values)
			{
				ArrayManager.WritePushActiveQuests(ref data, ref offset, value);
			}
		}

		// Token: 0x06002322 RID: 8994 RVA: 0x000DB8BC File Offset: 0x000D9ABC
		public static PushActiveQuests ReadPushActiveQuests(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushActiveQuests pushActiveQuests = new PushActiveQuests();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushActiveQuests.DeserializeMessage(array);
			return pushActiveQuests;
		}

		// Token: 0x06002323 RID: 8995 RVA: 0x000DB900 File Offset: 0x000D9B00
		public static List<PushActiveQuests> ReadListPushActiveQuests(byte[] data, ref int offset)
		{
			List<PushActiveQuests> list = new List<PushActiveQuests>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushActiveQuests item = ArrayManager.ReadPushActiveQuests(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002324 RID: 8996 RVA: 0x000DB944 File Offset: 0x000D9B44
		public static void WritePushCompletedQuests(ref byte[] data, ref int offset, PushCompletedQuests value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002325 RID: 8997 RVA: 0x000DB960 File Offset: 0x000D9B60
		public static void WriteListPushCompletedQuests(ref byte[] data, ref int offset, List<PushCompletedQuests> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushCompletedQuests value in values)
			{
				ArrayManager.WritePushCompletedQuests(ref data, ref offset, value);
			}
		}

		// Token: 0x06002326 RID: 8998 RVA: 0x000DB9DC File Offset: 0x000D9BDC
		public static PushCompletedQuests ReadPushCompletedQuests(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushCompletedQuests pushCompletedQuests = new PushCompletedQuests();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushCompletedQuests.DeserializeMessage(array);
			return pushCompletedQuests;
		}

		// Token: 0x06002327 RID: 8999 RVA: 0x000DBA20 File Offset: 0x000D9C20
		public static List<PushCompletedQuests> ReadListPushCompletedQuests(byte[] data, ref int offset)
		{
			List<PushCompletedQuests> list = new List<PushCompletedQuests>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushCompletedQuests item = ArrayManager.ReadPushCompletedQuests(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002328 RID: 9000 RVA: 0x000DBA64 File Offset: 0x000D9C64
		public static void WritePushCanceledQuests(ref byte[] data, ref int offset, PushCanceledQuests value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002329 RID: 9001 RVA: 0x000DBA80 File Offset: 0x000D9C80
		public static void WriteListPushCanceledQuests(ref byte[] data, ref int offset, List<PushCanceledQuests> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushCanceledQuests value in values)
			{
				ArrayManager.WritePushCanceledQuests(ref data, ref offset, value);
			}
		}

		// Token: 0x0600232A RID: 9002 RVA: 0x000DBAFC File Offset: 0x000D9CFC
		public static PushCanceledQuests ReadPushCanceledQuests(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushCanceledQuests pushCanceledQuests = new PushCanceledQuests();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushCanceledQuests.DeserializeMessage(array);
			return pushCanceledQuests;
		}

		// Token: 0x0600232B RID: 9003 RVA: 0x000DBB40 File Offset: 0x000D9D40
		public static List<PushCanceledQuests> ReadListPushCanceledQuests(byte[] data, ref int offset)
		{
			List<PushCanceledQuests> list = new List<PushCanceledQuests>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushCanceledQuests item = ArrayManager.ReadPushCanceledQuests(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600232C RID: 9004 RVA: 0x000DBB84 File Offset: 0x000D9D84
		public static void WriteQuestForNetwork(ref byte[] data, ref int offset, QuestForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600232D RID: 9005 RVA: 0x000DBBA0 File Offset: 0x000D9DA0
		public static void WriteListQuestForNetwork(ref byte[] data, ref int offset, List<QuestForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (QuestForNetwork value in values)
			{
				ArrayManager.WriteQuestForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600232E RID: 9006 RVA: 0x000DBC1C File Offset: 0x000D9E1C
		public static QuestForNetwork ReadQuestForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			QuestForNetwork questForNetwork = new QuestForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			questForNetwork.DeserializeMessage(array);
			return questForNetwork;
		}

		// Token: 0x0600232F RID: 9007 RVA: 0x000DBC60 File Offset: 0x000D9E60
		public static List<QuestForNetwork> ReadListQuestForNetwork(byte[] data, ref int offset)
		{
			List<QuestForNetwork> list = new List<QuestForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				QuestForNetwork item = ArrayManager.ReadQuestForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002330 RID: 9008 RVA: 0x000DBCA4 File Offset: 0x000D9EA4
		public static void WriteQuestTaskForNetwork(ref byte[] data, ref int offset, QuestTaskForNetwork value)
		{
			uint value2 = 0u;
			if (value == null)
			{
				value2 = 0u;
			}
			else if (value.GetType() == typeof(ArchetypeTaskForNetwork))
			{
				value2 = 3189879827u;
			}
			else if (value.GetType() == typeof(HeroFirstVictoryTaskForNetwork))
			{
				value2 = 824711373u;
			}
			else if (value.GetType() == typeof(GetStarsTaskForNetwork))
			{
				value2 = 3982397481u;
			}
			else if (value.GetType() == typeof(WinGamesWithCustomDeckTaskForNetwork))
			{
				value2 = 3803304233u;
			}
			else if (value.GetType() == typeof(CreateDeckTaskForNetwork))
			{
				value2 = 2900025004u;
			}
			else if (value.GetType() == typeof(SlotPartInTrapTaskForNetwork))
			{
				value2 = 2425471205u;
			}
			else if (value.GetType() == typeof(UpgradeTrapToTierTaskForNetwork))
			{
				value2 = 359492791u;
			}
			else if (value.GetType() == typeof(UpgradeTrapTaskForNetwork))
			{
				value2 = 815326173u;
			}
			else if (value.GetType() == typeof(SurviveEndlessWaveTaskForNetwork))
			{
				value2 = 3613682038u;
			}
			else if (value.GetType() == typeof(WinWeeklyChallengesTaskForNetwork))
			{
				value2 = 1258796817u;
			}
			else if (value.GetType() == typeof(WinMatchmadeGamesTaskForNetwork))
			{
				value2 = 2902557865u;
			}
			else if (value.GetType() == typeof(WinGamesSoloTaskForNetwork))
			{
				value2 = 1373468347u;
			}
			else if (value.GetType() == typeof(WinGamesWhileInPartyTaskForNetwork))
			{
				value2 = 2353097081u;
			}
			else if (value.GetType() == typeof(WinNumberOfGamesTaskForNetwork))
			{
				value2 = 438611061u;
			}
			else if (value.GetType() == typeof(PlayGamesTaskForNetwork))
			{
				value2 = 567682249u;
			}
			else if (value.GetType() == typeof(PrimaryAbilityTaskForNetwork))
			{
				value2 = 3024162144u;
			}
			else if (value.GetType() == typeof(SecondaryAbilityTaskForNetwork))
			{
				value2 = 1640444437u;
			}
			else if (value.GetType() == typeof(PlaceGuardiansTaskForNetwork))
			{
				value2 = 2770328582u;
			}
			else if (value.GetType() == typeof(TrapKillsTaskForNetwork))
			{
				value2 = 372647321u;
			}
			else if (value.GetType() == typeof(TrapDamageTaskForNetwork))
			{
				value2 = 2523640248u;
			}
			else if (value.GetType() == typeof(BattleLevelTaskForNetwork))
			{
				value2 = 1386190342u;
			}
			else if (value.GetType() == typeof(EarnCoinTaskForNetwork))
			{
				value2 = 2152133468u;
			}
			else if (value.GetType() == typeof(PhysicalDamageTaskForNetwork))
			{
				value2 = 2011154229u;
			}
			else if (value.GetType() == typeof(FireDamageTaskForNetwork))
			{
				value2 = 291343381u;
			}
			else if (value.GetType() == typeof(FrostDamageTaskForNetwork))
			{
				value2 = 1304569653u;
			}
			else if (value.GetType() == typeof(ArcaneDamageTaskForNetwork))
			{
				value2 = 2812040384u;
			}
			else if (value.GetType() == typeof(LightningDamageTaskForNetwork))
			{
				value2 = 2668310269u;
			}
			else if (value.GetType() == typeof(SpendCoinTaskForNetwork))
			{
				value2 = 510617338u;
			}
			else if (value.GetType() == typeof(PickupCoinTaskForNetwork))
			{
				value2 = 333445641u;
			}
			else if (value.GetType() == typeof(PlayMatchmadeGameTaskForNetwork))
			{
				value2 = 1282244478u;
			}
			else if (value.GetType() == typeof(KillMinionsTaskForNetwork))
			{
				value2 = 2975266983u;
			}
			else if (value.GetType() == typeof(KillPlayersTaskForNetwork))
			{
				value2 = 1744587998u;
			}
			else if (value.GetType() == typeof(KillPlayersOrAssistsTaskForNetwork))
			{
				value2 = 1364594490u;
			}
			else if (value.GetType() == typeof(MapTaskForNetwork))
			{
				value2 = 383728357u;
			}
			else if (value.GetType() == typeof(HeroTaskForNetwork))
			{
				value2 = 37843363u;
			}
			else if (value.GetType() == typeof(HeroMatchmadeGameTaskForNetwork))
			{
				value2 = 3961090072u;
			}
			else if (value.GetType() == typeof(HeroLevelTaskForNetwork))
			{
				value2 = 3372718083u;
			}
			else if (value.GetType() == typeof(PlayGameTypeTaskForNetwork))
			{
				value2 = 1941499997u;
			}
			else if (value.GetType() == typeof(PlayerAssistTaskForNetwork))
			{
				value2 = 3719413140u;
			}
			else if (value.GetType() == typeof(TotalDamageDealtTaskForNetwork))
			{
				value2 = 4180579639u;
			}
			else if (value.GetType() == typeof(DamageDealtToPlayersTaskForNetwork))
			{
				value2 = 1643872712u;
			}
			else if (value.GetType() == typeof(DamageDealtToMinionsTaskForNetwork))
			{
				value2 = 3075552689u;
			}
			else if (value.GetType() == typeof(TrapTaskForNetwork))
			{
				value2 = 3638388537u;
			}
			else if (value.GetType() == typeof(ComboTaskForNetwork))
			{
				value2 = 3981696596u;
			}
			else if (value.GetType() == typeof(AddFriendTaskForNetwork))
			{
				value2 = 1990719653u;
			}
			else if (value.GetType() == typeof(CreatePartyTaskForNetwork))
			{
				value2 = 1921601521u;
			}
			else if (value.GetType() == typeof(JoinPartyTaskForNetwork))
			{
				value2 = 2003587898u;
			}
			byte[] array = value.SerializeMessage();
			byte[] array2 = new byte[array.Length + 4];
			Array.Copy(BitConverter.GetBytes(value2), 0, array2, 0, 4);
			Array.Copy(array, 0, array2, 4, array.Length);
			ArrayManager.WriteByteArray(ref data, ref offset, array2);
		}

		// Token: 0x06002331 RID: 9009 RVA: 0x000DC2D0 File Offset: 0x000DA4D0
		public static void WriteListQuestTaskForNetwork(ref byte[] data, ref int offset, List<QuestTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (QuestTaskForNetwork value in values)
			{
				ArrayManager.WriteQuestTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002332 RID: 9010 RVA: 0x000DC34C File Offset: 0x000DA54C
		public static QuestTaskForNetwork ReadQuestTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			uint num2 = BitConverter.ToUInt32(data, offset);
			offset += 4;
			QuestTaskForNetwork questTaskForNetwork = null;
			if (num2 == 0u)
			{
				return questTaskForNetwork;
			}
			if (num2 == 3189879827u)
			{
				questTaskForNetwork = new ArchetypeTaskForNetwork();
			}
			else if (num2 == 824711373u)
			{
				questTaskForNetwork = new HeroFirstVictoryTaskForNetwork();
			}
			else if (num2 == 3982397481u)
			{
				questTaskForNetwork = new GetStarsTaskForNetwork();
			}
			else if (num2 == 3803304233u)
			{
				questTaskForNetwork = new WinGamesWithCustomDeckTaskForNetwork();
			}
			else if (num2 == 2900025004u)
			{
				questTaskForNetwork = new CreateDeckTaskForNetwork();
			}
			else if (num2 == 2425471205u)
			{
				questTaskForNetwork = new SlotPartInTrapTaskForNetwork();
			}
			else if (num2 == 359492791u)
			{
				questTaskForNetwork = new UpgradeTrapToTierTaskForNetwork();
			}
			else if (num2 == 815326173u)
			{
				questTaskForNetwork = new UpgradeTrapTaskForNetwork();
			}
			else if (num2 == 3613682038u)
			{
				questTaskForNetwork = new SurviveEndlessWaveTaskForNetwork();
			}
			else if (num2 == 1258796817u)
			{
				questTaskForNetwork = new WinWeeklyChallengesTaskForNetwork();
			}
			else if (num2 == 2902557865u)
			{
				questTaskForNetwork = new WinMatchmadeGamesTaskForNetwork();
			}
			else if (num2 == 1373468347u)
			{
				questTaskForNetwork = new WinGamesSoloTaskForNetwork();
			}
			else if (num2 == 2353097081u)
			{
				questTaskForNetwork = new WinGamesWhileInPartyTaskForNetwork();
			}
			else if (num2 == 438611061u)
			{
				questTaskForNetwork = new WinNumberOfGamesTaskForNetwork();
			}
			else if (num2 == 567682249u)
			{
				questTaskForNetwork = new PlayGamesTaskForNetwork();
			}
			else if (num2 == 3024162144u)
			{
				questTaskForNetwork = new PrimaryAbilityTaskForNetwork();
			}
			else if (num2 == 1640444437u)
			{
				questTaskForNetwork = new SecondaryAbilityTaskForNetwork();
			}
			else if (num2 == 2770328582u)
			{
				questTaskForNetwork = new PlaceGuardiansTaskForNetwork();
			}
			else if (num2 == 372647321u)
			{
				questTaskForNetwork = new TrapKillsTaskForNetwork();
			}
			else if (num2 == 2523640248u)
			{
				questTaskForNetwork = new TrapDamageTaskForNetwork();
			}
			else if (num2 == 1386190342u)
			{
				questTaskForNetwork = new BattleLevelTaskForNetwork();
			}
			else if (num2 == 2152133468u)
			{
				questTaskForNetwork = new EarnCoinTaskForNetwork();
			}
			else if (num2 == 2011154229u)
			{
				questTaskForNetwork = new PhysicalDamageTaskForNetwork();
			}
			else if (num2 == 291343381u)
			{
				questTaskForNetwork = new FireDamageTaskForNetwork();
			}
			else if (num2 == 1304569653u)
			{
				questTaskForNetwork = new FrostDamageTaskForNetwork();
			}
			else if (num2 == 2812040384u)
			{
				questTaskForNetwork = new ArcaneDamageTaskForNetwork();
			}
			else if (num2 == 2668310269u)
			{
				questTaskForNetwork = new LightningDamageTaskForNetwork();
			}
			else if (num2 == 510617338u)
			{
				questTaskForNetwork = new SpendCoinTaskForNetwork();
			}
			else if (num2 == 333445641u)
			{
				questTaskForNetwork = new PickupCoinTaskForNetwork();
			}
			else if (num2 == 1282244478u)
			{
				questTaskForNetwork = new PlayMatchmadeGameTaskForNetwork();
			}
			else if (num2 == 2975266983u)
			{
				questTaskForNetwork = new KillMinionsTaskForNetwork();
			}
			else if (num2 == 1744587998u)
			{
				questTaskForNetwork = new KillPlayersTaskForNetwork();
			}
			else if (num2 == 1364594490u)
			{
				questTaskForNetwork = new KillPlayersOrAssistsTaskForNetwork();
			}
			else if (num2 == 383728357u)
			{
				questTaskForNetwork = new MapTaskForNetwork();
			}
			else if (num2 == 37843363u)
			{
				questTaskForNetwork = new HeroTaskForNetwork();
			}
			else if (num2 == 3961090072u)
			{
				questTaskForNetwork = new HeroMatchmadeGameTaskForNetwork();
			}
			else if (num2 == 3372718083u)
			{
				questTaskForNetwork = new HeroLevelTaskForNetwork();
			}
			else if (num2 == 1941499997u)
			{
				questTaskForNetwork = new PlayGameTypeTaskForNetwork();
			}
			else if (num2 == 3719413140u)
			{
				questTaskForNetwork = new PlayerAssistTaskForNetwork();
			}
			else if (num2 == 4180579639u)
			{
				questTaskForNetwork = new TotalDamageDealtTaskForNetwork();
			}
			else if (num2 == 1643872712u)
			{
				questTaskForNetwork = new DamageDealtToPlayersTaskForNetwork();
			}
			else if (num2 == 3075552689u)
			{
				questTaskForNetwork = new DamageDealtToMinionsTaskForNetwork();
			}
			else if (num2 == 3638388537u)
			{
				questTaskForNetwork = new TrapTaskForNetwork();
			}
			else if (num2 == 3981696596u)
			{
				questTaskForNetwork = new ComboTaskForNetwork();
			}
			else if (num2 == 1990719653u)
			{
				questTaskForNetwork = new AddFriendTaskForNetwork();
			}
			else if (num2 == 1921601521u)
			{
				questTaskForNetwork = new CreatePartyTaskForNetwork();
			}
			else if (num2 == 2003587898u)
			{
				questTaskForNetwork = new JoinPartyTaskForNetwork();
			}
			num -= 4;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			questTaskForNetwork.DeserializeMessage(array);
			return questTaskForNetwork;
		}

		// Token: 0x06002333 RID: 9011 RVA: 0x000DC7AC File Offset: 0x000DA9AC
		public static List<QuestTaskForNetwork> ReadListQuestTaskForNetwork(byte[] data, ref int offset)
		{
			List<QuestTaskForNetwork> list = new List<QuestTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				QuestTaskForNetwork item = ArrayManager.ReadQuestTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002334 RID: 9012 RVA: 0x000DC7F0 File Offset: 0x000DA9F0
		public static void WriteArchetypeTaskForNetwork(ref byte[] data, ref int offset, ArchetypeTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002335 RID: 9013 RVA: 0x000DC80C File Offset: 0x000DAA0C
		public static void WriteListArchetypeTaskForNetwork(ref byte[] data, ref int offset, List<ArchetypeTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ArchetypeTaskForNetwork value in values)
			{
				ArrayManager.WriteArchetypeTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002336 RID: 9014 RVA: 0x000DC888 File Offset: 0x000DAA88
		public static ArchetypeTaskForNetwork ReadArchetypeTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ArchetypeTaskForNetwork archetypeTaskForNetwork = new ArchetypeTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			archetypeTaskForNetwork.DeserializeMessage(array);
			return archetypeTaskForNetwork;
		}

		// Token: 0x06002337 RID: 9015 RVA: 0x000DC8CC File Offset: 0x000DAACC
		public static List<ArchetypeTaskForNetwork> ReadListArchetypeTaskForNetwork(byte[] data, ref int offset)
		{
			List<ArchetypeTaskForNetwork> list = new List<ArchetypeTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ArchetypeTaskForNetwork item = ArrayManager.ReadArchetypeTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002338 RID: 9016 RVA: 0x000DC910 File Offset: 0x000DAB10
		public static void WriteHeroFirstVictoryTaskForNetwork(ref byte[] data, ref int offset, HeroFirstVictoryTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002339 RID: 9017 RVA: 0x000DC92C File Offset: 0x000DAB2C
		public static void WriteListHeroFirstVictoryTaskForNetwork(ref byte[] data, ref int offset, List<HeroFirstVictoryTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroFirstVictoryTaskForNetwork value in values)
			{
				ArrayManager.WriteHeroFirstVictoryTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600233A RID: 9018 RVA: 0x000DC9A8 File Offset: 0x000DABA8
		public static HeroFirstVictoryTaskForNetwork ReadHeroFirstVictoryTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroFirstVictoryTaskForNetwork heroFirstVictoryTaskForNetwork = new HeroFirstVictoryTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroFirstVictoryTaskForNetwork.DeserializeMessage(array);
			return heroFirstVictoryTaskForNetwork;
		}

		// Token: 0x0600233B RID: 9019 RVA: 0x000DC9EC File Offset: 0x000DABEC
		public static List<HeroFirstVictoryTaskForNetwork> ReadListHeroFirstVictoryTaskForNetwork(byte[] data, ref int offset)
		{
			List<HeroFirstVictoryTaskForNetwork> list = new List<HeroFirstVictoryTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroFirstVictoryTaskForNetwork item = ArrayManager.ReadHeroFirstVictoryTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600233C RID: 9020 RVA: 0x000DCA30 File Offset: 0x000DAC30
		public static void WriteGetStarsTaskForNetwork(ref byte[] data, ref int offset, GetStarsTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600233D RID: 9021 RVA: 0x000DCA4C File Offset: 0x000DAC4C
		public static void WriteListGetStarsTaskForNetwork(ref byte[] data, ref int offset, List<GetStarsTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GetStarsTaskForNetwork value in values)
			{
				ArrayManager.WriteGetStarsTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600233E RID: 9022 RVA: 0x000DCAC8 File Offset: 0x000DACC8
		public static GetStarsTaskForNetwork ReadGetStarsTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GetStarsTaskForNetwork getStarsTaskForNetwork = new GetStarsTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			getStarsTaskForNetwork.DeserializeMessage(array);
			return getStarsTaskForNetwork;
		}

		// Token: 0x0600233F RID: 9023 RVA: 0x000DCB0C File Offset: 0x000DAD0C
		public static List<GetStarsTaskForNetwork> ReadListGetStarsTaskForNetwork(byte[] data, ref int offset)
		{
			List<GetStarsTaskForNetwork> list = new List<GetStarsTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GetStarsTaskForNetwork item = ArrayManager.ReadGetStarsTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002340 RID: 9024 RVA: 0x000DCB50 File Offset: 0x000DAD50
		public static void WriteWinGamesWithCustomDeckTaskForNetwork(ref byte[] data, ref int offset, WinGamesWithCustomDeckTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002341 RID: 9025 RVA: 0x000DCB6C File Offset: 0x000DAD6C
		public static void WriteListWinGamesWithCustomDeckTaskForNetwork(ref byte[] data, ref int offset, List<WinGamesWithCustomDeckTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (WinGamesWithCustomDeckTaskForNetwork value in values)
			{
				ArrayManager.WriteWinGamesWithCustomDeckTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002342 RID: 9026 RVA: 0x000DCBE8 File Offset: 0x000DADE8
		public static WinGamesWithCustomDeckTaskForNetwork ReadWinGamesWithCustomDeckTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			WinGamesWithCustomDeckTaskForNetwork winGamesWithCustomDeckTaskForNetwork = new WinGamesWithCustomDeckTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			winGamesWithCustomDeckTaskForNetwork.DeserializeMessage(array);
			return winGamesWithCustomDeckTaskForNetwork;
		}

		// Token: 0x06002343 RID: 9027 RVA: 0x000DCC2C File Offset: 0x000DAE2C
		public static List<WinGamesWithCustomDeckTaskForNetwork> ReadListWinGamesWithCustomDeckTaskForNetwork(byte[] data, ref int offset)
		{
			List<WinGamesWithCustomDeckTaskForNetwork> list = new List<WinGamesWithCustomDeckTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				WinGamesWithCustomDeckTaskForNetwork item = ArrayManager.ReadWinGamesWithCustomDeckTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002344 RID: 9028 RVA: 0x000DCC70 File Offset: 0x000DAE70
		public static void WriteCreateDeckTaskForNetwork(ref byte[] data, ref int offset, CreateDeckTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002345 RID: 9029 RVA: 0x000DCC8C File Offset: 0x000DAE8C
		public static void WriteListCreateDeckTaskForNetwork(ref byte[] data, ref int offset, List<CreateDeckTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CreateDeckTaskForNetwork value in values)
			{
				ArrayManager.WriteCreateDeckTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002346 RID: 9030 RVA: 0x000DCD08 File Offset: 0x000DAF08
		public static CreateDeckTaskForNetwork ReadCreateDeckTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CreateDeckTaskForNetwork createDeckTaskForNetwork = new CreateDeckTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			createDeckTaskForNetwork.DeserializeMessage(array);
			return createDeckTaskForNetwork;
		}

		// Token: 0x06002347 RID: 9031 RVA: 0x000DCD4C File Offset: 0x000DAF4C
		public static List<CreateDeckTaskForNetwork> ReadListCreateDeckTaskForNetwork(byte[] data, ref int offset)
		{
			List<CreateDeckTaskForNetwork> list = new List<CreateDeckTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CreateDeckTaskForNetwork item = ArrayManager.ReadCreateDeckTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002348 RID: 9032 RVA: 0x000DCD90 File Offset: 0x000DAF90
		public static void WriteSlotPartInTrapTaskForNetwork(ref byte[] data, ref int offset, SlotPartInTrapTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002349 RID: 9033 RVA: 0x000DCDAC File Offset: 0x000DAFAC
		public static void WriteListSlotPartInTrapTaskForNetwork(ref byte[] data, ref int offset, List<SlotPartInTrapTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SlotPartInTrapTaskForNetwork value in values)
			{
				ArrayManager.WriteSlotPartInTrapTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600234A RID: 9034 RVA: 0x000DCE28 File Offset: 0x000DB028
		public static SlotPartInTrapTaskForNetwork ReadSlotPartInTrapTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SlotPartInTrapTaskForNetwork slotPartInTrapTaskForNetwork = new SlotPartInTrapTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			slotPartInTrapTaskForNetwork.DeserializeMessage(array);
			return slotPartInTrapTaskForNetwork;
		}

		// Token: 0x0600234B RID: 9035 RVA: 0x000DCE6C File Offset: 0x000DB06C
		public static List<SlotPartInTrapTaskForNetwork> ReadListSlotPartInTrapTaskForNetwork(byte[] data, ref int offset)
		{
			List<SlotPartInTrapTaskForNetwork> list = new List<SlotPartInTrapTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SlotPartInTrapTaskForNetwork item = ArrayManager.ReadSlotPartInTrapTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600234C RID: 9036 RVA: 0x000DCEB0 File Offset: 0x000DB0B0
		public static void WriteUpgradeTrapToTierTaskForNetwork(ref byte[] data, ref int offset, UpgradeTrapToTierTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600234D RID: 9037 RVA: 0x000DCECC File Offset: 0x000DB0CC
		public static void WriteListUpgradeTrapToTierTaskForNetwork(ref byte[] data, ref int offset, List<UpgradeTrapToTierTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UpgradeTrapToTierTaskForNetwork value in values)
			{
				ArrayManager.WriteUpgradeTrapToTierTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600234E RID: 9038 RVA: 0x000DCF48 File Offset: 0x000DB148
		public static UpgradeTrapToTierTaskForNetwork ReadUpgradeTrapToTierTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UpgradeTrapToTierTaskForNetwork upgradeTrapToTierTaskForNetwork = new UpgradeTrapToTierTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			upgradeTrapToTierTaskForNetwork.DeserializeMessage(array);
			return upgradeTrapToTierTaskForNetwork;
		}

		// Token: 0x0600234F RID: 9039 RVA: 0x000DCF8C File Offset: 0x000DB18C
		public static List<UpgradeTrapToTierTaskForNetwork> ReadListUpgradeTrapToTierTaskForNetwork(byte[] data, ref int offset)
		{
			List<UpgradeTrapToTierTaskForNetwork> list = new List<UpgradeTrapToTierTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UpgradeTrapToTierTaskForNetwork item = ArrayManager.ReadUpgradeTrapToTierTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002350 RID: 9040 RVA: 0x000DCFD0 File Offset: 0x000DB1D0
		public static void WriteUpgradeTrapTaskForNetwork(ref byte[] data, ref int offset, UpgradeTrapTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002351 RID: 9041 RVA: 0x000DCFEC File Offset: 0x000DB1EC
		public static void WriteListUpgradeTrapTaskForNetwork(ref byte[] data, ref int offset, List<UpgradeTrapTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (UpgradeTrapTaskForNetwork value in values)
			{
				ArrayManager.WriteUpgradeTrapTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002352 RID: 9042 RVA: 0x000DD068 File Offset: 0x000DB268
		public static UpgradeTrapTaskForNetwork ReadUpgradeTrapTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			UpgradeTrapTaskForNetwork upgradeTrapTaskForNetwork = new UpgradeTrapTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			upgradeTrapTaskForNetwork.DeserializeMessage(array);
			return upgradeTrapTaskForNetwork;
		}

		// Token: 0x06002353 RID: 9043 RVA: 0x000DD0AC File Offset: 0x000DB2AC
		public static List<UpgradeTrapTaskForNetwork> ReadListUpgradeTrapTaskForNetwork(byte[] data, ref int offset)
		{
			List<UpgradeTrapTaskForNetwork> list = new List<UpgradeTrapTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				UpgradeTrapTaskForNetwork item = ArrayManager.ReadUpgradeTrapTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002354 RID: 9044 RVA: 0x000DD0F0 File Offset: 0x000DB2F0
		public static void WriteSurviveEndlessWaveTaskForNetwork(ref byte[] data, ref int offset, SurviveEndlessWaveTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002355 RID: 9045 RVA: 0x000DD10C File Offset: 0x000DB30C
		public static void WriteListSurviveEndlessWaveTaskForNetwork(ref byte[] data, ref int offset, List<SurviveEndlessWaveTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SurviveEndlessWaveTaskForNetwork value in values)
			{
				ArrayManager.WriteSurviveEndlessWaveTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002356 RID: 9046 RVA: 0x000DD188 File Offset: 0x000DB388
		public static SurviveEndlessWaveTaskForNetwork ReadSurviveEndlessWaveTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SurviveEndlessWaveTaskForNetwork surviveEndlessWaveTaskForNetwork = new SurviveEndlessWaveTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			surviveEndlessWaveTaskForNetwork.DeserializeMessage(array);
			return surviveEndlessWaveTaskForNetwork;
		}

		// Token: 0x06002357 RID: 9047 RVA: 0x000DD1CC File Offset: 0x000DB3CC
		public static List<SurviveEndlessWaveTaskForNetwork> ReadListSurviveEndlessWaveTaskForNetwork(byte[] data, ref int offset)
		{
			List<SurviveEndlessWaveTaskForNetwork> list = new List<SurviveEndlessWaveTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SurviveEndlessWaveTaskForNetwork item = ArrayManager.ReadSurviveEndlessWaveTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002358 RID: 9048 RVA: 0x000DD210 File Offset: 0x000DB410
		public static void WriteWinWeeklyChallengesTaskForNetwork(ref byte[] data, ref int offset, WinWeeklyChallengesTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002359 RID: 9049 RVA: 0x000DD22C File Offset: 0x000DB42C
		public static void WriteListWinWeeklyChallengesTaskForNetwork(ref byte[] data, ref int offset, List<WinWeeklyChallengesTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (WinWeeklyChallengesTaskForNetwork value in values)
			{
				ArrayManager.WriteWinWeeklyChallengesTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600235A RID: 9050 RVA: 0x000DD2A8 File Offset: 0x000DB4A8
		public static WinWeeklyChallengesTaskForNetwork ReadWinWeeklyChallengesTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			WinWeeklyChallengesTaskForNetwork winWeeklyChallengesTaskForNetwork = new WinWeeklyChallengesTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			winWeeklyChallengesTaskForNetwork.DeserializeMessage(array);
			return winWeeklyChallengesTaskForNetwork;
		}

		// Token: 0x0600235B RID: 9051 RVA: 0x000DD2EC File Offset: 0x000DB4EC
		public static List<WinWeeklyChallengesTaskForNetwork> ReadListWinWeeklyChallengesTaskForNetwork(byte[] data, ref int offset)
		{
			List<WinWeeklyChallengesTaskForNetwork> list = new List<WinWeeklyChallengesTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				WinWeeklyChallengesTaskForNetwork item = ArrayManager.ReadWinWeeklyChallengesTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600235C RID: 9052 RVA: 0x000DD330 File Offset: 0x000DB530
		public static void WriteWinMatchmadeGamesTaskForNetwork(ref byte[] data, ref int offset, WinMatchmadeGamesTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600235D RID: 9053 RVA: 0x000DD34C File Offset: 0x000DB54C
		public static void WriteListWinMatchmadeGamesTaskForNetwork(ref byte[] data, ref int offset, List<WinMatchmadeGamesTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (WinMatchmadeGamesTaskForNetwork value in values)
			{
				ArrayManager.WriteWinMatchmadeGamesTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600235E RID: 9054 RVA: 0x000DD3C8 File Offset: 0x000DB5C8
		public static WinMatchmadeGamesTaskForNetwork ReadWinMatchmadeGamesTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			WinMatchmadeGamesTaskForNetwork winMatchmadeGamesTaskForNetwork = new WinMatchmadeGamesTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			winMatchmadeGamesTaskForNetwork.DeserializeMessage(array);
			return winMatchmadeGamesTaskForNetwork;
		}

		// Token: 0x0600235F RID: 9055 RVA: 0x000DD40C File Offset: 0x000DB60C
		public static List<WinMatchmadeGamesTaskForNetwork> ReadListWinMatchmadeGamesTaskForNetwork(byte[] data, ref int offset)
		{
			List<WinMatchmadeGamesTaskForNetwork> list = new List<WinMatchmadeGamesTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				WinMatchmadeGamesTaskForNetwork item = ArrayManager.ReadWinMatchmadeGamesTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002360 RID: 9056 RVA: 0x000DD450 File Offset: 0x000DB650
		public static void WriteWinGamesSoloTaskForNetwork(ref byte[] data, ref int offset, WinGamesSoloTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002361 RID: 9057 RVA: 0x000DD46C File Offset: 0x000DB66C
		public static void WriteListWinGamesSoloTaskForNetwork(ref byte[] data, ref int offset, List<WinGamesSoloTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (WinGamesSoloTaskForNetwork value in values)
			{
				ArrayManager.WriteWinGamesSoloTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002362 RID: 9058 RVA: 0x000DD4E8 File Offset: 0x000DB6E8
		public static WinGamesSoloTaskForNetwork ReadWinGamesSoloTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			WinGamesSoloTaskForNetwork winGamesSoloTaskForNetwork = new WinGamesSoloTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			winGamesSoloTaskForNetwork.DeserializeMessage(array);
			return winGamesSoloTaskForNetwork;
		}

		// Token: 0x06002363 RID: 9059 RVA: 0x000DD52C File Offset: 0x000DB72C
		public static List<WinGamesSoloTaskForNetwork> ReadListWinGamesSoloTaskForNetwork(byte[] data, ref int offset)
		{
			List<WinGamesSoloTaskForNetwork> list = new List<WinGamesSoloTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				WinGamesSoloTaskForNetwork item = ArrayManager.ReadWinGamesSoloTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002364 RID: 9060 RVA: 0x000DD570 File Offset: 0x000DB770
		public static void WriteWinGamesWhileInPartyTaskForNetwork(ref byte[] data, ref int offset, WinGamesWhileInPartyTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002365 RID: 9061 RVA: 0x000DD58C File Offset: 0x000DB78C
		public static void WriteListWinGamesWhileInPartyTaskForNetwork(ref byte[] data, ref int offset, List<WinGamesWhileInPartyTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (WinGamesWhileInPartyTaskForNetwork value in values)
			{
				ArrayManager.WriteWinGamesWhileInPartyTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002366 RID: 9062 RVA: 0x000DD608 File Offset: 0x000DB808
		public static WinGamesWhileInPartyTaskForNetwork ReadWinGamesWhileInPartyTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			WinGamesWhileInPartyTaskForNetwork winGamesWhileInPartyTaskForNetwork = new WinGamesWhileInPartyTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			winGamesWhileInPartyTaskForNetwork.DeserializeMessage(array);
			return winGamesWhileInPartyTaskForNetwork;
		}

		// Token: 0x06002367 RID: 9063 RVA: 0x000DD64C File Offset: 0x000DB84C
		public static List<WinGamesWhileInPartyTaskForNetwork> ReadListWinGamesWhileInPartyTaskForNetwork(byte[] data, ref int offset)
		{
			List<WinGamesWhileInPartyTaskForNetwork> list = new List<WinGamesWhileInPartyTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				WinGamesWhileInPartyTaskForNetwork item = ArrayManager.ReadWinGamesWhileInPartyTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002368 RID: 9064 RVA: 0x000DD690 File Offset: 0x000DB890
		public static void WriteWinNumberOfGamesTaskForNetwork(ref byte[] data, ref int offset, WinNumberOfGamesTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002369 RID: 9065 RVA: 0x000DD6AC File Offset: 0x000DB8AC
		public static void WriteListWinNumberOfGamesTaskForNetwork(ref byte[] data, ref int offset, List<WinNumberOfGamesTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (WinNumberOfGamesTaskForNetwork value in values)
			{
				ArrayManager.WriteWinNumberOfGamesTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600236A RID: 9066 RVA: 0x000DD728 File Offset: 0x000DB928
		public static WinNumberOfGamesTaskForNetwork ReadWinNumberOfGamesTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			WinNumberOfGamesTaskForNetwork winNumberOfGamesTaskForNetwork = new WinNumberOfGamesTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			winNumberOfGamesTaskForNetwork.DeserializeMessage(array);
			return winNumberOfGamesTaskForNetwork;
		}

		// Token: 0x0600236B RID: 9067 RVA: 0x000DD76C File Offset: 0x000DB96C
		public static List<WinNumberOfGamesTaskForNetwork> ReadListWinNumberOfGamesTaskForNetwork(byte[] data, ref int offset)
		{
			List<WinNumberOfGamesTaskForNetwork> list = new List<WinNumberOfGamesTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				WinNumberOfGamesTaskForNetwork item = ArrayManager.ReadWinNumberOfGamesTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600236C RID: 9068 RVA: 0x000DD7B0 File Offset: 0x000DB9B0
		public static void WritePlayGamesTaskForNetwork(ref byte[] data, ref int offset, PlayGamesTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600236D RID: 9069 RVA: 0x000DD7CC File Offset: 0x000DB9CC
		public static void WriteListPlayGamesTaskForNetwork(ref byte[] data, ref int offset, List<PlayGamesTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayGamesTaskForNetwork value in values)
			{
				ArrayManager.WritePlayGamesTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600236E RID: 9070 RVA: 0x000DD848 File Offset: 0x000DBA48
		public static PlayGamesTaskForNetwork ReadPlayGamesTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayGamesTaskForNetwork playGamesTaskForNetwork = new PlayGamesTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playGamesTaskForNetwork.DeserializeMessage(array);
			return playGamesTaskForNetwork;
		}

		// Token: 0x0600236F RID: 9071 RVA: 0x000DD88C File Offset: 0x000DBA8C
		public static List<PlayGamesTaskForNetwork> ReadListPlayGamesTaskForNetwork(byte[] data, ref int offset)
		{
			List<PlayGamesTaskForNetwork> list = new List<PlayGamesTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayGamesTaskForNetwork item = ArrayManager.ReadPlayGamesTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002370 RID: 9072 RVA: 0x000DD8D0 File Offset: 0x000DBAD0
		public static void WritePrimaryAbilityTaskForNetwork(ref byte[] data, ref int offset, PrimaryAbilityTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002371 RID: 9073 RVA: 0x000DD8EC File Offset: 0x000DBAEC
		public static void WriteListPrimaryAbilityTaskForNetwork(ref byte[] data, ref int offset, List<PrimaryAbilityTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PrimaryAbilityTaskForNetwork value in values)
			{
				ArrayManager.WritePrimaryAbilityTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002372 RID: 9074 RVA: 0x000DD968 File Offset: 0x000DBB68
		public static PrimaryAbilityTaskForNetwork ReadPrimaryAbilityTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PrimaryAbilityTaskForNetwork primaryAbilityTaskForNetwork = new PrimaryAbilityTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			primaryAbilityTaskForNetwork.DeserializeMessage(array);
			return primaryAbilityTaskForNetwork;
		}

		// Token: 0x06002373 RID: 9075 RVA: 0x000DD9AC File Offset: 0x000DBBAC
		public static List<PrimaryAbilityTaskForNetwork> ReadListPrimaryAbilityTaskForNetwork(byte[] data, ref int offset)
		{
			List<PrimaryAbilityTaskForNetwork> list = new List<PrimaryAbilityTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PrimaryAbilityTaskForNetwork item = ArrayManager.ReadPrimaryAbilityTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002374 RID: 9076 RVA: 0x000DD9F0 File Offset: 0x000DBBF0
		public static void WriteSecondaryAbilityTaskForNetwork(ref byte[] data, ref int offset, SecondaryAbilityTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002375 RID: 9077 RVA: 0x000DDA0C File Offset: 0x000DBC0C
		public static void WriteListSecondaryAbilityTaskForNetwork(ref byte[] data, ref int offset, List<SecondaryAbilityTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SecondaryAbilityTaskForNetwork value in values)
			{
				ArrayManager.WriteSecondaryAbilityTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002376 RID: 9078 RVA: 0x000DDA88 File Offset: 0x000DBC88
		public static SecondaryAbilityTaskForNetwork ReadSecondaryAbilityTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SecondaryAbilityTaskForNetwork secondaryAbilityTaskForNetwork = new SecondaryAbilityTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			secondaryAbilityTaskForNetwork.DeserializeMessage(array);
			return secondaryAbilityTaskForNetwork;
		}

		// Token: 0x06002377 RID: 9079 RVA: 0x000DDACC File Offset: 0x000DBCCC
		public static List<SecondaryAbilityTaskForNetwork> ReadListSecondaryAbilityTaskForNetwork(byte[] data, ref int offset)
		{
			List<SecondaryAbilityTaskForNetwork> list = new List<SecondaryAbilityTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SecondaryAbilityTaskForNetwork item = ArrayManager.ReadSecondaryAbilityTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002378 RID: 9080 RVA: 0x000DDB10 File Offset: 0x000DBD10
		public static void WritePlaceGuardiansTaskForNetwork(ref byte[] data, ref int offset, PlaceGuardiansTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002379 RID: 9081 RVA: 0x000DDB2C File Offset: 0x000DBD2C
		public static void WriteListPlaceGuardiansTaskForNetwork(ref byte[] data, ref int offset, List<PlaceGuardiansTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlaceGuardiansTaskForNetwork value in values)
			{
				ArrayManager.WritePlaceGuardiansTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600237A RID: 9082 RVA: 0x000DDBA8 File Offset: 0x000DBDA8
		public static PlaceGuardiansTaskForNetwork ReadPlaceGuardiansTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlaceGuardiansTaskForNetwork placeGuardiansTaskForNetwork = new PlaceGuardiansTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			placeGuardiansTaskForNetwork.DeserializeMessage(array);
			return placeGuardiansTaskForNetwork;
		}

		// Token: 0x0600237B RID: 9083 RVA: 0x000DDBEC File Offset: 0x000DBDEC
		public static List<PlaceGuardiansTaskForNetwork> ReadListPlaceGuardiansTaskForNetwork(byte[] data, ref int offset)
		{
			List<PlaceGuardiansTaskForNetwork> list = new List<PlaceGuardiansTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlaceGuardiansTaskForNetwork item = ArrayManager.ReadPlaceGuardiansTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600237C RID: 9084 RVA: 0x000DDC30 File Offset: 0x000DBE30
		public static void WriteTrapKillsTaskForNetwork(ref byte[] data, ref int offset, TrapKillsTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600237D RID: 9085 RVA: 0x000DDC4C File Offset: 0x000DBE4C
		public static void WriteListTrapKillsTaskForNetwork(ref byte[] data, ref int offset, List<TrapKillsTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TrapKillsTaskForNetwork value in values)
			{
				ArrayManager.WriteTrapKillsTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600237E RID: 9086 RVA: 0x000DDCC8 File Offset: 0x000DBEC8
		public static TrapKillsTaskForNetwork ReadTrapKillsTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TrapKillsTaskForNetwork trapKillsTaskForNetwork = new TrapKillsTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			trapKillsTaskForNetwork.DeserializeMessage(array);
			return trapKillsTaskForNetwork;
		}

		// Token: 0x0600237F RID: 9087 RVA: 0x000DDD0C File Offset: 0x000DBF0C
		public static List<TrapKillsTaskForNetwork> ReadListTrapKillsTaskForNetwork(byte[] data, ref int offset)
		{
			List<TrapKillsTaskForNetwork> list = new List<TrapKillsTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TrapKillsTaskForNetwork item = ArrayManager.ReadTrapKillsTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002380 RID: 9088 RVA: 0x000DDD50 File Offset: 0x000DBF50
		public static void WriteTrapDamageTaskForNetwork(ref byte[] data, ref int offset, TrapDamageTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002381 RID: 9089 RVA: 0x000DDD6C File Offset: 0x000DBF6C
		public static void WriteListTrapDamageTaskForNetwork(ref byte[] data, ref int offset, List<TrapDamageTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TrapDamageTaskForNetwork value in values)
			{
				ArrayManager.WriteTrapDamageTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002382 RID: 9090 RVA: 0x000DDDE8 File Offset: 0x000DBFE8
		public static TrapDamageTaskForNetwork ReadTrapDamageTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TrapDamageTaskForNetwork trapDamageTaskForNetwork = new TrapDamageTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			trapDamageTaskForNetwork.DeserializeMessage(array);
			return trapDamageTaskForNetwork;
		}

		// Token: 0x06002383 RID: 9091 RVA: 0x000DDE2C File Offset: 0x000DC02C
		public static List<TrapDamageTaskForNetwork> ReadListTrapDamageTaskForNetwork(byte[] data, ref int offset)
		{
			List<TrapDamageTaskForNetwork> list = new List<TrapDamageTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TrapDamageTaskForNetwork item = ArrayManager.ReadTrapDamageTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002384 RID: 9092 RVA: 0x000DDE70 File Offset: 0x000DC070
		public static void WriteBattleLevelTaskForNetwork(ref byte[] data, ref int offset, BattleLevelTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002385 RID: 9093 RVA: 0x000DDE8C File Offset: 0x000DC08C
		public static void WriteListBattleLevelTaskForNetwork(ref byte[] data, ref int offset, List<BattleLevelTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BattleLevelTaskForNetwork value in values)
			{
				ArrayManager.WriteBattleLevelTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002386 RID: 9094 RVA: 0x000DDF08 File Offset: 0x000DC108
		public static BattleLevelTaskForNetwork ReadBattleLevelTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BattleLevelTaskForNetwork battleLevelTaskForNetwork = new BattleLevelTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			battleLevelTaskForNetwork.DeserializeMessage(array);
			return battleLevelTaskForNetwork;
		}

		// Token: 0x06002387 RID: 9095 RVA: 0x000DDF4C File Offset: 0x000DC14C
		public static List<BattleLevelTaskForNetwork> ReadListBattleLevelTaskForNetwork(byte[] data, ref int offset)
		{
			List<BattleLevelTaskForNetwork> list = new List<BattleLevelTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BattleLevelTaskForNetwork item = ArrayManager.ReadBattleLevelTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002388 RID: 9096 RVA: 0x000DDF90 File Offset: 0x000DC190
		public static void WriteEarnCoinTaskForNetwork(ref byte[] data, ref int offset, EarnCoinTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002389 RID: 9097 RVA: 0x000DDFAC File Offset: 0x000DC1AC
		public static void WriteListEarnCoinTaskForNetwork(ref byte[] data, ref int offset, List<EarnCoinTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (EarnCoinTaskForNetwork value in values)
			{
				ArrayManager.WriteEarnCoinTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600238A RID: 9098 RVA: 0x000DE028 File Offset: 0x000DC228
		public static EarnCoinTaskForNetwork ReadEarnCoinTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			EarnCoinTaskForNetwork earnCoinTaskForNetwork = new EarnCoinTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			earnCoinTaskForNetwork.DeserializeMessage(array);
			return earnCoinTaskForNetwork;
		}

		// Token: 0x0600238B RID: 9099 RVA: 0x000DE06C File Offset: 0x000DC26C
		public static List<EarnCoinTaskForNetwork> ReadListEarnCoinTaskForNetwork(byte[] data, ref int offset)
		{
			List<EarnCoinTaskForNetwork> list = new List<EarnCoinTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				EarnCoinTaskForNetwork item = ArrayManager.ReadEarnCoinTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600238C RID: 9100 RVA: 0x000DE0B0 File Offset: 0x000DC2B0
		public static void WritePhysicalDamageTaskForNetwork(ref byte[] data, ref int offset, PhysicalDamageTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600238D RID: 9101 RVA: 0x000DE0CC File Offset: 0x000DC2CC
		public static void WriteListPhysicalDamageTaskForNetwork(ref byte[] data, ref int offset, List<PhysicalDamageTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PhysicalDamageTaskForNetwork value in values)
			{
				ArrayManager.WritePhysicalDamageTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600238E RID: 9102 RVA: 0x000DE148 File Offset: 0x000DC348
		public static PhysicalDamageTaskForNetwork ReadPhysicalDamageTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PhysicalDamageTaskForNetwork physicalDamageTaskForNetwork = new PhysicalDamageTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			physicalDamageTaskForNetwork.DeserializeMessage(array);
			return physicalDamageTaskForNetwork;
		}

		// Token: 0x0600238F RID: 9103 RVA: 0x000DE18C File Offset: 0x000DC38C
		public static List<PhysicalDamageTaskForNetwork> ReadListPhysicalDamageTaskForNetwork(byte[] data, ref int offset)
		{
			List<PhysicalDamageTaskForNetwork> list = new List<PhysicalDamageTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PhysicalDamageTaskForNetwork item = ArrayManager.ReadPhysicalDamageTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002390 RID: 9104 RVA: 0x000DE1D0 File Offset: 0x000DC3D0
		public static void WriteFireDamageTaskForNetwork(ref byte[] data, ref int offset, FireDamageTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002391 RID: 9105 RVA: 0x000DE1EC File Offset: 0x000DC3EC
		public static void WriteListFireDamageTaskForNetwork(ref byte[] data, ref int offset, List<FireDamageTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FireDamageTaskForNetwork value in values)
			{
				ArrayManager.WriteFireDamageTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002392 RID: 9106 RVA: 0x000DE268 File Offset: 0x000DC468
		public static FireDamageTaskForNetwork ReadFireDamageTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FireDamageTaskForNetwork fireDamageTaskForNetwork = new FireDamageTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			fireDamageTaskForNetwork.DeserializeMessage(array);
			return fireDamageTaskForNetwork;
		}

		// Token: 0x06002393 RID: 9107 RVA: 0x000DE2AC File Offset: 0x000DC4AC
		public static List<FireDamageTaskForNetwork> ReadListFireDamageTaskForNetwork(byte[] data, ref int offset)
		{
			List<FireDamageTaskForNetwork> list = new List<FireDamageTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FireDamageTaskForNetwork item = ArrayManager.ReadFireDamageTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002394 RID: 9108 RVA: 0x000DE2F0 File Offset: 0x000DC4F0
		public static void WriteFrostDamageTaskForNetwork(ref byte[] data, ref int offset, FrostDamageTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002395 RID: 9109 RVA: 0x000DE30C File Offset: 0x000DC50C
		public static void WriteListFrostDamageTaskForNetwork(ref byte[] data, ref int offset, List<FrostDamageTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FrostDamageTaskForNetwork value in values)
			{
				ArrayManager.WriteFrostDamageTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002396 RID: 9110 RVA: 0x000DE388 File Offset: 0x000DC588
		public static FrostDamageTaskForNetwork ReadFrostDamageTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FrostDamageTaskForNetwork frostDamageTaskForNetwork = new FrostDamageTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			frostDamageTaskForNetwork.DeserializeMessage(array);
			return frostDamageTaskForNetwork;
		}

		// Token: 0x06002397 RID: 9111 RVA: 0x000DE3CC File Offset: 0x000DC5CC
		public static List<FrostDamageTaskForNetwork> ReadListFrostDamageTaskForNetwork(byte[] data, ref int offset)
		{
			List<FrostDamageTaskForNetwork> list = new List<FrostDamageTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FrostDamageTaskForNetwork item = ArrayManager.ReadFrostDamageTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002398 RID: 9112 RVA: 0x000DE410 File Offset: 0x000DC610
		public static void WriteArcaneDamageTaskForNetwork(ref byte[] data, ref int offset, ArcaneDamageTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002399 RID: 9113 RVA: 0x000DE42C File Offset: 0x000DC62C
		public static void WriteListArcaneDamageTaskForNetwork(ref byte[] data, ref int offset, List<ArcaneDamageTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ArcaneDamageTaskForNetwork value in values)
			{
				ArrayManager.WriteArcaneDamageTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600239A RID: 9114 RVA: 0x000DE4A8 File Offset: 0x000DC6A8
		public static ArcaneDamageTaskForNetwork ReadArcaneDamageTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ArcaneDamageTaskForNetwork arcaneDamageTaskForNetwork = new ArcaneDamageTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			arcaneDamageTaskForNetwork.DeserializeMessage(array);
			return arcaneDamageTaskForNetwork;
		}

		// Token: 0x0600239B RID: 9115 RVA: 0x000DE4EC File Offset: 0x000DC6EC
		public static List<ArcaneDamageTaskForNetwork> ReadListArcaneDamageTaskForNetwork(byte[] data, ref int offset)
		{
			List<ArcaneDamageTaskForNetwork> list = new List<ArcaneDamageTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ArcaneDamageTaskForNetwork item = ArrayManager.ReadArcaneDamageTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600239C RID: 9116 RVA: 0x000DE530 File Offset: 0x000DC730
		public static void WriteLightningDamageTaskForNetwork(ref byte[] data, ref int offset, LightningDamageTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600239D RID: 9117 RVA: 0x000DE54C File Offset: 0x000DC74C
		public static void WriteListLightningDamageTaskForNetwork(ref byte[] data, ref int offset, List<LightningDamageTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LightningDamageTaskForNetwork value in values)
			{
				ArrayManager.WriteLightningDamageTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600239E RID: 9118 RVA: 0x000DE5C8 File Offset: 0x000DC7C8
		public static LightningDamageTaskForNetwork ReadLightningDamageTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LightningDamageTaskForNetwork lightningDamageTaskForNetwork = new LightningDamageTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			lightningDamageTaskForNetwork.DeserializeMessage(array);
			return lightningDamageTaskForNetwork;
		}

		// Token: 0x0600239F RID: 9119 RVA: 0x000DE60C File Offset: 0x000DC80C
		public static List<LightningDamageTaskForNetwork> ReadListLightningDamageTaskForNetwork(byte[] data, ref int offset)
		{
			List<LightningDamageTaskForNetwork> list = new List<LightningDamageTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LightningDamageTaskForNetwork item = ArrayManager.ReadLightningDamageTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023A0 RID: 9120 RVA: 0x000DE650 File Offset: 0x000DC850
		public static void WriteSpendCoinTaskForNetwork(ref byte[] data, ref int offset, SpendCoinTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023A1 RID: 9121 RVA: 0x000DE66C File Offset: 0x000DC86C
		public static void WriteListSpendCoinTaskForNetwork(ref byte[] data, ref int offset, List<SpendCoinTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SpendCoinTaskForNetwork value in values)
			{
				ArrayManager.WriteSpendCoinTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023A2 RID: 9122 RVA: 0x000DE6E8 File Offset: 0x000DC8E8
		public static SpendCoinTaskForNetwork ReadSpendCoinTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SpendCoinTaskForNetwork spendCoinTaskForNetwork = new SpendCoinTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			spendCoinTaskForNetwork.DeserializeMessage(array);
			return spendCoinTaskForNetwork;
		}

		// Token: 0x060023A3 RID: 9123 RVA: 0x000DE72C File Offset: 0x000DC92C
		public static List<SpendCoinTaskForNetwork> ReadListSpendCoinTaskForNetwork(byte[] data, ref int offset)
		{
			List<SpendCoinTaskForNetwork> list = new List<SpendCoinTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SpendCoinTaskForNetwork item = ArrayManager.ReadSpendCoinTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023A4 RID: 9124 RVA: 0x000DE770 File Offset: 0x000DC970
		public static void WritePickupCoinTaskForNetwork(ref byte[] data, ref int offset, PickupCoinTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023A5 RID: 9125 RVA: 0x000DE78C File Offset: 0x000DC98C
		public static void WriteListPickupCoinTaskForNetwork(ref byte[] data, ref int offset, List<PickupCoinTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PickupCoinTaskForNetwork value in values)
			{
				ArrayManager.WritePickupCoinTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023A6 RID: 9126 RVA: 0x000DE808 File Offset: 0x000DCA08
		public static PickupCoinTaskForNetwork ReadPickupCoinTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PickupCoinTaskForNetwork pickupCoinTaskForNetwork = new PickupCoinTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pickupCoinTaskForNetwork.DeserializeMessage(array);
			return pickupCoinTaskForNetwork;
		}

		// Token: 0x060023A7 RID: 9127 RVA: 0x000DE84C File Offset: 0x000DCA4C
		public static List<PickupCoinTaskForNetwork> ReadListPickupCoinTaskForNetwork(byte[] data, ref int offset)
		{
			List<PickupCoinTaskForNetwork> list = new List<PickupCoinTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PickupCoinTaskForNetwork item = ArrayManager.ReadPickupCoinTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023A8 RID: 9128 RVA: 0x000DE890 File Offset: 0x000DCA90
		public static void WritePlayMatchmadeGameTaskForNetwork(ref byte[] data, ref int offset, PlayMatchmadeGameTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023A9 RID: 9129 RVA: 0x000DE8AC File Offset: 0x000DCAAC
		public static void WriteListPlayMatchmadeGameTaskForNetwork(ref byte[] data, ref int offset, List<PlayMatchmadeGameTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayMatchmadeGameTaskForNetwork value in values)
			{
				ArrayManager.WritePlayMatchmadeGameTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023AA RID: 9130 RVA: 0x000DE928 File Offset: 0x000DCB28
		public static PlayMatchmadeGameTaskForNetwork ReadPlayMatchmadeGameTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayMatchmadeGameTaskForNetwork playMatchmadeGameTaskForNetwork = new PlayMatchmadeGameTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playMatchmadeGameTaskForNetwork.DeserializeMessage(array);
			return playMatchmadeGameTaskForNetwork;
		}

		// Token: 0x060023AB RID: 9131 RVA: 0x000DE96C File Offset: 0x000DCB6C
		public static List<PlayMatchmadeGameTaskForNetwork> ReadListPlayMatchmadeGameTaskForNetwork(byte[] data, ref int offset)
		{
			List<PlayMatchmadeGameTaskForNetwork> list = new List<PlayMatchmadeGameTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayMatchmadeGameTaskForNetwork item = ArrayManager.ReadPlayMatchmadeGameTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023AC RID: 9132 RVA: 0x000DE9B0 File Offset: 0x000DCBB0
		public static void WriteKillMinionsTaskForNetwork(ref byte[] data, ref int offset, KillMinionsTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023AD RID: 9133 RVA: 0x000DE9CC File Offset: 0x000DCBCC
		public static void WriteListKillMinionsTaskForNetwork(ref byte[] data, ref int offset, List<KillMinionsTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KillMinionsTaskForNetwork value in values)
			{
				ArrayManager.WriteKillMinionsTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023AE RID: 9134 RVA: 0x000DEA48 File Offset: 0x000DCC48
		public static KillMinionsTaskForNetwork ReadKillMinionsTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KillMinionsTaskForNetwork killMinionsTaskForNetwork = new KillMinionsTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			killMinionsTaskForNetwork.DeserializeMessage(array);
			return killMinionsTaskForNetwork;
		}

		// Token: 0x060023AF RID: 9135 RVA: 0x000DEA8C File Offset: 0x000DCC8C
		public static List<KillMinionsTaskForNetwork> ReadListKillMinionsTaskForNetwork(byte[] data, ref int offset)
		{
			List<KillMinionsTaskForNetwork> list = new List<KillMinionsTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KillMinionsTaskForNetwork item = ArrayManager.ReadKillMinionsTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023B0 RID: 9136 RVA: 0x000DEAD0 File Offset: 0x000DCCD0
		public static void WriteKillPlayersTaskForNetwork(ref byte[] data, ref int offset, KillPlayersTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023B1 RID: 9137 RVA: 0x000DEAEC File Offset: 0x000DCCEC
		public static void WriteListKillPlayersTaskForNetwork(ref byte[] data, ref int offset, List<KillPlayersTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KillPlayersTaskForNetwork value in values)
			{
				ArrayManager.WriteKillPlayersTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023B2 RID: 9138 RVA: 0x000DEB68 File Offset: 0x000DCD68
		public static KillPlayersTaskForNetwork ReadKillPlayersTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KillPlayersTaskForNetwork killPlayersTaskForNetwork = new KillPlayersTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			killPlayersTaskForNetwork.DeserializeMessage(array);
			return killPlayersTaskForNetwork;
		}

		// Token: 0x060023B3 RID: 9139 RVA: 0x000DEBAC File Offset: 0x000DCDAC
		public static List<KillPlayersTaskForNetwork> ReadListKillPlayersTaskForNetwork(byte[] data, ref int offset)
		{
			List<KillPlayersTaskForNetwork> list = new List<KillPlayersTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KillPlayersTaskForNetwork item = ArrayManager.ReadKillPlayersTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023B4 RID: 9140 RVA: 0x000DEBF0 File Offset: 0x000DCDF0
		public static void WriteKillPlayersOrAssistsTaskForNetwork(ref byte[] data, ref int offset, KillPlayersOrAssistsTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023B5 RID: 9141 RVA: 0x000DEC0C File Offset: 0x000DCE0C
		public static void WriteListKillPlayersOrAssistsTaskForNetwork(ref byte[] data, ref int offset, List<KillPlayersOrAssistsTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KillPlayersOrAssistsTaskForNetwork value in values)
			{
				ArrayManager.WriteKillPlayersOrAssistsTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023B6 RID: 9142 RVA: 0x000DEC88 File Offset: 0x000DCE88
		public static KillPlayersOrAssistsTaskForNetwork ReadKillPlayersOrAssistsTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KillPlayersOrAssistsTaskForNetwork killPlayersOrAssistsTaskForNetwork = new KillPlayersOrAssistsTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			killPlayersOrAssistsTaskForNetwork.DeserializeMessage(array);
			return killPlayersOrAssistsTaskForNetwork;
		}

		// Token: 0x060023B7 RID: 9143 RVA: 0x000DECCC File Offset: 0x000DCECC
		public static List<KillPlayersOrAssistsTaskForNetwork> ReadListKillPlayersOrAssistsTaskForNetwork(byte[] data, ref int offset)
		{
			List<KillPlayersOrAssistsTaskForNetwork> list = new List<KillPlayersOrAssistsTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KillPlayersOrAssistsTaskForNetwork item = ArrayManager.ReadKillPlayersOrAssistsTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023B8 RID: 9144 RVA: 0x000DED10 File Offset: 0x000DCF10
		public static void WriteMapTaskForNetwork(ref byte[] data, ref int offset, MapTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023B9 RID: 9145 RVA: 0x000DED2C File Offset: 0x000DCF2C
		public static void WriteListMapTaskForNetwork(ref byte[] data, ref int offset, List<MapTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MapTaskForNetwork value in values)
			{
				ArrayManager.WriteMapTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023BA RID: 9146 RVA: 0x000DEDA8 File Offset: 0x000DCFA8
		public static MapTaskForNetwork ReadMapTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MapTaskForNetwork mapTaskForNetwork = new MapTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			mapTaskForNetwork.DeserializeMessage(array);
			return mapTaskForNetwork;
		}

		// Token: 0x060023BB RID: 9147 RVA: 0x000DEDEC File Offset: 0x000DCFEC
		public static List<MapTaskForNetwork> ReadListMapTaskForNetwork(byte[] data, ref int offset)
		{
			List<MapTaskForNetwork> list = new List<MapTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MapTaskForNetwork item = ArrayManager.ReadMapTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023BC RID: 9148 RVA: 0x000DEE30 File Offset: 0x000DD030
		public static void WriteHeroTaskForNetwork(ref byte[] data, ref int offset, HeroTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023BD RID: 9149 RVA: 0x000DEE4C File Offset: 0x000DD04C
		public static void WriteListHeroTaskForNetwork(ref byte[] data, ref int offset, List<HeroTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroTaskForNetwork value in values)
			{
				ArrayManager.WriteHeroTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023BE RID: 9150 RVA: 0x000DEEC8 File Offset: 0x000DD0C8
		public static HeroTaskForNetwork ReadHeroTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroTaskForNetwork heroTaskForNetwork = new HeroTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroTaskForNetwork.DeserializeMessage(array);
			return heroTaskForNetwork;
		}

		// Token: 0x060023BF RID: 9151 RVA: 0x000DEF0C File Offset: 0x000DD10C
		public static List<HeroTaskForNetwork> ReadListHeroTaskForNetwork(byte[] data, ref int offset)
		{
			List<HeroTaskForNetwork> list = new List<HeroTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroTaskForNetwork item = ArrayManager.ReadHeroTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023C0 RID: 9152 RVA: 0x000DEF50 File Offset: 0x000DD150
		public static void WriteHeroMatchmadeGameTaskForNetwork(ref byte[] data, ref int offset, HeroMatchmadeGameTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023C1 RID: 9153 RVA: 0x000DEF6C File Offset: 0x000DD16C
		public static void WriteListHeroMatchmadeGameTaskForNetwork(ref byte[] data, ref int offset, List<HeroMatchmadeGameTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroMatchmadeGameTaskForNetwork value in values)
			{
				ArrayManager.WriteHeroMatchmadeGameTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023C2 RID: 9154 RVA: 0x000DEFE8 File Offset: 0x000DD1E8
		public static HeroMatchmadeGameTaskForNetwork ReadHeroMatchmadeGameTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroMatchmadeGameTaskForNetwork heroMatchmadeGameTaskForNetwork = new HeroMatchmadeGameTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroMatchmadeGameTaskForNetwork.DeserializeMessage(array);
			return heroMatchmadeGameTaskForNetwork;
		}

		// Token: 0x060023C3 RID: 9155 RVA: 0x000DF02C File Offset: 0x000DD22C
		public static List<HeroMatchmadeGameTaskForNetwork> ReadListHeroMatchmadeGameTaskForNetwork(byte[] data, ref int offset)
		{
			List<HeroMatchmadeGameTaskForNetwork> list = new List<HeroMatchmadeGameTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroMatchmadeGameTaskForNetwork item = ArrayManager.ReadHeroMatchmadeGameTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023C4 RID: 9156 RVA: 0x000DF070 File Offset: 0x000DD270
		public static void WriteHeroLevelTaskForNetwork(ref byte[] data, ref int offset, HeroLevelTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023C5 RID: 9157 RVA: 0x000DF08C File Offset: 0x000DD28C
		public static void WriteListHeroLevelTaskForNetwork(ref byte[] data, ref int offset, List<HeroLevelTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (HeroLevelTaskForNetwork value in values)
			{
				ArrayManager.WriteHeroLevelTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023C6 RID: 9158 RVA: 0x000DF108 File Offset: 0x000DD308
		public static HeroLevelTaskForNetwork ReadHeroLevelTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			HeroLevelTaskForNetwork heroLevelTaskForNetwork = new HeroLevelTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			heroLevelTaskForNetwork.DeserializeMessage(array);
			return heroLevelTaskForNetwork;
		}

		// Token: 0x060023C7 RID: 9159 RVA: 0x000DF14C File Offset: 0x000DD34C
		public static List<HeroLevelTaskForNetwork> ReadListHeroLevelTaskForNetwork(byte[] data, ref int offset)
		{
			List<HeroLevelTaskForNetwork> list = new List<HeroLevelTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				HeroLevelTaskForNetwork item = ArrayManager.ReadHeroLevelTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023C8 RID: 9160 RVA: 0x000DF190 File Offset: 0x000DD390
		public static void WritePlayGameTypeTaskForNetwork(ref byte[] data, ref int offset, PlayGameTypeTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023C9 RID: 9161 RVA: 0x000DF1AC File Offset: 0x000DD3AC
		public static void WriteListPlayGameTypeTaskForNetwork(ref byte[] data, ref int offset, List<PlayGameTypeTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayGameTypeTaskForNetwork value in values)
			{
				ArrayManager.WritePlayGameTypeTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023CA RID: 9162 RVA: 0x000DF228 File Offset: 0x000DD428
		public static PlayGameTypeTaskForNetwork ReadPlayGameTypeTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayGameTypeTaskForNetwork playGameTypeTaskForNetwork = new PlayGameTypeTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playGameTypeTaskForNetwork.DeserializeMessage(array);
			return playGameTypeTaskForNetwork;
		}

		// Token: 0x060023CB RID: 9163 RVA: 0x000DF26C File Offset: 0x000DD46C
		public static List<PlayGameTypeTaskForNetwork> ReadListPlayGameTypeTaskForNetwork(byte[] data, ref int offset)
		{
			List<PlayGameTypeTaskForNetwork> list = new List<PlayGameTypeTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayGameTypeTaskForNetwork item = ArrayManager.ReadPlayGameTypeTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023CC RID: 9164 RVA: 0x000DF2B0 File Offset: 0x000DD4B0
		public static void WritePlayerAssistTaskForNetwork(ref byte[] data, ref int offset, PlayerAssistTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023CD RID: 9165 RVA: 0x000DF2CC File Offset: 0x000DD4CC
		public static void WriteListPlayerAssistTaskForNetwork(ref byte[] data, ref int offset, List<PlayerAssistTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerAssistTaskForNetwork value in values)
			{
				ArrayManager.WritePlayerAssistTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023CE RID: 9166 RVA: 0x000DF348 File Offset: 0x000DD548
		public static PlayerAssistTaskForNetwork ReadPlayerAssistTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerAssistTaskForNetwork playerAssistTaskForNetwork = new PlayerAssistTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerAssistTaskForNetwork.DeserializeMessage(array);
			return playerAssistTaskForNetwork;
		}

		// Token: 0x060023CF RID: 9167 RVA: 0x000DF38C File Offset: 0x000DD58C
		public static List<PlayerAssistTaskForNetwork> ReadListPlayerAssistTaskForNetwork(byte[] data, ref int offset)
		{
			List<PlayerAssistTaskForNetwork> list = new List<PlayerAssistTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerAssistTaskForNetwork item = ArrayManager.ReadPlayerAssistTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023D0 RID: 9168 RVA: 0x000DF3D0 File Offset: 0x000DD5D0
		public static void WriteTotalDamageDealtTaskForNetwork(ref byte[] data, ref int offset, TotalDamageDealtTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023D1 RID: 9169 RVA: 0x000DF3EC File Offset: 0x000DD5EC
		public static void WriteListTotalDamageDealtTaskForNetwork(ref byte[] data, ref int offset, List<TotalDamageDealtTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TotalDamageDealtTaskForNetwork value in values)
			{
				ArrayManager.WriteTotalDamageDealtTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023D2 RID: 9170 RVA: 0x000DF468 File Offset: 0x000DD668
		public static TotalDamageDealtTaskForNetwork ReadTotalDamageDealtTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TotalDamageDealtTaskForNetwork totalDamageDealtTaskForNetwork = new TotalDamageDealtTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			totalDamageDealtTaskForNetwork.DeserializeMessage(array);
			return totalDamageDealtTaskForNetwork;
		}

		// Token: 0x060023D3 RID: 9171 RVA: 0x000DF4AC File Offset: 0x000DD6AC
		public static List<TotalDamageDealtTaskForNetwork> ReadListTotalDamageDealtTaskForNetwork(byte[] data, ref int offset)
		{
			List<TotalDamageDealtTaskForNetwork> list = new List<TotalDamageDealtTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TotalDamageDealtTaskForNetwork item = ArrayManager.ReadTotalDamageDealtTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023D4 RID: 9172 RVA: 0x000DF4F0 File Offset: 0x000DD6F0
		public static void WriteDamageDealtToPlayersTaskForNetwork(ref byte[] data, ref int offset, DamageDealtToPlayersTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023D5 RID: 9173 RVA: 0x000DF50C File Offset: 0x000DD70C
		public static void WriteListDamageDealtToPlayersTaskForNetwork(ref byte[] data, ref int offset, List<DamageDealtToPlayersTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DamageDealtToPlayersTaskForNetwork value in values)
			{
				ArrayManager.WriteDamageDealtToPlayersTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023D6 RID: 9174 RVA: 0x000DF588 File Offset: 0x000DD788
		public static DamageDealtToPlayersTaskForNetwork ReadDamageDealtToPlayersTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DamageDealtToPlayersTaskForNetwork damageDealtToPlayersTaskForNetwork = new DamageDealtToPlayersTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			damageDealtToPlayersTaskForNetwork.DeserializeMessage(array);
			return damageDealtToPlayersTaskForNetwork;
		}

		// Token: 0x060023D7 RID: 9175 RVA: 0x000DF5CC File Offset: 0x000DD7CC
		public static List<DamageDealtToPlayersTaskForNetwork> ReadListDamageDealtToPlayersTaskForNetwork(byte[] data, ref int offset)
		{
			List<DamageDealtToPlayersTaskForNetwork> list = new List<DamageDealtToPlayersTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DamageDealtToPlayersTaskForNetwork item = ArrayManager.ReadDamageDealtToPlayersTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023D8 RID: 9176 RVA: 0x000DF610 File Offset: 0x000DD810
		public static void WriteDamageDealtToMinionsTaskForNetwork(ref byte[] data, ref int offset, DamageDealtToMinionsTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023D9 RID: 9177 RVA: 0x000DF62C File Offset: 0x000DD82C
		public static void WriteListDamageDealtToMinionsTaskForNetwork(ref byte[] data, ref int offset, List<DamageDealtToMinionsTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DamageDealtToMinionsTaskForNetwork value in values)
			{
				ArrayManager.WriteDamageDealtToMinionsTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023DA RID: 9178 RVA: 0x000DF6A8 File Offset: 0x000DD8A8
		public static DamageDealtToMinionsTaskForNetwork ReadDamageDealtToMinionsTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DamageDealtToMinionsTaskForNetwork damageDealtToMinionsTaskForNetwork = new DamageDealtToMinionsTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			damageDealtToMinionsTaskForNetwork.DeserializeMessage(array);
			return damageDealtToMinionsTaskForNetwork;
		}

		// Token: 0x060023DB RID: 9179 RVA: 0x000DF6EC File Offset: 0x000DD8EC
		public static List<DamageDealtToMinionsTaskForNetwork> ReadListDamageDealtToMinionsTaskForNetwork(byte[] data, ref int offset)
		{
			List<DamageDealtToMinionsTaskForNetwork> list = new List<DamageDealtToMinionsTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DamageDealtToMinionsTaskForNetwork item = ArrayManager.ReadDamageDealtToMinionsTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023DC RID: 9180 RVA: 0x000DF730 File Offset: 0x000DD930
		public static void WriteTrapTaskForNetwork(ref byte[] data, ref int offset, TrapTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023DD RID: 9181 RVA: 0x000DF74C File Offset: 0x000DD94C
		public static void WriteListTrapTaskForNetwork(ref byte[] data, ref int offset, List<TrapTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (TrapTaskForNetwork value in values)
			{
				ArrayManager.WriteTrapTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023DE RID: 9182 RVA: 0x000DF7C8 File Offset: 0x000DD9C8
		public static TrapTaskForNetwork ReadTrapTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			TrapTaskForNetwork trapTaskForNetwork = new TrapTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			trapTaskForNetwork.DeserializeMessage(array);
			return trapTaskForNetwork;
		}

		// Token: 0x060023DF RID: 9183 RVA: 0x000DF80C File Offset: 0x000DDA0C
		public static List<TrapTaskForNetwork> ReadListTrapTaskForNetwork(byte[] data, ref int offset)
		{
			List<TrapTaskForNetwork> list = new List<TrapTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				TrapTaskForNetwork item = ArrayManager.ReadTrapTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023E0 RID: 9184 RVA: 0x000DF850 File Offset: 0x000DDA50
		public static void WriteComboTaskForNetwork(ref byte[] data, ref int offset, ComboTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023E1 RID: 9185 RVA: 0x000DF86C File Offset: 0x000DDA6C
		public static void WriteListComboTaskForNetwork(ref byte[] data, ref int offset, List<ComboTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ComboTaskForNetwork value in values)
			{
				ArrayManager.WriteComboTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023E2 RID: 9186 RVA: 0x000DF8E8 File Offset: 0x000DDAE8
		public static ComboTaskForNetwork ReadComboTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ComboTaskForNetwork comboTaskForNetwork = new ComboTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			comboTaskForNetwork.DeserializeMessage(array);
			return comboTaskForNetwork;
		}

		// Token: 0x060023E3 RID: 9187 RVA: 0x000DF92C File Offset: 0x000DDB2C
		public static List<ComboTaskForNetwork> ReadListComboTaskForNetwork(byte[] data, ref int offset)
		{
			List<ComboTaskForNetwork> list = new List<ComboTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ComboTaskForNetwork item = ArrayManager.ReadComboTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023E4 RID: 9188 RVA: 0x000DF970 File Offset: 0x000DDB70
		public static void WriteAddFriendTaskForNetwork(ref byte[] data, ref int offset, AddFriendTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023E5 RID: 9189 RVA: 0x000DF98C File Offset: 0x000DDB8C
		public static void WriteListAddFriendTaskForNetwork(ref byte[] data, ref int offset, List<AddFriendTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AddFriendTaskForNetwork value in values)
			{
				ArrayManager.WriteAddFriendTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023E6 RID: 9190 RVA: 0x000DFA08 File Offset: 0x000DDC08
		public static AddFriendTaskForNetwork ReadAddFriendTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AddFriendTaskForNetwork addFriendTaskForNetwork = new AddFriendTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			addFriendTaskForNetwork.DeserializeMessage(array);
			return addFriendTaskForNetwork;
		}

		// Token: 0x060023E7 RID: 9191 RVA: 0x000DFA4C File Offset: 0x000DDC4C
		public static List<AddFriendTaskForNetwork> ReadListAddFriendTaskForNetwork(byte[] data, ref int offset)
		{
			List<AddFriendTaskForNetwork> list = new List<AddFriendTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AddFriendTaskForNetwork item = ArrayManager.ReadAddFriendTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023E8 RID: 9192 RVA: 0x000DFA90 File Offset: 0x000DDC90
		public static void WriteCreatePartyTaskForNetwork(ref byte[] data, ref int offset, CreatePartyTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023E9 RID: 9193 RVA: 0x000DFAAC File Offset: 0x000DDCAC
		public static void WriteListCreatePartyTaskForNetwork(ref byte[] data, ref int offset, List<CreatePartyTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CreatePartyTaskForNetwork value in values)
			{
				ArrayManager.WriteCreatePartyTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023EA RID: 9194 RVA: 0x000DFB28 File Offset: 0x000DDD28
		public static CreatePartyTaskForNetwork ReadCreatePartyTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CreatePartyTaskForNetwork createPartyTaskForNetwork = new CreatePartyTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			createPartyTaskForNetwork.DeserializeMessage(array);
			return createPartyTaskForNetwork;
		}

		// Token: 0x060023EB RID: 9195 RVA: 0x000DFB6C File Offset: 0x000DDD6C
		public static List<CreatePartyTaskForNetwork> ReadListCreatePartyTaskForNetwork(byte[] data, ref int offset)
		{
			List<CreatePartyTaskForNetwork> list = new List<CreatePartyTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CreatePartyTaskForNetwork item = ArrayManager.ReadCreatePartyTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023EC RID: 9196 RVA: 0x000DFBB0 File Offset: 0x000DDDB0
		public static void WriteJoinPartyTaskForNetwork(ref byte[] data, ref int offset, JoinPartyTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023ED RID: 9197 RVA: 0x000DFBCC File Offset: 0x000DDDCC
		public static void WriteListJoinPartyTaskForNetwork(ref byte[] data, ref int offset, List<JoinPartyTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (JoinPartyTaskForNetwork value in values)
			{
				ArrayManager.WriteJoinPartyTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023EE RID: 9198 RVA: 0x000DFC48 File Offset: 0x000DDE48
		public static JoinPartyTaskForNetwork ReadJoinPartyTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			JoinPartyTaskForNetwork joinPartyTaskForNetwork = new JoinPartyTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			joinPartyTaskForNetwork.DeserializeMessage(array);
			return joinPartyTaskForNetwork;
		}

		// Token: 0x060023EF RID: 9199 RVA: 0x000DFC8C File Offset: 0x000DDE8C
		public static List<JoinPartyTaskForNetwork> ReadListJoinPartyTaskForNetwork(byte[] data, ref int offset)
		{
			List<JoinPartyTaskForNetwork> list = new List<JoinPartyTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				JoinPartyTaskForNetwork item = ArrayManager.ReadJoinPartyTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023F0 RID: 9200 RVA: 0x000DFCD0 File Offset: 0x000DDED0
		public static void WritePushPlayerAchievements(ref byte[] data, ref int offset, PushPlayerAchievements value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023F1 RID: 9201 RVA: 0x000DFCEC File Offset: 0x000DDEEC
		public static void WriteListPushPlayerAchievements(ref byte[] data, ref int offset, List<PushPlayerAchievements> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerAchievements value in values)
			{
				ArrayManager.WritePushPlayerAchievements(ref data, ref offset, value);
			}
		}

		// Token: 0x060023F2 RID: 9202 RVA: 0x000DFD68 File Offset: 0x000DDF68
		public static PushPlayerAchievements ReadPushPlayerAchievements(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerAchievements pushPlayerAchievements = new PushPlayerAchievements();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerAchievements.DeserializeMessage(array);
			return pushPlayerAchievements;
		}

		// Token: 0x060023F3 RID: 9203 RVA: 0x000DFDAC File Offset: 0x000DDFAC
		public static List<PushPlayerAchievements> ReadListPushPlayerAchievements(byte[] data, ref int offset)
		{
			List<PushPlayerAchievements> list = new List<PushPlayerAchievements>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerAchievements item = ArrayManager.ReadPushPlayerAchievements(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023F4 RID: 9204 RVA: 0x000DFDF0 File Offset: 0x000DDFF0
		public static void WriteResponseAchievementsProto(ref byte[] data, ref int offset, ResponseAchievementsProto value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023F5 RID: 9205 RVA: 0x000DFE0C File Offset: 0x000DE00C
		public static void WriteListResponseAchievementsProto(ref byte[] data, ref int offset, List<ResponseAchievementsProto> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseAchievementsProto value in values)
			{
				ArrayManager.WriteResponseAchievementsProto(ref data, ref offset, value);
			}
		}

		// Token: 0x060023F6 RID: 9206 RVA: 0x000DFE88 File Offset: 0x000DE088
		public static ResponseAchievementsProto ReadResponseAchievementsProto(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseAchievementsProto responseAchievementsProto = new ResponseAchievementsProto();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseAchievementsProto.DeserializeMessage(array);
			return responseAchievementsProto;
		}

		// Token: 0x060023F7 RID: 9207 RVA: 0x000DFECC File Offset: 0x000DE0CC
		public static List<ResponseAchievementsProto> ReadListResponseAchievementsProto(byte[] data, ref int offset)
		{
			List<ResponseAchievementsProto> list = new List<ResponseAchievementsProto>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseAchievementsProto item = ArrayManager.ReadResponseAchievementsProto(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023F8 RID: 9208 RVA: 0x000DFF10 File Offset: 0x000DE110
		public static void WriteAchievementProtoForNetwork(ref byte[] data, ref int offset, AchievementProtoForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023F9 RID: 9209 RVA: 0x000DFF2C File Offset: 0x000DE12C
		public static void WriteListAchievementProtoForNetwork(ref byte[] data, ref int offset, List<AchievementProtoForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementProtoForNetwork value in values)
			{
				ArrayManager.WriteAchievementProtoForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023FA RID: 9210 RVA: 0x000DFFA8 File Offset: 0x000DE1A8
		public static AchievementProtoForNetwork ReadAchievementProtoForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementProtoForNetwork achievementProtoForNetwork = new AchievementProtoForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementProtoForNetwork.DeserializeMessage(array);
			return achievementProtoForNetwork;
		}

		// Token: 0x060023FB RID: 9211 RVA: 0x000DFFEC File Offset: 0x000DE1EC
		public static List<AchievementProtoForNetwork> ReadListAchievementProtoForNetwork(byte[] data, ref int offset)
		{
			List<AchievementProtoForNetwork> list = new List<AchievementProtoForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementProtoForNetwork item = ArrayManager.ReadAchievementProtoForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060023FC RID: 9212 RVA: 0x000E0030 File Offset: 0x000DE230
		public static void WriteAchievementTaskProtoForNetwork(ref byte[] data, ref int offset, AchievementTaskProtoForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060023FD RID: 9213 RVA: 0x000E004C File Offset: 0x000DE24C
		public static void WriteListAchievementTaskProtoForNetwork(ref byte[] data, ref int offset, List<AchievementTaskProtoForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementTaskProtoForNetwork value in values)
			{
				ArrayManager.WriteAchievementTaskProtoForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060023FE RID: 9214 RVA: 0x000E00C8 File Offset: 0x000DE2C8
		public static AchievementTaskProtoForNetwork ReadAchievementTaskProtoForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementTaskProtoForNetwork achievementTaskProtoForNetwork = new AchievementTaskProtoForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementTaskProtoForNetwork.DeserializeMessage(array);
			return achievementTaskProtoForNetwork;
		}

		// Token: 0x060023FF RID: 9215 RVA: 0x000E010C File Offset: 0x000DE30C
		public static List<AchievementTaskProtoForNetwork> ReadListAchievementTaskProtoForNetwork(byte[] data, ref int offset)
		{
			List<AchievementTaskProtoForNetwork> list = new List<AchievementTaskProtoForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementTaskProtoForNetwork item = ArrayManager.ReadAchievementTaskProtoForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002400 RID: 9216 RVA: 0x000E0150 File Offset: 0x000DE350
		public static void WriteAchievementForNetwork(ref byte[] data, ref int offset, AchievementForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002401 RID: 9217 RVA: 0x000E016C File Offset: 0x000DE36C
		public static void WriteListAchievementForNetwork(ref byte[] data, ref int offset, List<AchievementForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementForNetwork value in values)
			{
				ArrayManager.WriteAchievementForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002402 RID: 9218 RVA: 0x000E01E8 File Offset: 0x000DE3E8
		public static AchievementForNetwork ReadAchievementForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementForNetwork achievementForNetwork = new AchievementForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementForNetwork.DeserializeMessage(array);
			return achievementForNetwork;
		}

		// Token: 0x06002403 RID: 9219 RVA: 0x000E022C File Offset: 0x000DE42C
		public static List<AchievementForNetwork> ReadListAchievementForNetwork(byte[] data, ref int offset)
		{
			List<AchievementForNetwork> list = new List<AchievementForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementForNetwork item = ArrayManager.ReadAchievementForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002404 RID: 9220 RVA: 0x000E0270 File Offset: 0x000DE470
		public static void WriteAchievementTaskForNetwork(ref byte[] data, ref int offset, AchievementTaskForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002405 RID: 9221 RVA: 0x000E028C File Offset: 0x000DE48C
		public static void WriteListAchievementTaskForNetwork(ref byte[] data, ref int offset, List<AchievementTaskForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AchievementTaskForNetwork value in values)
			{
				ArrayManager.WriteAchievementTaskForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002406 RID: 9222 RVA: 0x000E0308 File Offset: 0x000DE508
		public static AchievementTaskForNetwork ReadAchievementTaskForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AchievementTaskForNetwork achievementTaskForNetwork = new AchievementTaskForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			achievementTaskForNetwork.DeserializeMessage(array);
			return achievementTaskForNetwork;
		}

		// Token: 0x06002407 RID: 9223 RVA: 0x000E034C File Offset: 0x000DE54C
		public static List<AchievementTaskForNetwork> ReadListAchievementTaskForNetwork(byte[] data, ref int offset)
		{
			List<AchievementTaskForNetwork> list = new List<AchievementTaskForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AchievementTaskForNetwork item = ArrayManager.ReadAchievementTaskForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002408 RID: 9224 RVA: 0x000E0390 File Offset: 0x000DE590
		public static void WriteRequestOfflineTutorialStarted(ref byte[] data, ref int offset, RequestOfflineTutorialStarted value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002409 RID: 9225 RVA: 0x000E03AC File Offset: 0x000DE5AC
		public static void WriteListRequestOfflineTutorialStarted(ref byte[] data, ref int offset, List<RequestOfflineTutorialStarted> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestOfflineTutorialStarted value in values)
			{
				ArrayManager.WriteRequestOfflineTutorialStarted(ref data, ref offset, value);
			}
		}

		// Token: 0x0600240A RID: 9226 RVA: 0x000E0428 File Offset: 0x000DE628
		public static RequestOfflineTutorialStarted ReadRequestOfflineTutorialStarted(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestOfflineTutorialStarted requestOfflineTutorialStarted = new RequestOfflineTutorialStarted();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestOfflineTutorialStarted.DeserializeMessage(array);
			return requestOfflineTutorialStarted;
		}

		// Token: 0x0600240B RID: 9227 RVA: 0x000E046C File Offset: 0x000DE66C
		public static List<RequestOfflineTutorialStarted> ReadListRequestOfflineTutorialStarted(byte[] data, ref int offset)
		{
			List<RequestOfflineTutorialStarted> list = new List<RequestOfflineTutorialStarted>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestOfflineTutorialStarted item = ArrayManager.ReadRequestOfflineTutorialStarted(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600240C RID: 9228 RVA: 0x000E04B0 File Offset: 0x000DE6B0
		public static void WriteRequestOfflineTutorialCompleted(ref byte[] data, ref int offset, RequestOfflineTutorialCompleted value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600240D RID: 9229 RVA: 0x000E04CC File Offset: 0x000DE6CC
		public static void WriteListRequestOfflineTutorialCompleted(ref byte[] data, ref int offset, List<RequestOfflineTutorialCompleted> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestOfflineTutorialCompleted value in values)
			{
				ArrayManager.WriteRequestOfflineTutorialCompleted(ref data, ref offset, value);
			}
		}

		// Token: 0x0600240E RID: 9230 RVA: 0x000E0548 File Offset: 0x000DE748
		public static RequestOfflineTutorialCompleted ReadRequestOfflineTutorialCompleted(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestOfflineTutorialCompleted requestOfflineTutorialCompleted = new RequestOfflineTutorialCompleted();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestOfflineTutorialCompleted.DeserializeMessage(array);
			return requestOfflineTutorialCompleted;
		}

		// Token: 0x0600240F RID: 9231 RVA: 0x000E058C File Offset: 0x000DE78C
		public static List<RequestOfflineTutorialCompleted> ReadListRequestOfflineTutorialCompleted(byte[] data, ref int offset)
		{
			List<RequestOfflineTutorialCompleted> list = new List<RequestOfflineTutorialCompleted>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestOfflineTutorialCompleted item = ArrayManager.ReadRequestOfflineTutorialCompleted(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002410 RID: 9232 RVA: 0x000E05D0 File Offset: 0x000DE7D0
		public static void WriteResponseOfflineTutorialStatus(ref byte[] data, ref int offset, ResponseOfflineTutorialStatus value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002411 RID: 9233 RVA: 0x000E05EC File Offset: 0x000DE7EC
		public static void WriteListResponseOfflineTutorialStatus(ref byte[] data, ref int offset, List<ResponseOfflineTutorialStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseOfflineTutorialStatus value in values)
			{
				ArrayManager.WriteResponseOfflineTutorialStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06002412 RID: 9234 RVA: 0x000E0668 File Offset: 0x000DE868
		public static ResponseOfflineTutorialStatus ReadResponseOfflineTutorialStatus(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseOfflineTutorialStatus responseOfflineTutorialStatus = new ResponseOfflineTutorialStatus();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseOfflineTutorialStatus.DeserializeMessage(array);
			return responseOfflineTutorialStatus;
		}

		// Token: 0x06002413 RID: 9235 RVA: 0x000E06AC File Offset: 0x000DE8AC
		public static List<ResponseOfflineTutorialStatus> ReadListResponseOfflineTutorialStatus(byte[] data, ref int offset)
		{
			List<ResponseOfflineTutorialStatus> list = new List<ResponseOfflineTutorialStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseOfflineTutorialStatus item = ArrayManager.ReadResponseOfflineTutorialStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002414 RID: 9236 RVA: 0x000E06F0 File Offset: 0x000DE8F0
		public static void WriteRequestTutorialRewards(ref byte[] data, ref int offset, RequestTutorialRewards value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002415 RID: 9237 RVA: 0x000E070C File Offset: 0x000DE90C
		public static void WriteListRequestTutorialRewards(ref byte[] data, ref int offset, List<RequestTutorialRewards> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestTutorialRewards value in values)
			{
				ArrayManager.WriteRequestTutorialRewards(ref data, ref offset, value);
			}
		}

		// Token: 0x06002416 RID: 9238 RVA: 0x000E0788 File Offset: 0x000DE988
		public static RequestTutorialRewards ReadRequestTutorialRewards(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestTutorialRewards requestTutorialRewards = new RequestTutorialRewards();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestTutorialRewards.DeserializeMessage(array);
			return requestTutorialRewards;
		}

		// Token: 0x06002417 RID: 9239 RVA: 0x000E07CC File Offset: 0x000DE9CC
		public static List<RequestTutorialRewards> ReadListRequestTutorialRewards(byte[] data, ref int offset)
		{
			List<RequestTutorialRewards> list = new List<RequestTutorialRewards>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestTutorialRewards item = ArrayManager.ReadRequestTutorialRewards(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002418 RID: 9240 RVA: 0x000E0810 File Offset: 0x000DEA10
		public static void WriteResponseTutorialRewards(ref byte[] data, ref int offset, ResponseTutorialRewards value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002419 RID: 9241 RVA: 0x000E082C File Offset: 0x000DEA2C
		public static void WriteListResponseTutorialRewards(ref byte[] data, ref int offset, List<ResponseTutorialRewards> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseTutorialRewards value in values)
			{
				ArrayManager.WriteResponseTutorialRewards(ref data, ref offset, value);
			}
		}

		// Token: 0x0600241A RID: 9242 RVA: 0x000E08A8 File Offset: 0x000DEAA8
		public static ResponseTutorialRewards ReadResponseTutorialRewards(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseTutorialRewards responseTutorialRewards = new ResponseTutorialRewards();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseTutorialRewards.DeserializeMessage(array);
			return responseTutorialRewards;
		}

		// Token: 0x0600241B RID: 9243 RVA: 0x000E08EC File Offset: 0x000DEAEC
		public static List<ResponseTutorialRewards> ReadListResponseTutorialRewards(byte[] data, ref int offset)
		{
			List<ResponseTutorialRewards> list = new List<ResponseTutorialRewards>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseTutorialRewards item = ArrayManager.ReadResponseTutorialRewards(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600241C RID: 9244 RVA: 0x000E0930 File Offset: 0x000DEB30
		public static void WritePacketTutorialRewards(ref byte[] data, ref int offset, PacketTutorialRewards value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600241D RID: 9245 RVA: 0x000E094C File Offset: 0x000DEB4C
		public static void WriteListPacketTutorialRewards(ref byte[] data, ref int offset, List<PacketTutorialRewards> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketTutorialRewards value in values)
			{
				ArrayManager.WritePacketTutorialRewards(ref data, ref offset, value);
			}
		}

		// Token: 0x0600241E RID: 9246 RVA: 0x000E09C8 File Offset: 0x000DEBC8
		public static PacketTutorialRewards ReadPacketTutorialRewards(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketTutorialRewards packetTutorialRewards = new PacketTutorialRewards();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetTutorialRewards.DeserializeMessage(array);
			return packetTutorialRewards;
		}

		// Token: 0x0600241F RID: 9247 RVA: 0x000E0A0C File Offset: 0x000DEC0C
		public static List<PacketTutorialRewards> ReadListPacketTutorialRewards(byte[] data, ref int offset)
		{
			List<PacketTutorialRewards> list = new List<PacketTutorialRewards>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketTutorialRewards item = ArrayManager.ReadPacketTutorialRewards(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002420 RID: 9248 RVA: 0x000E0A50 File Offset: 0x000DEC50
		public static void WriteSteamLoginRequest(ref byte[] data, ref int offset, SteamLoginRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002421 RID: 9249 RVA: 0x000E0A6C File Offset: 0x000DEC6C
		public static void WriteListSteamLoginRequest(ref byte[] data, ref int offset, List<SteamLoginRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SteamLoginRequest value in values)
			{
				ArrayManager.WriteSteamLoginRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x06002422 RID: 9250 RVA: 0x000E0AE8 File Offset: 0x000DECE8
		public static SteamLoginRequest ReadSteamLoginRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SteamLoginRequest steamLoginRequest = new SteamLoginRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			steamLoginRequest.DeserializeMessage(array);
			return steamLoginRequest;
		}

		// Token: 0x06002423 RID: 9251 RVA: 0x000E0B2C File Offset: 0x000DED2C
		public static List<SteamLoginRequest> ReadListSteamLoginRequest(byte[] data, ref int offset)
		{
			List<SteamLoginRequest> list = new List<SteamLoginRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SteamLoginRequest item = ArrayManager.ReadSteamLoginRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002424 RID: 9252 RVA: 0x000E0B70 File Offset: 0x000DED70
		public static void WriteSteamLoginResponse(ref byte[] data, ref int offset, SteamLoginResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002425 RID: 9253 RVA: 0x000E0B8C File Offset: 0x000DED8C
		public static void WriteListSteamLoginResponse(ref byte[] data, ref int offset, List<SteamLoginResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SteamLoginResponse value in values)
			{
				ArrayManager.WriteSteamLoginResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x06002426 RID: 9254 RVA: 0x000E0C08 File Offset: 0x000DEE08
		public static SteamLoginResponse ReadSteamLoginResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SteamLoginResponse steamLoginResponse = new SteamLoginResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			steamLoginResponse.DeserializeMessage(array);
			return steamLoginResponse;
		}

		// Token: 0x06002427 RID: 9255 RVA: 0x000E0C4C File Offset: 0x000DEE4C
		public static List<SteamLoginResponse> ReadListSteamLoginResponse(byte[] data, ref int offset)
		{
			List<SteamLoginResponse> list = new List<SteamLoginResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SteamLoginResponse item = ArrayManager.ReadSteamLoginResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002428 RID: 9256 RVA: 0x000E0C90 File Offset: 0x000DEE90
		public static void WriteRequestValidateAccountForSteam(ref byte[] data, ref int offset, RequestValidateAccountForSteam value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002429 RID: 9257 RVA: 0x000E0CAC File Offset: 0x000DEEAC
		public static void WriteListRequestValidateAccountForSteam(ref byte[] data, ref int offset, List<RequestValidateAccountForSteam> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestValidateAccountForSteam value in values)
			{
				ArrayManager.WriteRequestValidateAccountForSteam(ref data, ref offset, value);
			}
		}

		// Token: 0x0600242A RID: 9258 RVA: 0x000E0D28 File Offset: 0x000DEF28
		public static RequestValidateAccountForSteam ReadRequestValidateAccountForSteam(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestValidateAccountForSteam requestValidateAccountForSteam = new RequestValidateAccountForSteam();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestValidateAccountForSteam.DeserializeMessage(array);
			return requestValidateAccountForSteam;
		}

		// Token: 0x0600242B RID: 9259 RVA: 0x000E0D6C File Offset: 0x000DEF6C
		public static List<RequestValidateAccountForSteam> ReadListRequestValidateAccountForSteam(byte[] data, ref int offset)
		{
			List<RequestValidateAccountForSteam> list = new List<RequestValidateAccountForSteam>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestValidateAccountForSteam item = ArrayManager.ReadRequestValidateAccountForSteam(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600242C RID: 9260 RVA: 0x000E0DB0 File Offset: 0x000DEFB0
		public static void WriteResponseValidateAccountForSteam(ref byte[] data, ref int offset, ResponseValidateAccountForSteam value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600242D RID: 9261 RVA: 0x000E0DCC File Offset: 0x000DEFCC
		public static void WriteListResponseValidateAccountForSteam(ref byte[] data, ref int offset, List<ResponseValidateAccountForSteam> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseValidateAccountForSteam value in values)
			{
				ArrayManager.WriteResponseValidateAccountForSteam(ref data, ref offset, value);
			}
		}

		// Token: 0x0600242E RID: 9262 RVA: 0x000E0E48 File Offset: 0x000DF048
		public static ResponseValidateAccountForSteam ReadResponseValidateAccountForSteam(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseValidateAccountForSteam responseValidateAccountForSteam = new ResponseValidateAccountForSteam();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseValidateAccountForSteam.DeserializeMessage(array);
			return responseValidateAccountForSteam;
		}

		// Token: 0x0600242F RID: 9263 RVA: 0x000E0E8C File Offset: 0x000DF08C
		public static List<ResponseValidateAccountForSteam> ReadListResponseValidateAccountForSteam(byte[] data, ref int offset)
		{
			List<ResponseValidateAccountForSteam> list = new List<ResponseValidateAccountForSteam>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseValidateAccountForSteam item = ArrayManager.ReadResponseValidateAccountForSteam(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002430 RID: 9264 RVA: 0x000E0ED0 File Offset: 0x000DF0D0
		public static void WriteRequestSubmitConfirmationCode(ref byte[] data, ref int offset, RequestSubmitConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002431 RID: 9265 RVA: 0x000E0EEC File Offset: 0x000DF0EC
		public static void WriteListRequestSubmitConfirmationCode(ref byte[] data, ref int offset, List<RequestSubmitConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSubmitConfirmationCode value in values)
			{
				ArrayManager.WriteRequestSubmitConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x06002432 RID: 9266 RVA: 0x000E0F68 File Offset: 0x000DF168
		public static RequestSubmitConfirmationCode ReadRequestSubmitConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSubmitConfirmationCode requestSubmitConfirmationCode = new RequestSubmitConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSubmitConfirmationCode.DeserializeMessage(array);
			return requestSubmitConfirmationCode;
		}

		// Token: 0x06002433 RID: 9267 RVA: 0x000E0FAC File Offset: 0x000DF1AC
		public static List<RequestSubmitConfirmationCode> ReadListRequestSubmitConfirmationCode(byte[] data, ref int offset)
		{
			List<RequestSubmitConfirmationCode> list = new List<RequestSubmitConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSubmitConfirmationCode item = ArrayManager.ReadRequestSubmitConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002434 RID: 9268 RVA: 0x000E0FF0 File Offset: 0x000DF1F0
		public static void WriteResponseSubmitConfirmationCode(ref byte[] data, ref int offset, ResponseSubmitConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002435 RID: 9269 RVA: 0x000E100C File Offset: 0x000DF20C
		public static void WriteListResponseSubmitConfirmationCode(ref byte[] data, ref int offset, List<ResponseSubmitConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSubmitConfirmationCode value in values)
			{
				ArrayManager.WriteResponseSubmitConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x06002436 RID: 9270 RVA: 0x000E1088 File Offset: 0x000DF288
		public static ResponseSubmitConfirmationCode ReadResponseSubmitConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSubmitConfirmationCode responseSubmitConfirmationCode = new ResponseSubmitConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSubmitConfirmationCode.DeserializeMessage(array);
			return responseSubmitConfirmationCode;
		}

		// Token: 0x06002437 RID: 9271 RVA: 0x000E10CC File Offset: 0x000DF2CC
		public static List<ResponseSubmitConfirmationCode> ReadListResponseSubmitConfirmationCode(byte[] data, ref int offset)
		{
			List<ResponseSubmitConfirmationCode> list = new List<ResponseSubmitConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSubmitConfirmationCode item = ArrayManager.ReadResponseSubmitConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002438 RID: 9272 RVA: 0x000E1110 File Offset: 0x000DF310
		public static void WriteRequestSubmitSteamConfirmationCode(ref byte[] data, ref int offset, RequestSubmitSteamConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002439 RID: 9273 RVA: 0x000E112C File Offset: 0x000DF32C
		public static void WriteListRequestSubmitSteamConfirmationCode(ref byte[] data, ref int offset, List<RequestSubmitSteamConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSubmitSteamConfirmationCode value in values)
			{
				ArrayManager.WriteRequestSubmitSteamConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x0600243A RID: 9274 RVA: 0x000E11A8 File Offset: 0x000DF3A8
		public static RequestSubmitSteamConfirmationCode ReadRequestSubmitSteamConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSubmitSteamConfirmationCode requestSubmitSteamConfirmationCode = new RequestSubmitSteamConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSubmitSteamConfirmationCode.DeserializeMessage(array);
			return requestSubmitSteamConfirmationCode;
		}

		// Token: 0x0600243B RID: 9275 RVA: 0x000E11EC File Offset: 0x000DF3EC
		public static List<RequestSubmitSteamConfirmationCode> ReadListRequestSubmitSteamConfirmationCode(byte[] data, ref int offset)
		{
			List<RequestSubmitSteamConfirmationCode> list = new List<RequestSubmitSteamConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSubmitSteamConfirmationCode item = ArrayManager.ReadRequestSubmitSteamConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600243C RID: 9276 RVA: 0x000E1230 File Offset: 0x000DF430
		public static void WriteResponseSubmitSteamConfirmationCode(ref byte[] data, ref int offset, ResponseSubmitSteamConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600243D RID: 9277 RVA: 0x000E124C File Offset: 0x000DF44C
		public static void WriteListResponseSubmitSteamConfirmationCode(ref byte[] data, ref int offset, List<ResponseSubmitSteamConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSubmitSteamConfirmationCode value in values)
			{
				ArrayManager.WriteResponseSubmitSteamConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x0600243E RID: 9278 RVA: 0x000E12C8 File Offset: 0x000DF4C8
		public static ResponseSubmitSteamConfirmationCode ReadResponseSubmitSteamConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSubmitSteamConfirmationCode responseSubmitSteamConfirmationCode = new ResponseSubmitSteamConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSubmitSteamConfirmationCode.DeserializeMessage(array);
			return responseSubmitSteamConfirmationCode;
		}

		// Token: 0x0600243F RID: 9279 RVA: 0x000E130C File Offset: 0x000DF50C
		public static List<ResponseSubmitSteamConfirmationCode> ReadListResponseSubmitSteamConfirmationCode(byte[] data, ref int offset)
		{
			List<ResponseSubmitSteamConfirmationCode> list = new List<ResponseSubmitSteamConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSubmitSteamConfirmationCode item = ArrayManager.ReadResponseSubmitSteamConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002440 RID: 9280 RVA: 0x000E1350 File Offset: 0x000DF550
		public static void WriteRequestResendConfirmationCode(ref byte[] data, ref int offset, RequestResendConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002441 RID: 9281 RVA: 0x000E136C File Offset: 0x000DF56C
		public static void WriteListRequestResendConfirmationCode(ref byte[] data, ref int offset, List<RequestResendConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestResendConfirmationCode value in values)
			{
				ArrayManager.WriteRequestResendConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x06002442 RID: 9282 RVA: 0x000E13E8 File Offset: 0x000DF5E8
		public static RequestResendConfirmationCode ReadRequestResendConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestResendConfirmationCode requestResendConfirmationCode = new RequestResendConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestResendConfirmationCode.DeserializeMessage(array);
			return requestResendConfirmationCode;
		}

		// Token: 0x06002443 RID: 9283 RVA: 0x000E142C File Offset: 0x000DF62C
		public static List<RequestResendConfirmationCode> ReadListRequestResendConfirmationCode(byte[] data, ref int offset)
		{
			List<RequestResendConfirmationCode> list = new List<RequestResendConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestResendConfirmationCode item = ArrayManager.ReadRequestResendConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002444 RID: 9284 RVA: 0x000E1470 File Offset: 0x000DF670
		public static void WriteResponseResendConfirmationCode(ref byte[] data, ref int offset, ResponseResendConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002445 RID: 9285 RVA: 0x000E148C File Offset: 0x000DF68C
		public static void WriteListResponseResendConfirmationCode(ref byte[] data, ref int offset, List<ResponseResendConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseResendConfirmationCode value in values)
			{
				ArrayManager.WriteResponseResendConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x06002446 RID: 9286 RVA: 0x000E1508 File Offset: 0x000DF708
		public static ResponseResendConfirmationCode ReadResponseResendConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseResendConfirmationCode responseResendConfirmationCode = new ResponseResendConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseResendConfirmationCode.DeserializeMessage(array);
			return responseResendConfirmationCode;
		}

		// Token: 0x06002447 RID: 9287 RVA: 0x000E154C File Offset: 0x000DF74C
		public static List<ResponseResendConfirmationCode> ReadListResponseResendConfirmationCode(byte[] data, ref int offset)
		{
			List<ResponseResendConfirmationCode> list = new List<ResponseResendConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseResendConfirmationCode item = ArrayManager.ReadResponseResendConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002448 RID: 9288 RVA: 0x000E1590 File Offset: 0x000DF790
		public static void WriteRequestResendSteamConfirmationCode(ref byte[] data, ref int offset, RequestResendSteamConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002449 RID: 9289 RVA: 0x000E15AC File Offset: 0x000DF7AC
		public static void WriteListRequestResendSteamConfirmationCode(ref byte[] data, ref int offset, List<RequestResendSteamConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestResendSteamConfirmationCode value in values)
			{
				ArrayManager.WriteRequestResendSteamConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x0600244A RID: 9290 RVA: 0x000E1628 File Offset: 0x000DF828
		public static RequestResendSteamConfirmationCode ReadRequestResendSteamConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestResendSteamConfirmationCode requestResendSteamConfirmationCode = new RequestResendSteamConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestResendSteamConfirmationCode.DeserializeMessage(array);
			return requestResendSteamConfirmationCode;
		}

		// Token: 0x0600244B RID: 9291 RVA: 0x000E166C File Offset: 0x000DF86C
		public static List<RequestResendSteamConfirmationCode> ReadListRequestResendSteamConfirmationCode(byte[] data, ref int offset)
		{
			List<RequestResendSteamConfirmationCode> list = new List<RequestResendSteamConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestResendSteamConfirmationCode item = ArrayManager.ReadRequestResendSteamConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600244C RID: 9292 RVA: 0x000E16B0 File Offset: 0x000DF8B0
		public static void WriteResponseResendSteamConfirmationCode(ref byte[] data, ref int offset, ResponseResendSteamConfirmationCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600244D RID: 9293 RVA: 0x000E16CC File Offset: 0x000DF8CC
		public static void WriteListResponseResendSteamConfirmationCode(ref byte[] data, ref int offset, List<ResponseResendSteamConfirmationCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseResendSteamConfirmationCode value in values)
			{
				ArrayManager.WriteResponseResendSteamConfirmationCode(ref data, ref offset, value);
			}
		}

		// Token: 0x0600244E RID: 9294 RVA: 0x000E1748 File Offset: 0x000DF948
		public static ResponseResendSteamConfirmationCode ReadResponseResendSteamConfirmationCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseResendSteamConfirmationCode responseResendSteamConfirmationCode = new ResponseResendSteamConfirmationCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseResendSteamConfirmationCode.DeserializeMessage(array);
			return responseResendSteamConfirmationCode;
		}

		// Token: 0x0600244F RID: 9295 RVA: 0x000E178C File Offset: 0x000DF98C
		public static List<ResponseResendSteamConfirmationCode> ReadListResponseResendSteamConfirmationCode(byte[] data, ref int offset)
		{
			List<ResponseResendSteamConfirmationCode> list = new List<ResponseResendSteamConfirmationCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseResendSteamConfirmationCode item = ArrayManager.ReadResponseResendSteamConfirmationCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002450 RID: 9296 RVA: 0x000E17D0 File Offset: 0x000DF9D0
		public static void WriteRequestReconcileSteamDLC(ref byte[] data, ref int offset, RequestReconcileSteamDLC value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002451 RID: 9297 RVA: 0x000E17EC File Offset: 0x000DF9EC
		public static void WriteListRequestReconcileSteamDLC(ref byte[] data, ref int offset, List<RequestReconcileSteamDLC> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestReconcileSteamDLC value in values)
			{
				ArrayManager.WriteRequestReconcileSteamDLC(ref data, ref offset, value);
			}
		}

		// Token: 0x06002452 RID: 9298 RVA: 0x000E1868 File Offset: 0x000DFA68
		public static RequestReconcileSteamDLC ReadRequestReconcileSteamDLC(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestReconcileSteamDLC requestReconcileSteamDLC = new RequestReconcileSteamDLC();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestReconcileSteamDLC.DeserializeMessage(array);
			return requestReconcileSteamDLC;
		}

		// Token: 0x06002453 RID: 9299 RVA: 0x000E18AC File Offset: 0x000DFAAC
		public static List<RequestReconcileSteamDLC> ReadListRequestReconcileSteamDLC(byte[] data, ref int offset)
		{
			List<RequestReconcileSteamDLC> list = new List<RequestReconcileSteamDLC>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestReconcileSteamDLC item = ArrayManager.ReadRequestReconcileSteamDLC(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002454 RID: 9300 RVA: 0x000E18F0 File Offset: 0x000DFAF0
		public static void WriteRequestValidateEmail(ref byte[] data, ref int offset, RequestValidateEmail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002455 RID: 9301 RVA: 0x000E190C File Offset: 0x000DFB0C
		public static void WriteListRequestValidateEmail(ref byte[] data, ref int offset, List<RequestValidateEmail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestValidateEmail value in values)
			{
				ArrayManager.WriteRequestValidateEmail(ref data, ref offset, value);
			}
		}

		// Token: 0x06002456 RID: 9302 RVA: 0x000E1988 File Offset: 0x000DFB88
		public static RequestValidateEmail ReadRequestValidateEmail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestValidateEmail requestValidateEmail = new RequestValidateEmail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestValidateEmail.DeserializeMessage(array);
			return requestValidateEmail;
		}

		// Token: 0x06002457 RID: 9303 RVA: 0x000E19CC File Offset: 0x000DFBCC
		public static List<RequestValidateEmail> ReadListRequestValidateEmail(byte[] data, ref int offset)
		{
			List<RequestValidateEmail> list = new List<RequestValidateEmail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestValidateEmail item = ArrayManager.ReadRequestValidateEmail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002458 RID: 9304 RVA: 0x000E1A10 File Offset: 0x000DFC10
		public static void WriteResponseValidateEmail(ref byte[] data, ref int offset, ResponseValidateEmail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002459 RID: 9305 RVA: 0x000E1A2C File Offset: 0x000DFC2C
		public static void WriteListResponseValidateEmail(ref byte[] data, ref int offset, List<ResponseValidateEmail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseValidateEmail value in values)
			{
				ArrayManager.WriteResponseValidateEmail(ref data, ref offset, value);
			}
		}

		// Token: 0x0600245A RID: 9306 RVA: 0x000E1AA8 File Offset: 0x000DFCA8
		public static ResponseValidateEmail ReadResponseValidateEmail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseValidateEmail responseValidateEmail = new ResponseValidateEmail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseValidateEmail.DeserializeMessage(array);
			return responseValidateEmail;
		}

		// Token: 0x0600245B RID: 9307 RVA: 0x000E1AEC File Offset: 0x000DFCEC
		public static List<ResponseValidateEmail> ReadListResponseValidateEmail(byte[] data, ref int offset)
		{
			List<ResponseValidateEmail> list = new List<ResponseValidateEmail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseValidateEmail item = ArrayManager.ReadResponseValidateEmail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600245C RID: 9308 RVA: 0x000E1B30 File Offset: 0x000DFD30
		public static void WriteRequestValidateReferralCode(ref byte[] data, ref int offset, RequestValidateReferralCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600245D RID: 9309 RVA: 0x000E1B4C File Offset: 0x000DFD4C
		public static void WriteListRequestValidateReferralCode(ref byte[] data, ref int offset, List<RequestValidateReferralCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestValidateReferralCode value in values)
			{
				ArrayManager.WriteRequestValidateReferralCode(ref data, ref offset, value);
			}
		}

		// Token: 0x0600245E RID: 9310 RVA: 0x000E1BC8 File Offset: 0x000DFDC8
		public static RequestValidateReferralCode ReadRequestValidateReferralCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestValidateReferralCode requestValidateReferralCode = new RequestValidateReferralCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestValidateReferralCode.DeserializeMessage(array);
			return requestValidateReferralCode;
		}

		// Token: 0x0600245F RID: 9311 RVA: 0x000E1C0C File Offset: 0x000DFE0C
		public static List<RequestValidateReferralCode> ReadListRequestValidateReferralCode(byte[] data, ref int offset)
		{
			List<RequestValidateReferralCode> list = new List<RequestValidateReferralCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestValidateReferralCode item = ArrayManager.ReadRequestValidateReferralCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002460 RID: 9312 RVA: 0x000E1C50 File Offset: 0x000DFE50
		public static void WriteResponseValidateReferralCode(ref byte[] data, ref int offset, ResponseValidateReferralCode value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002461 RID: 9313 RVA: 0x000E1C6C File Offset: 0x000DFE6C
		public static void WriteListResponseValidateReferralCode(ref byte[] data, ref int offset, List<ResponseValidateReferralCode> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseValidateReferralCode value in values)
			{
				ArrayManager.WriteResponseValidateReferralCode(ref data, ref offset, value);
			}
		}

		// Token: 0x06002462 RID: 9314 RVA: 0x000E1CE8 File Offset: 0x000DFEE8
		public static ResponseValidateReferralCode ReadResponseValidateReferralCode(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseValidateReferralCode responseValidateReferralCode = new ResponseValidateReferralCode();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseValidateReferralCode.DeserializeMessage(array);
			return responseValidateReferralCode;
		}

		// Token: 0x06002463 RID: 9315 RVA: 0x000E1D2C File Offset: 0x000DFF2C
		public static List<ResponseValidateReferralCode> ReadListResponseValidateReferralCode(byte[] data, ref int offset)
		{
			List<ResponseValidateReferralCode> list = new List<ResponseValidateReferralCode>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseValidateReferralCode item = ArrayManager.ReadResponseValidateReferralCode(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002464 RID: 9316 RVA: 0x000E1D70 File Offset: 0x000DFF70
		public static void WriteRequestValidateNickname(ref byte[] data, ref int offset, RequestValidateNickname value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002465 RID: 9317 RVA: 0x000E1D8C File Offset: 0x000DFF8C
		public static void WriteListRequestValidateNickname(ref byte[] data, ref int offset, List<RequestValidateNickname> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestValidateNickname value in values)
			{
				ArrayManager.WriteRequestValidateNickname(ref data, ref offset, value);
			}
		}

		// Token: 0x06002466 RID: 9318 RVA: 0x000E1E08 File Offset: 0x000E0008
		public static RequestValidateNickname ReadRequestValidateNickname(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestValidateNickname requestValidateNickname = new RequestValidateNickname();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestValidateNickname.DeserializeMessage(array);
			return requestValidateNickname;
		}

		// Token: 0x06002467 RID: 9319 RVA: 0x000E1E4C File Offset: 0x000E004C
		public static List<RequestValidateNickname> ReadListRequestValidateNickname(byte[] data, ref int offset)
		{
			List<RequestValidateNickname> list = new List<RequestValidateNickname>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestValidateNickname item = ArrayManager.ReadRequestValidateNickname(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002468 RID: 9320 RVA: 0x000E1E90 File Offset: 0x000E0090
		public static void WriteResponseValidateNickname(ref byte[] data, ref int offset, ResponseValidateNickname value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002469 RID: 9321 RVA: 0x000E1EAC File Offset: 0x000E00AC
		public static void WriteListResponseValidateNickname(ref byte[] data, ref int offset, List<ResponseValidateNickname> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseValidateNickname value in values)
			{
				ArrayManager.WriteResponseValidateNickname(ref data, ref offset, value);
			}
		}

		// Token: 0x0600246A RID: 9322 RVA: 0x000E1F28 File Offset: 0x000E0128
		public static ResponseValidateNickname ReadResponseValidateNickname(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseValidateNickname responseValidateNickname = new ResponseValidateNickname();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseValidateNickname.DeserializeMessage(array);
			return responseValidateNickname;
		}

		// Token: 0x0600246B RID: 9323 RVA: 0x000E1F6C File Offset: 0x000E016C
		public static List<ResponseValidateNickname> ReadListResponseValidateNickname(byte[] data, ref int offset)
		{
			List<ResponseValidateNickname> list = new List<ResponseValidateNickname>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseValidateNickname item = ArrayManager.ReadResponseValidateNickname(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600246C RID: 9324 RVA: 0x000E1FB0 File Offset: 0x000E01B0
		public static void WriteRequestValidatePassword(ref byte[] data, ref int offset, RequestValidatePassword value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600246D RID: 9325 RVA: 0x000E1FCC File Offset: 0x000E01CC
		public static void WriteListRequestValidatePassword(ref byte[] data, ref int offset, List<RequestValidatePassword> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestValidatePassword value in values)
			{
				ArrayManager.WriteRequestValidatePassword(ref data, ref offset, value);
			}
		}

		// Token: 0x0600246E RID: 9326 RVA: 0x000E2048 File Offset: 0x000E0248
		public static RequestValidatePassword ReadRequestValidatePassword(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestValidatePassword requestValidatePassword = new RequestValidatePassword();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestValidatePassword.DeserializeMessage(array);
			return requestValidatePassword;
		}

		// Token: 0x0600246F RID: 9327 RVA: 0x000E208C File Offset: 0x000E028C
		public static List<RequestValidatePassword> ReadListRequestValidatePassword(byte[] data, ref int offset)
		{
			List<RequestValidatePassword> list = new List<RequestValidatePassword>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestValidatePassword item = ArrayManager.ReadRequestValidatePassword(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002470 RID: 9328 RVA: 0x000E20D0 File Offset: 0x000E02D0
		public static void WriteResponseValidatePassword(ref byte[] data, ref int offset, ResponseValidatePassword value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002471 RID: 9329 RVA: 0x000E20EC File Offset: 0x000E02EC
		public static void WriteListResponseValidatePassword(ref byte[] data, ref int offset, List<ResponseValidatePassword> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseValidatePassword value in values)
			{
				ArrayManager.WriteResponseValidatePassword(ref data, ref offset, value);
			}
		}

		// Token: 0x06002472 RID: 9330 RVA: 0x000E2168 File Offset: 0x000E0368
		public static ResponseValidatePassword ReadResponseValidatePassword(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseValidatePassword responseValidatePassword = new ResponseValidatePassword();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseValidatePassword.DeserializeMessage(array);
			return responseValidatePassword;
		}

		// Token: 0x06002473 RID: 9331 RVA: 0x000E21AC File Offset: 0x000E03AC
		public static List<ResponseValidatePassword> ReadListResponseValidatePassword(byte[] data, ref int offset)
		{
			List<ResponseValidatePassword> list = new List<ResponseValidatePassword>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseValidatePassword item = ArrayManager.ReadResponseValidatePassword(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002474 RID: 9332 RVA: 0x000E21F0 File Offset: 0x000E03F0
		public static void WriteRequestInitiateSteamTransaction(ref byte[] data, ref int offset, RequestInitiateSteamTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002475 RID: 9333 RVA: 0x000E220C File Offset: 0x000E040C
		public static void WriteListRequestInitiateSteamTransaction(ref byte[] data, ref int offset, List<RequestInitiateSteamTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestInitiateSteamTransaction value in values)
			{
				ArrayManager.WriteRequestInitiateSteamTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x06002476 RID: 9334 RVA: 0x000E2288 File Offset: 0x000E0488
		public static RequestInitiateSteamTransaction ReadRequestInitiateSteamTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestInitiateSteamTransaction requestInitiateSteamTransaction = new RequestInitiateSteamTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestInitiateSteamTransaction.DeserializeMessage(array);
			return requestInitiateSteamTransaction;
		}

		// Token: 0x06002477 RID: 9335 RVA: 0x000E22CC File Offset: 0x000E04CC
		public static List<RequestInitiateSteamTransaction> ReadListRequestInitiateSteamTransaction(byte[] data, ref int offset)
		{
			List<RequestInitiateSteamTransaction> list = new List<RequestInitiateSteamTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestInitiateSteamTransaction item = ArrayManager.ReadRequestInitiateSteamTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002478 RID: 9336 RVA: 0x000E2310 File Offset: 0x000E0510
		public static void WriteResponseInitiateSteamTransaction(ref byte[] data, ref int offset, ResponseInitiateSteamTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002479 RID: 9337 RVA: 0x000E232C File Offset: 0x000E052C
		public static void WriteListResponseInitiateSteamTransaction(ref byte[] data, ref int offset, List<ResponseInitiateSteamTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseInitiateSteamTransaction value in values)
			{
				ArrayManager.WriteResponseInitiateSteamTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x0600247A RID: 9338 RVA: 0x000E23A8 File Offset: 0x000E05A8
		public static ResponseInitiateSteamTransaction ReadResponseInitiateSteamTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseInitiateSteamTransaction responseInitiateSteamTransaction = new ResponseInitiateSteamTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseInitiateSteamTransaction.DeserializeMessage(array);
			return responseInitiateSteamTransaction;
		}

		// Token: 0x0600247B RID: 9339 RVA: 0x000E23EC File Offset: 0x000E05EC
		public static List<ResponseInitiateSteamTransaction> ReadListResponseInitiateSteamTransaction(byte[] data, ref int offset)
		{
			List<ResponseInitiateSteamTransaction> list = new List<ResponseInitiateSteamTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseInitiateSteamTransaction item = ArrayManager.ReadResponseInitiateSteamTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600247C RID: 9340 RVA: 0x000E2430 File Offset: 0x000E0630
		public static void WriteRequestFinalizeSteamTransaction(ref byte[] data, ref int offset, RequestFinalizeSteamTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600247D RID: 9341 RVA: 0x000E244C File Offset: 0x000E064C
		public static void WriteListRequestFinalizeSteamTransaction(ref byte[] data, ref int offset, List<RequestFinalizeSteamTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestFinalizeSteamTransaction value in values)
			{
				ArrayManager.WriteRequestFinalizeSteamTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x0600247E RID: 9342 RVA: 0x000E24C8 File Offset: 0x000E06C8
		public static RequestFinalizeSteamTransaction ReadRequestFinalizeSteamTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestFinalizeSteamTransaction requestFinalizeSteamTransaction = new RequestFinalizeSteamTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestFinalizeSteamTransaction.DeserializeMessage(array);
			return requestFinalizeSteamTransaction;
		}

		// Token: 0x0600247F RID: 9343 RVA: 0x000E250C File Offset: 0x000E070C
		public static List<RequestFinalizeSteamTransaction> ReadListRequestFinalizeSteamTransaction(byte[] data, ref int offset)
		{
			List<RequestFinalizeSteamTransaction> list = new List<RequestFinalizeSteamTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestFinalizeSteamTransaction item = ArrayManager.ReadRequestFinalizeSteamTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002480 RID: 9344 RVA: 0x000E2550 File Offset: 0x000E0750
		public static void WriteResponseFinalizeSteamTransaction(ref byte[] data, ref int offset, ResponseFinalizeSteamTransaction value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002481 RID: 9345 RVA: 0x000E256C File Offset: 0x000E076C
		public static void WriteListResponseFinalizeSteamTransaction(ref byte[] data, ref int offset, List<ResponseFinalizeSteamTransaction> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseFinalizeSteamTransaction value in values)
			{
				ArrayManager.WriteResponseFinalizeSteamTransaction(ref data, ref offset, value);
			}
		}

		// Token: 0x06002482 RID: 9346 RVA: 0x000E25E8 File Offset: 0x000E07E8
		public static ResponseFinalizeSteamTransaction ReadResponseFinalizeSteamTransaction(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseFinalizeSteamTransaction responseFinalizeSteamTransaction = new ResponseFinalizeSteamTransaction();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseFinalizeSteamTransaction.DeserializeMessage(array);
			return responseFinalizeSteamTransaction;
		}

		// Token: 0x06002483 RID: 9347 RVA: 0x000E262C File Offset: 0x000E082C
		public static List<ResponseFinalizeSteamTransaction> ReadListResponseFinalizeSteamTransaction(byte[] data, ref int offset)
		{
			List<ResponseFinalizeSteamTransaction> list = new List<ResponseFinalizeSteamTransaction>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseFinalizeSteamTransaction item = ArrayManager.ReadResponseFinalizeSteamTransaction(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002484 RID: 9348 RVA: 0x000E2670 File Offset: 0x000E0870
		public static void WriteRequestReportTutorialProgressAnalytics(ref byte[] data, ref int offset, RequestReportTutorialProgressAnalytics value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002485 RID: 9349 RVA: 0x000E268C File Offset: 0x000E088C
		public static void WriteListRequestReportTutorialProgressAnalytics(ref byte[] data, ref int offset, List<RequestReportTutorialProgressAnalytics> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestReportTutorialProgressAnalytics value in values)
			{
				ArrayManager.WriteRequestReportTutorialProgressAnalytics(ref data, ref offset, value);
			}
		}

		// Token: 0x06002486 RID: 9350 RVA: 0x000E2708 File Offset: 0x000E0908
		public static RequestReportTutorialProgressAnalytics ReadRequestReportTutorialProgressAnalytics(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestReportTutorialProgressAnalytics requestReportTutorialProgressAnalytics = new RequestReportTutorialProgressAnalytics();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestReportTutorialProgressAnalytics.DeserializeMessage(array);
			return requestReportTutorialProgressAnalytics;
		}

		// Token: 0x06002487 RID: 9351 RVA: 0x000E274C File Offset: 0x000E094C
		public static List<RequestReportTutorialProgressAnalytics> ReadListRequestReportTutorialProgressAnalytics(byte[] data, ref int offset)
		{
			List<RequestReportTutorialProgressAnalytics> list = new List<RequestReportTutorialProgressAnalytics>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestReportTutorialProgressAnalytics item = ArrayManager.ReadRequestReportTutorialProgressAnalytics(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002488 RID: 9352 RVA: 0x000E2790 File Offset: 0x000E0990
		public static void WriteRequestStarAwardsEarned(ref byte[] data, ref int offset, RequestStarAwardsEarned value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002489 RID: 9353 RVA: 0x000E27AC File Offset: 0x000E09AC
		public static void WriteListRequestStarAwardsEarned(ref byte[] data, ref int offset, List<RequestStarAwardsEarned> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestStarAwardsEarned value in values)
			{
				ArrayManager.WriteRequestStarAwardsEarned(ref data, ref offset, value);
			}
		}

		// Token: 0x0600248A RID: 9354 RVA: 0x000E2828 File Offset: 0x000E0A28
		public static RequestStarAwardsEarned ReadRequestStarAwardsEarned(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestStarAwardsEarned requestStarAwardsEarned = new RequestStarAwardsEarned();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestStarAwardsEarned.DeserializeMessage(array);
			return requestStarAwardsEarned;
		}

		// Token: 0x0600248B RID: 9355 RVA: 0x000E286C File Offset: 0x000E0A6C
		public static List<RequestStarAwardsEarned> ReadListRequestStarAwardsEarned(byte[] data, ref int offset)
		{
			List<RequestStarAwardsEarned> list = new List<RequestStarAwardsEarned>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestStarAwardsEarned item = ArrayManager.ReadRequestStarAwardsEarned(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600248C RID: 9356 RVA: 0x000E28B0 File Offset: 0x000E0AB0
		public static void WriteStarAwardEarnedEntry(ref byte[] data, ref int offset, StarAwardEarnedEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600248D RID: 9357 RVA: 0x000E28CC File Offset: 0x000E0ACC
		public static void WriteListStarAwardEarnedEntry(ref byte[] data, ref int offset, List<StarAwardEarnedEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StarAwardEarnedEntry value in values)
			{
				ArrayManager.WriteStarAwardEarnedEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600248E RID: 9358 RVA: 0x000E2948 File Offset: 0x000E0B48
		public static StarAwardEarnedEntry ReadStarAwardEarnedEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StarAwardEarnedEntry starAwardEarnedEntry = new StarAwardEarnedEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			starAwardEarnedEntry.DeserializeMessage(array);
			return starAwardEarnedEntry;
		}

		// Token: 0x0600248F RID: 9359 RVA: 0x000E298C File Offset: 0x000E0B8C
		public static List<StarAwardEarnedEntry> ReadListStarAwardEarnedEntry(byte[] data, ref int offset)
		{
			List<StarAwardEarnedEntry> list = new List<StarAwardEarnedEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StarAwardEarnedEntry item = ArrayManager.ReadStarAwardEarnedEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002490 RID: 9360 RVA: 0x000E29D0 File Offset: 0x000E0BD0
		public static void WriteResponseStarAwardsEarnedList(ref byte[] data, ref int offset, ResponseStarAwardsEarnedList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002491 RID: 9361 RVA: 0x000E29EC File Offset: 0x000E0BEC
		public static void WriteListResponseStarAwardsEarnedList(ref byte[] data, ref int offset, List<ResponseStarAwardsEarnedList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseStarAwardsEarnedList value in values)
			{
				ArrayManager.WriteResponseStarAwardsEarnedList(ref data, ref offset, value);
			}
		}

		// Token: 0x06002492 RID: 9362 RVA: 0x000E2A68 File Offset: 0x000E0C68
		public static ResponseStarAwardsEarnedList ReadResponseStarAwardsEarnedList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseStarAwardsEarnedList responseStarAwardsEarnedList = new ResponseStarAwardsEarnedList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseStarAwardsEarnedList.DeserializeMessage(array);
			return responseStarAwardsEarnedList;
		}

		// Token: 0x06002493 RID: 9363 RVA: 0x000E2AAC File Offset: 0x000E0CAC
		public static List<ResponseStarAwardsEarnedList> ReadListResponseStarAwardsEarnedList(byte[] data, ref int offset)
		{
			List<ResponseStarAwardsEarnedList> list = new List<ResponseStarAwardsEarnedList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseStarAwardsEarnedList item = ArrayManager.ReadResponseStarAwardsEarnedList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002494 RID: 9364 RVA: 0x000E2AF0 File Offset: 0x000E0CF0
		public static void WritePushStarAwardEarnedEntry(ref byte[] data, ref int offset, PushStarAwardEarnedEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002495 RID: 9365 RVA: 0x000E2B0C File Offset: 0x000E0D0C
		public static void WriteListPushStarAwardEarnedEntry(ref byte[] data, ref int offset, List<PushStarAwardEarnedEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushStarAwardEarnedEntry value in values)
			{
				ArrayManager.WritePushStarAwardEarnedEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x06002496 RID: 9366 RVA: 0x000E2B88 File Offset: 0x000E0D88
		public static PushStarAwardEarnedEntry ReadPushStarAwardEarnedEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushStarAwardEarnedEntry pushStarAwardEarnedEntry = new PushStarAwardEarnedEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushStarAwardEarnedEntry.DeserializeMessage(array);
			return pushStarAwardEarnedEntry;
		}

		// Token: 0x06002497 RID: 9367 RVA: 0x000E2BCC File Offset: 0x000E0DCC
		public static List<PushStarAwardEarnedEntry> ReadListPushStarAwardEarnedEntry(byte[] data, ref int offset)
		{
			List<PushStarAwardEarnedEntry> list = new List<PushStarAwardEarnedEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushStarAwardEarnedEntry item = ArrayManager.ReadPushStarAwardEarnedEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002498 RID: 9368 RVA: 0x000E2C10 File Offset: 0x000E0E10
		public static void WriteRequestPlayerMessages(ref byte[] data, ref int offset, RequestPlayerMessages value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002499 RID: 9369 RVA: 0x000E2C2C File Offset: 0x000E0E2C
		public static void WriteListRequestPlayerMessages(ref byte[] data, ref int offset, List<RequestPlayerMessages> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPlayerMessages value in values)
			{
				ArrayManager.WriteRequestPlayerMessages(ref data, ref offset, value);
			}
		}

		// Token: 0x0600249A RID: 9370 RVA: 0x000E2CA8 File Offset: 0x000E0EA8
		public static RequestPlayerMessages ReadRequestPlayerMessages(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPlayerMessages requestPlayerMessages = new RequestPlayerMessages();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPlayerMessages.DeserializeMessage(array);
			return requestPlayerMessages;
		}

		// Token: 0x0600249B RID: 9371 RVA: 0x000E2CEC File Offset: 0x000E0EEC
		public static List<RequestPlayerMessages> ReadListRequestPlayerMessages(byte[] data, ref int offset)
		{
			List<RequestPlayerMessages> list = new List<RequestPlayerMessages>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPlayerMessages item = ArrayManager.ReadRequestPlayerMessages(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600249C RID: 9372 RVA: 0x000E2D30 File Offset: 0x000E0F30
		public static void WriteRequestClaimMessageItems(ref byte[] data, ref int offset, RequestClaimMessageItems value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600249D RID: 9373 RVA: 0x000E2D4C File Offset: 0x000E0F4C
		public static void WriteListRequestClaimMessageItems(ref byte[] data, ref int offset, List<RequestClaimMessageItems> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestClaimMessageItems value in values)
			{
				ArrayManager.WriteRequestClaimMessageItems(ref data, ref offset, value);
			}
		}

		// Token: 0x0600249E RID: 9374 RVA: 0x000E2DC8 File Offset: 0x000E0FC8
		public static RequestClaimMessageItems ReadRequestClaimMessageItems(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestClaimMessageItems requestClaimMessageItems = new RequestClaimMessageItems();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestClaimMessageItems.DeserializeMessage(array);
			return requestClaimMessageItems;
		}

		// Token: 0x0600249F RID: 9375 RVA: 0x000E2E0C File Offset: 0x000E100C
		public static List<RequestClaimMessageItems> ReadListRequestClaimMessageItems(byte[] data, ref int offset)
		{
			List<RequestClaimMessageItems> list = new List<RequestClaimMessageItems>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestClaimMessageItems item = ArrayManager.ReadRequestClaimMessageItems(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024A0 RID: 9376 RVA: 0x000E2E50 File Offset: 0x000E1050
		public static void WriteResponseClaimMessageItems(ref byte[] data, ref int offset, ResponseClaimMessageItems value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024A1 RID: 9377 RVA: 0x000E2E6C File Offset: 0x000E106C
		public static void WriteListResponseClaimMessageItems(ref byte[] data, ref int offset, List<ResponseClaimMessageItems> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseClaimMessageItems value in values)
			{
				ArrayManager.WriteResponseClaimMessageItems(ref data, ref offset, value);
			}
		}

		// Token: 0x060024A2 RID: 9378 RVA: 0x000E2EE8 File Offset: 0x000E10E8
		public static ResponseClaimMessageItems ReadResponseClaimMessageItems(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseClaimMessageItems responseClaimMessageItems = new ResponseClaimMessageItems();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseClaimMessageItems.DeserializeMessage(array);
			return responseClaimMessageItems;
		}

		// Token: 0x060024A3 RID: 9379 RVA: 0x000E2F2C File Offset: 0x000E112C
		public static List<ResponseClaimMessageItems> ReadListResponseClaimMessageItems(byte[] data, ref int offset)
		{
			List<ResponseClaimMessageItems> list = new List<ResponseClaimMessageItems>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseClaimMessageItems item = ArrayManager.ReadResponseClaimMessageItems(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024A4 RID: 9380 RVA: 0x000E2F70 File Offset: 0x000E1170
		public static void WritePushMessageDeleted(ref byte[] data, ref int offset, PushMessageDeleted value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024A5 RID: 9381 RVA: 0x000E2F8C File Offset: 0x000E118C
		public static void WriteListPushMessageDeleted(ref byte[] data, ref int offset, List<PushMessageDeleted> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushMessageDeleted value in values)
			{
				ArrayManager.WritePushMessageDeleted(ref data, ref offset, value);
			}
		}

		// Token: 0x060024A6 RID: 9382 RVA: 0x000E3008 File Offset: 0x000E1208
		public static PushMessageDeleted ReadPushMessageDeleted(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushMessageDeleted pushMessageDeleted = new PushMessageDeleted();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushMessageDeleted.DeserializeMessage(array);
			return pushMessageDeleted;
		}

		// Token: 0x060024A7 RID: 9383 RVA: 0x000E304C File Offset: 0x000E124C
		public static List<PushMessageDeleted> ReadListPushMessageDeleted(byte[] data, ref int offset)
		{
			List<PushMessageDeleted> list = new List<PushMessageDeleted>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushMessageDeleted item = ArrayManager.ReadPushMessageDeleted(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024A8 RID: 9384 RVA: 0x000E3090 File Offset: 0x000E1290
		public static void WriteNetworkPlayerMessage(ref byte[] data, ref int offset, NetworkPlayerMessage value)
		{
			uint value2 = 0u;
			if (value == null)
			{
				value2 = 0u;
			}
			else if (value.GetType() == typeof(NetworkReferralAwardMessage))
			{
				value2 = 2351393697u;
			}
			else if (value.GetType() == typeof(NetworkHeroWinAwardMessage))
			{
				value2 = 178032672u;
			}
			else if (value.GetType() == typeof(NetworkDailyLoginAwardMessage))
			{
				value2 = 3151405179u;
			}
			else if (value.GetType() == typeof(NetworkStarAwardMessage))
			{
				value2 = 798645747u;
			}
			else if (value.GetType() == typeof(NetworkQuestAwardMessage))
			{
				value2 = 292252294u;
			}
			else if (value.GetType() == typeof(NetworkAchievementAwardMessage))
			{
				value2 = 2400567095u;
			}
			else if (value.GetType() == typeof(NetworkStoreAwardMessage))
			{
				value2 = 4172187887u;
			}
			else if (value.GetType() == typeof(NetworkKeystoneWinAwardMessage))
			{
				value2 = 671867295u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventIndividualContributionAwardMessage))
			{
				value2 = 4161863552u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventIndividualContributionAwardChestMessage))
			{
				value2 = 2810766173u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventGoalAwardMessage))
			{
				value2 = 402948204u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventGoalAwardChestMessage))
			{
				value2 = 1017217289u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventPartialAwardMessage))
			{
				value2 = 4017048851u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventPartialAwardChestMessage))
			{
				value2 = 3699086199u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventFullAwardMessage))
			{
				value2 = 586908671u;
			}
			else if (value.GetType() == typeof(NetworkCommunityEventFullAwardChestMessage))
			{
				value2 = 595827123u;
			}
			byte[] array = value.SerializeMessage();
			byte[] array2 = new byte[array.Length + 4];
			Array.Copy(BitConverter.GetBytes(value2), 0, array2, 0, 4);
			Array.Copy(array, 0, array2, 4, array.Length);
			ArrayManager.WriteByteArray(ref data, ref offset, array2);
		}

		// Token: 0x060024A9 RID: 9385 RVA: 0x000E32DC File Offset: 0x000E14DC
		public static void WriteListNetworkPlayerMessage(ref byte[] data, ref int offset, List<NetworkPlayerMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkPlayerMessage value in values)
			{
				ArrayManager.WriteNetworkPlayerMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024AA RID: 9386 RVA: 0x000E3358 File Offset: 0x000E1558
		public static NetworkPlayerMessage ReadNetworkPlayerMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			uint num2 = BitConverter.ToUInt32(data, offset);
			offset += 4;
			NetworkPlayerMessage networkPlayerMessage = null;
			if (num2 == 0u)
			{
				return networkPlayerMessage;
			}
			if (num2 == 2351393697u)
			{
				networkPlayerMessage = new NetworkReferralAwardMessage();
			}
			else if (num2 == 178032672u)
			{
				networkPlayerMessage = new NetworkHeroWinAwardMessage();
			}
			else if (num2 == 3151405179u)
			{
				networkPlayerMessage = new NetworkDailyLoginAwardMessage();
			}
			else if (num2 == 798645747u)
			{
				networkPlayerMessage = new NetworkStarAwardMessage();
			}
			else if (num2 == 292252294u)
			{
				networkPlayerMessage = new NetworkQuestAwardMessage();
			}
			else if (num2 == 2400567095u)
			{
				networkPlayerMessage = new NetworkAchievementAwardMessage();
			}
			else if (num2 == 4172187887u)
			{
				networkPlayerMessage = new NetworkStoreAwardMessage();
			}
			else if (num2 == 671867295u)
			{
				networkPlayerMessage = new NetworkKeystoneWinAwardMessage();
			}
			else if (num2 == 4161863552u)
			{
				networkPlayerMessage = new NetworkCommunityEventIndividualContributionAwardMessage();
			}
			else if (num2 == 2810766173u)
			{
				networkPlayerMessage = new NetworkCommunityEventIndividualContributionAwardChestMessage();
			}
			else if (num2 == 402948204u)
			{
				networkPlayerMessage = new NetworkCommunityEventGoalAwardMessage();
			}
			else if (num2 == 1017217289u)
			{
				networkPlayerMessage = new NetworkCommunityEventGoalAwardChestMessage();
			}
			else if (num2 == 4017048851u)
			{
				networkPlayerMessage = new NetworkCommunityEventPartialAwardMessage();
			}
			else if (num2 == 3699086199u)
			{
				networkPlayerMessage = new NetworkCommunityEventPartialAwardChestMessage();
			}
			else if (num2 == 586908671u)
			{
				networkPlayerMessage = new NetworkCommunityEventFullAwardMessage();
			}
			else if (num2 == 595827123u)
			{
				networkPlayerMessage = new NetworkCommunityEventFullAwardChestMessage();
			}
			num -= 4;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkPlayerMessage.DeserializeMessage(array);
			return networkPlayerMessage;
		}

		// Token: 0x060024AB RID: 9387 RVA: 0x000E350C File Offset: 0x000E170C
		public static List<NetworkPlayerMessage> ReadListNetworkPlayerMessage(byte[] data, ref int offset)
		{
			List<NetworkPlayerMessage> list = new List<NetworkPlayerMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkPlayerMessage item = ArrayManager.ReadNetworkPlayerMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024AC RID: 9388 RVA: 0x000E3550 File Offset: 0x000E1750
		public static void WritePushPlayerMessages(ref byte[] data, ref int offset, PushPlayerMessages value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024AD RID: 9389 RVA: 0x000E356C File Offset: 0x000E176C
		public static void WriteListPushPlayerMessages(ref byte[] data, ref int offset, List<PushPlayerMessages> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerMessages value in values)
			{
				ArrayManager.WritePushPlayerMessages(ref data, ref offset, value);
			}
		}

		// Token: 0x060024AE RID: 9390 RVA: 0x000E35E8 File Offset: 0x000E17E8
		public static PushPlayerMessages ReadPushPlayerMessages(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerMessages pushPlayerMessages = new PushPlayerMessages();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerMessages.DeserializeMessage(array);
			return pushPlayerMessages;
		}

		// Token: 0x060024AF RID: 9391 RVA: 0x000E362C File Offset: 0x000E182C
		public static List<PushPlayerMessages> ReadListPushPlayerMessages(byte[] data, ref int offset)
		{
			List<PushPlayerMessages> list = new List<PushPlayerMessages>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerMessages item = ArrayManager.ReadPushPlayerMessages(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024B0 RID: 9392 RVA: 0x000E3670 File Offset: 0x000E1870
		public static void WriteNetworkMessageItemBase(ref byte[] data, ref int offset, NetworkMessageItemBase value)
		{
			uint value2 = 0u;
			if (value == null)
			{
				value2 = 0u;
			}
			else if (value.GetType() == typeof(NetworkChestMessageItem))
			{
				value2 = 827514608u;
			}
			else if (value.GetType() == typeof(NetworkSkullsMessageItem))
			{
				value2 = 3496502321u;
			}
			else if (value.GetType() == typeof(NetworkInventoryMessageItem))
			{
				value2 = 2679080640u;
			}
			byte[] array = value.SerializeMessage();
			byte[] array2 = new byte[array.Length + 4];
			Array.Copy(BitConverter.GetBytes(value2), 0, array2, 0, 4);
			Array.Copy(array, 0, array2, 4, array.Length);
			ArrayManager.WriteByteArray(ref data, ref offset, array2);
		}

		// Token: 0x060024B1 RID: 9393 RVA: 0x000E371C File Offset: 0x000E191C
		public static void WriteListNetworkMessageItemBase(ref byte[] data, ref int offset, List<NetworkMessageItemBase> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkMessageItemBase value in values)
			{
				ArrayManager.WriteNetworkMessageItemBase(ref data, ref offset, value);
			}
		}

		// Token: 0x060024B2 RID: 9394 RVA: 0x000E3798 File Offset: 0x000E1998
		public static NetworkMessageItemBase ReadNetworkMessageItemBase(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			uint num2 = BitConverter.ToUInt32(data, offset);
			offset += 4;
			NetworkMessageItemBase networkMessageItemBase = null;
			if (num2 == 0u)
			{
				return networkMessageItemBase;
			}
			if (num2 == 827514608u)
			{
				networkMessageItemBase = new NetworkChestMessageItem();
			}
			else if (num2 == 3496502321u)
			{
				networkMessageItemBase = new NetworkSkullsMessageItem();
			}
			else if (num2 == 2679080640u)
			{
				networkMessageItemBase = new NetworkInventoryMessageItem();
			}
			num -= 4;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkMessageItemBase.DeserializeMessage(array);
			return networkMessageItemBase;
		}

		// Token: 0x060024B3 RID: 9395 RVA: 0x000E3830 File Offset: 0x000E1A30
		public static List<NetworkMessageItemBase> ReadListNetworkMessageItemBase(byte[] data, ref int offset)
		{
			List<NetworkMessageItemBase> list = new List<NetworkMessageItemBase>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkMessageItemBase item = ArrayManager.ReadNetworkMessageItemBase(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024B4 RID: 9396 RVA: 0x000E3874 File Offset: 0x000E1A74
		public static void WriteNetworkChestMessageItem(ref byte[] data, ref int offset, NetworkChestMessageItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024B5 RID: 9397 RVA: 0x000E3890 File Offset: 0x000E1A90
		public static void WriteListNetworkChestMessageItem(ref byte[] data, ref int offset, List<NetworkChestMessageItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkChestMessageItem value in values)
			{
				ArrayManager.WriteNetworkChestMessageItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060024B6 RID: 9398 RVA: 0x000E390C File Offset: 0x000E1B0C
		public static NetworkChestMessageItem ReadNetworkChestMessageItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkChestMessageItem networkChestMessageItem = new NetworkChestMessageItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkChestMessageItem.DeserializeMessage(array);
			return networkChestMessageItem;
		}

		// Token: 0x060024B7 RID: 9399 RVA: 0x000E3950 File Offset: 0x000E1B50
		public static List<NetworkChestMessageItem> ReadListNetworkChestMessageItem(byte[] data, ref int offset)
		{
			List<NetworkChestMessageItem> list = new List<NetworkChestMessageItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkChestMessageItem item = ArrayManager.ReadNetworkChestMessageItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024B8 RID: 9400 RVA: 0x000E3994 File Offset: 0x000E1B94
		public static void WriteNetworkSkullsMessageItem(ref byte[] data, ref int offset, NetworkSkullsMessageItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024B9 RID: 9401 RVA: 0x000E39B0 File Offset: 0x000E1BB0
		public static void WriteListNetworkSkullsMessageItem(ref byte[] data, ref int offset, List<NetworkSkullsMessageItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkSkullsMessageItem value in values)
			{
				ArrayManager.WriteNetworkSkullsMessageItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060024BA RID: 9402 RVA: 0x000E3A2C File Offset: 0x000E1C2C
		public static NetworkSkullsMessageItem ReadNetworkSkullsMessageItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkSkullsMessageItem networkSkullsMessageItem = new NetworkSkullsMessageItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkSkullsMessageItem.DeserializeMessage(array);
			return networkSkullsMessageItem;
		}

		// Token: 0x060024BB RID: 9403 RVA: 0x000E3A70 File Offset: 0x000E1C70
		public static List<NetworkSkullsMessageItem> ReadListNetworkSkullsMessageItem(byte[] data, ref int offset)
		{
			List<NetworkSkullsMessageItem> list = new List<NetworkSkullsMessageItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkSkullsMessageItem item = ArrayManager.ReadNetworkSkullsMessageItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024BC RID: 9404 RVA: 0x000E3AB4 File Offset: 0x000E1CB4
		public static void WriteNetworkInventoryMessageItem(ref byte[] data, ref int offset, NetworkInventoryMessageItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024BD RID: 9405 RVA: 0x000E3AD0 File Offset: 0x000E1CD0
		public static void WriteListNetworkInventoryMessageItem(ref byte[] data, ref int offset, List<NetworkInventoryMessageItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkInventoryMessageItem value in values)
			{
				ArrayManager.WriteNetworkInventoryMessageItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060024BE RID: 9406 RVA: 0x000E3B4C File Offset: 0x000E1D4C
		public static NetworkInventoryMessageItem ReadNetworkInventoryMessageItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkInventoryMessageItem networkInventoryMessageItem = new NetworkInventoryMessageItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkInventoryMessageItem.DeserializeMessage(array);
			return networkInventoryMessageItem;
		}

		// Token: 0x060024BF RID: 9407 RVA: 0x000E3B90 File Offset: 0x000E1D90
		public static List<NetworkInventoryMessageItem> ReadListNetworkInventoryMessageItem(byte[] data, ref int offset)
		{
			List<NetworkInventoryMessageItem> list = new List<NetworkInventoryMessageItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkInventoryMessageItem item = ArrayManager.ReadNetworkInventoryMessageItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024C0 RID: 9408 RVA: 0x000E3BD4 File Offset: 0x000E1DD4
		public static void WriteNetworkReferralAwardMessage(ref byte[] data, ref int offset, NetworkReferralAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024C1 RID: 9409 RVA: 0x000E3BF0 File Offset: 0x000E1DF0
		public static void WriteListNetworkReferralAwardMessage(ref byte[] data, ref int offset, List<NetworkReferralAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkReferralAwardMessage value in values)
			{
				ArrayManager.WriteNetworkReferralAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024C2 RID: 9410 RVA: 0x000E3C6C File Offset: 0x000E1E6C
		public static NetworkReferralAwardMessage ReadNetworkReferralAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkReferralAwardMessage networkReferralAwardMessage = new NetworkReferralAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkReferralAwardMessage.DeserializeMessage(array);
			return networkReferralAwardMessage;
		}

		// Token: 0x060024C3 RID: 9411 RVA: 0x000E3CB0 File Offset: 0x000E1EB0
		public static List<NetworkReferralAwardMessage> ReadListNetworkReferralAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkReferralAwardMessage> list = new List<NetworkReferralAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkReferralAwardMessage item = ArrayManager.ReadNetworkReferralAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024C4 RID: 9412 RVA: 0x000E3CF4 File Offset: 0x000E1EF4
		public static void WriteNetworkHeroWinAwardMessage(ref byte[] data, ref int offset, NetworkHeroWinAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024C5 RID: 9413 RVA: 0x000E3D10 File Offset: 0x000E1F10
		public static void WriteListNetworkHeroWinAwardMessage(ref byte[] data, ref int offset, List<NetworkHeroWinAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkHeroWinAwardMessage value in values)
			{
				ArrayManager.WriteNetworkHeroWinAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024C6 RID: 9414 RVA: 0x000E3D8C File Offset: 0x000E1F8C
		public static NetworkHeroWinAwardMessage ReadNetworkHeroWinAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkHeroWinAwardMessage networkHeroWinAwardMessage = new NetworkHeroWinAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkHeroWinAwardMessage.DeserializeMessage(array);
			return networkHeroWinAwardMessage;
		}

		// Token: 0x060024C7 RID: 9415 RVA: 0x000E3DD0 File Offset: 0x000E1FD0
		public static List<NetworkHeroWinAwardMessage> ReadListNetworkHeroWinAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkHeroWinAwardMessage> list = new List<NetworkHeroWinAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkHeroWinAwardMessage item = ArrayManager.ReadNetworkHeroWinAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024C8 RID: 9416 RVA: 0x000E3E14 File Offset: 0x000E2014
		public static void WriteNetworkDailyLoginAwardMessage(ref byte[] data, ref int offset, NetworkDailyLoginAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024C9 RID: 9417 RVA: 0x000E3E30 File Offset: 0x000E2030
		public static void WriteListNetworkDailyLoginAwardMessage(ref byte[] data, ref int offset, List<NetworkDailyLoginAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkDailyLoginAwardMessage value in values)
			{
				ArrayManager.WriteNetworkDailyLoginAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024CA RID: 9418 RVA: 0x000E3EAC File Offset: 0x000E20AC
		public static NetworkDailyLoginAwardMessage ReadNetworkDailyLoginAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkDailyLoginAwardMessage networkDailyLoginAwardMessage = new NetworkDailyLoginAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkDailyLoginAwardMessage.DeserializeMessage(array);
			return networkDailyLoginAwardMessage;
		}

		// Token: 0x060024CB RID: 9419 RVA: 0x000E3EF0 File Offset: 0x000E20F0
		public static List<NetworkDailyLoginAwardMessage> ReadListNetworkDailyLoginAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkDailyLoginAwardMessage> list = new List<NetworkDailyLoginAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkDailyLoginAwardMessage item = ArrayManager.ReadNetworkDailyLoginAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024CC RID: 9420 RVA: 0x000E3F34 File Offset: 0x000E2134
		public static void WriteNetworkStarAwardMessage(ref byte[] data, ref int offset, NetworkStarAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024CD RID: 9421 RVA: 0x000E3F50 File Offset: 0x000E2150
		public static void WriteListNetworkStarAwardMessage(ref byte[] data, ref int offset, List<NetworkStarAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkStarAwardMessage value in values)
			{
				ArrayManager.WriteNetworkStarAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024CE RID: 9422 RVA: 0x000E3FCC File Offset: 0x000E21CC
		public static NetworkStarAwardMessage ReadNetworkStarAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkStarAwardMessage networkStarAwardMessage = new NetworkStarAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkStarAwardMessage.DeserializeMessage(array);
			return networkStarAwardMessage;
		}

		// Token: 0x060024CF RID: 9423 RVA: 0x000E4010 File Offset: 0x000E2210
		public static List<NetworkStarAwardMessage> ReadListNetworkStarAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkStarAwardMessage> list = new List<NetworkStarAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkStarAwardMessage item = ArrayManager.ReadNetworkStarAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024D0 RID: 9424 RVA: 0x000E4054 File Offset: 0x000E2254
		public static void WriteNetworkQuestAwardMessage(ref byte[] data, ref int offset, NetworkQuestAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024D1 RID: 9425 RVA: 0x000E4070 File Offset: 0x000E2270
		public static void WriteListNetworkQuestAwardMessage(ref byte[] data, ref int offset, List<NetworkQuestAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkQuestAwardMessage value in values)
			{
				ArrayManager.WriteNetworkQuestAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024D2 RID: 9426 RVA: 0x000E40EC File Offset: 0x000E22EC
		public static NetworkQuestAwardMessage ReadNetworkQuestAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkQuestAwardMessage networkQuestAwardMessage = new NetworkQuestAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkQuestAwardMessage.DeserializeMessage(array);
			return networkQuestAwardMessage;
		}

		// Token: 0x060024D3 RID: 9427 RVA: 0x000E4130 File Offset: 0x000E2330
		public static List<NetworkQuestAwardMessage> ReadListNetworkQuestAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkQuestAwardMessage> list = new List<NetworkQuestAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkQuestAwardMessage item = ArrayManager.ReadNetworkQuestAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024D4 RID: 9428 RVA: 0x000E4174 File Offset: 0x000E2374
		public static void WriteNetworkAchievementAwardMessage(ref byte[] data, ref int offset, NetworkAchievementAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024D5 RID: 9429 RVA: 0x000E4190 File Offset: 0x000E2390
		public static void WriteListNetworkAchievementAwardMessage(ref byte[] data, ref int offset, List<NetworkAchievementAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkAchievementAwardMessage value in values)
			{
				ArrayManager.WriteNetworkAchievementAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024D6 RID: 9430 RVA: 0x000E420C File Offset: 0x000E240C
		public static NetworkAchievementAwardMessage ReadNetworkAchievementAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkAchievementAwardMessage networkAchievementAwardMessage = new NetworkAchievementAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkAchievementAwardMessage.DeserializeMessage(array);
			return networkAchievementAwardMessage;
		}

		// Token: 0x060024D7 RID: 9431 RVA: 0x000E4250 File Offset: 0x000E2450
		public static List<NetworkAchievementAwardMessage> ReadListNetworkAchievementAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkAchievementAwardMessage> list = new List<NetworkAchievementAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkAchievementAwardMessage item = ArrayManager.ReadNetworkAchievementAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024D8 RID: 9432 RVA: 0x000E4294 File Offset: 0x000E2494
		public static void WriteNetworkStoreAwardMessage(ref byte[] data, ref int offset, NetworkStoreAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024D9 RID: 9433 RVA: 0x000E42B0 File Offset: 0x000E24B0
		public static void WriteListNetworkStoreAwardMessage(ref byte[] data, ref int offset, List<NetworkStoreAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkStoreAwardMessage value in values)
			{
				ArrayManager.WriteNetworkStoreAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024DA RID: 9434 RVA: 0x000E432C File Offset: 0x000E252C
		public static NetworkStoreAwardMessage ReadNetworkStoreAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkStoreAwardMessage networkStoreAwardMessage = new NetworkStoreAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkStoreAwardMessage.DeserializeMessage(array);
			return networkStoreAwardMessage;
		}

		// Token: 0x060024DB RID: 9435 RVA: 0x000E4370 File Offset: 0x000E2570
		public static List<NetworkStoreAwardMessage> ReadListNetworkStoreAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkStoreAwardMessage> list = new List<NetworkStoreAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkStoreAwardMessage item = ArrayManager.ReadNetworkStoreAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024DC RID: 9436 RVA: 0x000E43B4 File Offset: 0x000E25B4
		public static void WriteNetworkKeystoneWinAwardMessage(ref byte[] data, ref int offset, NetworkKeystoneWinAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024DD RID: 9437 RVA: 0x000E43D0 File Offset: 0x000E25D0
		public static void WriteListNetworkKeystoneWinAwardMessage(ref byte[] data, ref int offset, List<NetworkKeystoneWinAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkKeystoneWinAwardMessage value in values)
			{
				ArrayManager.WriteNetworkKeystoneWinAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024DE RID: 9438 RVA: 0x000E444C File Offset: 0x000E264C
		public static NetworkKeystoneWinAwardMessage ReadNetworkKeystoneWinAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkKeystoneWinAwardMessage networkKeystoneWinAwardMessage = new NetworkKeystoneWinAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkKeystoneWinAwardMessage.DeserializeMessage(array);
			return networkKeystoneWinAwardMessage;
		}

		// Token: 0x060024DF RID: 9439 RVA: 0x000E4490 File Offset: 0x000E2690
		public static List<NetworkKeystoneWinAwardMessage> ReadListNetworkKeystoneWinAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkKeystoneWinAwardMessage> list = new List<NetworkKeystoneWinAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkKeystoneWinAwardMessage item = ArrayManager.ReadNetworkKeystoneWinAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024E0 RID: 9440 RVA: 0x000E44D4 File Offset: 0x000E26D4
		public static void WriteNetworkCommunityEventIndividualContributionAwardMessage(ref byte[] data, ref int offset, NetworkCommunityEventIndividualContributionAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024E1 RID: 9441 RVA: 0x000E44F0 File Offset: 0x000E26F0
		public static void WriteListNetworkCommunityEventIndividualContributionAwardMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventIndividualContributionAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventIndividualContributionAwardMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventIndividualContributionAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024E2 RID: 9442 RVA: 0x000E456C File Offset: 0x000E276C
		public static NetworkCommunityEventIndividualContributionAwardMessage ReadNetworkCommunityEventIndividualContributionAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventIndividualContributionAwardMessage networkCommunityEventIndividualContributionAwardMessage = new NetworkCommunityEventIndividualContributionAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventIndividualContributionAwardMessage.DeserializeMessage(array);
			return networkCommunityEventIndividualContributionAwardMessage;
		}

		// Token: 0x060024E3 RID: 9443 RVA: 0x000E45B0 File Offset: 0x000E27B0
		public static List<NetworkCommunityEventIndividualContributionAwardMessage> ReadListNetworkCommunityEventIndividualContributionAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventIndividualContributionAwardMessage> list = new List<NetworkCommunityEventIndividualContributionAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventIndividualContributionAwardMessage item = ArrayManager.ReadNetworkCommunityEventIndividualContributionAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024E4 RID: 9444 RVA: 0x000E45F4 File Offset: 0x000E27F4
		public static void WriteNetworkCommunityEventIndividualContributionAwardChestMessage(ref byte[] data, ref int offset, NetworkCommunityEventIndividualContributionAwardChestMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024E5 RID: 9445 RVA: 0x000E4610 File Offset: 0x000E2810
		public static void WriteListNetworkCommunityEventIndividualContributionAwardChestMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventIndividualContributionAwardChestMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventIndividualContributionAwardChestMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventIndividualContributionAwardChestMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024E6 RID: 9446 RVA: 0x000E468C File Offset: 0x000E288C
		public static NetworkCommunityEventIndividualContributionAwardChestMessage ReadNetworkCommunityEventIndividualContributionAwardChestMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventIndividualContributionAwardChestMessage networkCommunityEventIndividualContributionAwardChestMessage = new NetworkCommunityEventIndividualContributionAwardChestMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventIndividualContributionAwardChestMessage.DeserializeMessage(array);
			return networkCommunityEventIndividualContributionAwardChestMessage;
		}

		// Token: 0x060024E7 RID: 9447 RVA: 0x000E46D0 File Offset: 0x000E28D0
		public static List<NetworkCommunityEventIndividualContributionAwardChestMessage> ReadListNetworkCommunityEventIndividualContributionAwardChestMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventIndividualContributionAwardChestMessage> list = new List<NetworkCommunityEventIndividualContributionAwardChestMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventIndividualContributionAwardChestMessage item = ArrayManager.ReadNetworkCommunityEventIndividualContributionAwardChestMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024E8 RID: 9448 RVA: 0x000E4714 File Offset: 0x000E2914
		public static void WriteNetworkCommunityEventGoalAwardMessage(ref byte[] data, ref int offset, NetworkCommunityEventGoalAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024E9 RID: 9449 RVA: 0x000E4730 File Offset: 0x000E2930
		public static void WriteListNetworkCommunityEventGoalAwardMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventGoalAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventGoalAwardMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventGoalAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024EA RID: 9450 RVA: 0x000E47AC File Offset: 0x000E29AC
		public static NetworkCommunityEventGoalAwardMessage ReadNetworkCommunityEventGoalAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventGoalAwardMessage networkCommunityEventGoalAwardMessage = new NetworkCommunityEventGoalAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventGoalAwardMessage.DeserializeMessage(array);
			return networkCommunityEventGoalAwardMessage;
		}

		// Token: 0x060024EB RID: 9451 RVA: 0x000E47F0 File Offset: 0x000E29F0
		public static List<NetworkCommunityEventGoalAwardMessage> ReadListNetworkCommunityEventGoalAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventGoalAwardMessage> list = new List<NetworkCommunityEventGoalAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventGoalAwardMessage item = ArrayManager.ReadNetworkCommunityEventGoalAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024EC RID: 9452 RVA: 0x000E4834 File Offset: 0x000E2A34
		public static void WriteNetworkCommunityEventGoalAwardChestMessage(ref byte[] data, ref int offset, NetworkCommunityEventGoalAwardChestMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024ED RID: 9453 RVA: 0x000E4850 File Offset: 0x000E2A50
		public static void WriteListNetworkCommunityEventGoalAwardChestMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventGoalAwardChestMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventGoalAwardChestMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventGoalAwardChestMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024EE RID: 9454 RVA: 0x000E48CC File Offset: 0x000E2ACC
		public static NetworkCommunityEventGoalAwardChestMessage ReadNetworkCommunityEventGoalAwardChestMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventGoalAwardChestMessage networkCommunityEventGoalAwardChestMessage = new NetworkCommunityEventGoalAwardChestMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventGoalAwardChestMessage.DeserializeMessage(array);
			return networkCommunityEventGoalAwardChestMessage;
		}

		// Token: 0x060024EF RID: 9455 RVA: 0x000E4910 File Offset: 0x000E2B10
		public static List<NetworkCommunityEventGoalAwardChestMessage> ReadListNetworkCommunityEventGoalAwardChestMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventGoalAwardChestMessage> list = new List<NetworkCommunityEventGoalAwardChestMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventGoalAwardChestMessage item = ArrayManager.ReadNetworkCommunityEventGoalAwardChestMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024F0 RID: 9456 RVA: 0x000E4954 File Offset: 0x000E2B54
		public static void WriteNetworkCommunityEventPartialAwardMessage(ref byte[] data, ref int offset, NetworkCommunityEventPartialAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024F1 RID: 9457 RVA: 0x000E4970 File Offset: 0x000E2B70
		public static void WriteListNetworkCommunityEventPartialAwardMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventPartialAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventPartialAwardMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventPartialAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024F2 RID: 9458 RVA: 0x000E49EC File Offset: 0x000E2BEC
		public static NetworkCommunityEventPartialAwardMessage ReadNetworkCommunityEventPartialAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventPartialAwardMessage networkCommunityEventPartialAwardMessage = new NetworkCommunityEventPartialAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventPartialAwardMessage.DeserializeMessage(array);
			return networkCommunityEventPartialAwardMessage;
		}

		// Token: 0x060024F3 RID: 9459 RVA: 0x000E4A30 File Offset: 0x000E2C30
		public static List<NetworkCommunityEventPartialAwardMessage> ReadListNetworkCommunityEventPartialAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventPartialAwardMessage> list = new List<NetworkCommunityEventPartialAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventPartialAwardMessage item = ArrayManager.ReadNetworkCommunityEventPartialAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024F4 RID: 9460 RVA: 0x000E4A74 File Offset: 0x000E2C74
		public static void WriteNetworkCommunityEventPartialAwardChestMessage(ref byte[] data, ref int offset, NetworkCommunityEventPartialAwardChestMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024F5 RID: 9461 RVA: 0x000E4A90 File Offset: 0x000E2C90
		public static void WriteListNetworkCommunityEventPartialAwardChestMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventPartialAwardChestMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventPartialAwardChestMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventPartialAwardChestMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024F6 RID: 9462 RVA: 0x000E4B0C File Offset: 0x000E2D0C
		public static NetworkCommunityEventPartialAwardChestMessage ReadNetworkCommunityEventPartialAwardChestMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventPartialAwardChestMessage networkCommunityEventPartialAwardChestMessage = new NetworkCommunityEventPartialAwardChestMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventPartialAwardChestMessage.DeserializeMessage(array);
			return networkCommunityEventPartialAwardChestMessage;
		}

		// Token: 0x060024F7 RID: 9463 RVA: 0x000E4B50 File Offset: 0x000E2D50
		public static List<NetworkCommunityEventPartialAwardChestMessage> ReadListNetworkCommunityEventPartialAwardChestMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventPartialAwardChestMessage> list = new List<NetworkCommunityEventPartialAwardChestMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventPartialAwardChestMessage item = ArrayManager.ReadNetworkCommunityEventPartialAwardChestMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024F8 RID: 9464 RVA: 0x000E4B94 File Offset: 0x000E2D94
		public static void WriteNetworkCommunityEventFullAwardMessage(ref byte[] data, ref int offset, NetworkCommunityEventFullAwardMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024F9 RID: 9465 RVA: 0x000E4BB0 File Offset: 0x000E2DB0
		public static void WriteListNetworkCommunityEventFullAwardMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventFullAwardMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventFullAwardMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventFullAwardMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024FA RID: 9466 RVA: 0x000E4C2C File Offset: 0x000E2E2C
		public static NetworkCommunityEventFullAwardMessage ReadNetworkCommunityEventFullAwardMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventFullAwardMessage networkCommunityEventFullAwardMessage = new NetworkCommunityEventFullAwardMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventFullAwardMessage.DeserializeMessage(array);
			return networkCommunityEventFullAwardMessage;
		}

		// Token: 0x060024FB RID: 9467 RVA: 0x000E4C70 File Offset: 0x000E2E70
		public static List<NetworkCommunityEventFullAwardMessage> ReadListNetworkCommunityEventFullAwardMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventFullAwardMessage> list = new List<NetworkCommunityEventFullAwardMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventFullAwardMessage item = ArrayManager.ReadNetworkCommunityEventFullAwardMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060024FC RID: 9468 RVA: 0x000E4CB4 File Offset: 0x000E2EB4
		public static void WriteNetworkCommunityEventFullAwardChestMessage(ref byte[] data, ref int offset, NetworkCommunityEventFullAwardChestMessage value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060024FD RID: 9469 RVA: 0x000E4CD0 File Offset: 0x000E2ED0
		public static void WriteListNetworkCommunityEventFullAwardChestMessage(ref byte[] data, ref int offset, List<NetworkCommunityEventFullAwardChestMessage> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkCommunityEventFullAwardChestMessage value in values)
			{
				ArrayManager.WriteNetworkCommunityEventFullAwardChestMessage(ref data, ref offset, value);
			}
		}

		// Token: 0x060024FE RID: 9470 RVA: 0x000E4D4C File Offset: 0x000E2F4C
		public static NetworkCommunityEventFullAwardChestMessage ReadNetworkCommunityEventFullAwardChestMessage(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkCommunityEventFullAwardChestMessage networkCommunityEventFullAwardChestMessage = new NetworkCommunityEventFullAwardChestMessage();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkCommunityEventFullAwardChestMessage.DeserializeMessage(array);
			return networkCommunityEventFullAwardChestMessage;
		}

		// Token: 0x060024FF RID: 9471 RVA: 0x000E4D90 File Offset: 0x000E2F90
		public static List<NetworkCommunityEventFullAwardChestMessage> ReadListNetworkCommunityEventFullAwardChestMessage(byte[] data, ref int offset)
		{
			List<NetworkCommunityEventFullAwardChestMessage> list = new List<NetworkCommunityEventFullAwardChestMessage>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkCommunityEventFullAwardChestMessage item = ArrayManager.ReadNetworkCommunityEventFullAwardChestMessage(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002500 RID: 9472 RVA: 0x000E4DD4 File Offset: 0x000E2FD4
		public static void WriteResponsePlayerMessages(ref byte[] data, ref int offset, ResponsePlayerMessages value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002501 RID: 9473 RVA: 0x000E4DF0 File Offset: 0x000E2FF0
		public static void WriteListResponsePlayerMessages(ref byte[] data, ref int offset, List<ResponsePlayerMessages> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePlayerMessages value in values)
			{
				ArrayManager.WriteResponsePlayerMessages(ref data, ref offset, value);
			}
		}

		// Token: 0x06002502 RID: 9474 RVA: 0x000E4E6C File Offset: 0x000E306C
		public static ResponsePlayerMessages ReadResponsePlayerMessages(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePlayerMessages responsePlayerMessages = new ResponsePlayerMessages();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePlayerMessages.DeserializeMessage(array);
			return responsePlayerMessages;
		}

		// Token: 0x06002503 RID: 9475 RVA: 0x000E4EB0 File Offset: 0x000E30B0
		public static List<ResponsePlayerMessages> ReadListResponsePlayerMessages(byte[] data, ref int offset)
		{
			List<ResponsePlayerMessages> list = new List<ResponsePlayerMessages>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePlayerMessages item = ArrayManager.ReadResponsePlayerMessages(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002504 RID: 9476 RVA: 0x000E4EF4 File Offset: 0x000E30F4
		public static void WritePacketCampaignMission(ref byte[] data, ref int offset, PacketCampaignMission value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002505 RID: 9477 RVA: 0x000E4F10 File Offset: 0x000E3110
		public static void WriteListPacketCampaignMission(ref byte[] data, ref int offset, List<PacketCampaignMission> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketCampaignMission value in values)
			{
				ArrayManager.WritePacketCampaignMission(ref data, ref offset, value);
			}
		}

		// Token: 0x06002506 RID: 9478 RVA: 0x000E4F8C File Offset: 0x000E318C
		public static PacketCampaignMission ReadPacketCampaignMission(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketCampaignMission packetCampaignMission = new PacketCampaignMission();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetCampaignMission.DeserializeMessage(array);
			return packetCampaignMission;
		}

		// Token: 0x06002507 RID: 9479 RVA: 0x000E4FD0 File Offset: 0x000E31D0
		public static List<PacketCampaignMission> ReadListPacketCampaignMission(byte[] data, ref int offset)
		{
			List<PacketCampaignMission> list = new List<PacketCampaignMission>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketCampaignMission item = ArrayManager.ReadPacketCampaignMission(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002508 RID: 9480 RVA: 0x000E5014 File Offset: 0x000E3214
		public static void WritePacketCampaign(ref byte[] data, ref int offset, PacketCampaign value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002509 RID: 9481 RVA: 0x000E5030 File Offset: 0x000E3230
		public static void WriteListPacketCampaign(ref byte[] data, ref int offset, List<PacketCampaign> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketCampaign value in values)
			{
				ArrayManager.WritePacketCampaign(ref data, ref offset, value);
			}
		}

		// Token: 0x0600250A RID: 9482 RVA: 0x000E50AC File Offset: 0x000E32AC
		public static PacketCampaign ReadPacketCampaign(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketCampaign packetCampaign = new PacketCampaign();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetCampaign.DeserializeMessage(array);
			return packetCampaign;
		}

		// Token: 0x0600250B RID: 9483 RVA: 0x000E50F0 File Offset: 0x000E32F0
		public static List<PacketCampaign> ReadListPacketCampaign(byte[] data, ref int offset)
		{
			List<PacketCampaign> list = new List<PacketCampaign>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketCampaign item = ArrayManager.ReadPacketCampaign(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600250C RID: 9484 RVA: 0x000E5134 File Offset: 0x000E3334
		public static void WriteResponseCampaignDefinitions(ref byte[] data, ref int offset, ResponseCampaignDefinitions value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600250D RID: 9485 RVA: 0x000E5150 File Offset: 0x000E3350
		public static void WriteListResponseCampaignDefinitions(ref byte[] data, ref int offset, List<ResponseCampaignDefinitions> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCampaignDefinitions value in values)
			{
				ArrayManager.WriteResponseCampaignDefinitions(ref data, ref offset, value);
			}
		}

		// Token: 0x0600250E RID: 9486 RVA: 0x000E51CC File Offset: 0x000E33CC
		public static ResponseCampaignDefinitions ReadResponseCampaignDefinitions(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCampaignDefinitions responseCampaignDefinitions = new ResponseCampaignDefinitions();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCampaignDefinitions.DeserializeMessage(array);
			return responseCampaignDefinitions;
		}

		// Token: 0x0600250F RID: 9487 RVA: 0x000E5210 File Offset: 0x000E3410
		public static List<ResponseCampaignDefinitions> ReadListResponseCampaignDefinitions(byte[] data, ref int offset)
		{
			List<ResponseCampaignDefinitions> list = new List<ResponseCampaignDefinitions>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCampaignDefinitions item = ArrayManager.ReadResponseCampaignDefinitions(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002510 RID: 9488 RVA: 0x000E5254 File Offset: 0x000E3454
		public static void WritePacketBattlegroundBucket(ref byte[] data, ref int offset, PacketBattlegroundBucket value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002511 RID: 9489 RVA: 0x000E5270 File Offset: 0x000E3470
		public static void WriteListPacketBattlegroundBucket(ref byte[] data, ref int offset, List<PacketBattlegroundBucket> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketBattlegroundBucket value in values)
			{
				ArrayManager.WritePacketBattlegroundBucket(ref data, ref offset, value);
			}
		}

		// Token: 0x06002512 RID: 9490 RVA: 0x000E52EC File Offset: 0x000E34EC
		public static PacketBattlegroundBucket ReadPacketBattlegroundBucket(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketBattlegroundBucket packetBattlegroundBucket = new PacketBattlegroundBucket();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetBattlegroundBucket.DeserializeMessage(array);
			return packetBattlegroundBucket;
		}

		// Token: 0x06002513 RID: 9491 RVA: 0x000E5330 File Offset: 0x000E3530
		public static List<PacketBattlegroundBucket> ReadListPacketBattlegroundBucket(byte[] data, ref int offset)
		{
			List<PacketBattlegroundBucket> list = new List<PacketBattlegroundBucket>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketBattlegroundBucket item = ArrayManager.ReadPacketBattlegroundBucket(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002514 RID: 9492 RVA: 0x000E5374 File Offset: 0x000E3574
		public static void WriteResponseBattlegroundBuckets(ref byte[] data, ref int offset, ResponseBattlegroundBuckets value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002515 RID: 9493 RVA: 0x000E5390 File Offset: 0x000E3590
		public static void WriteListResponseBattlegroundBuckets(ref byte[] data, ref int offset, List<ResponseBattlegroundBuckets> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseBattlegroundBuckets value in values)
			{
				ArrayManager.WriteResponseBattlegroundBuckets(ref data, ref offset, value);
			}
		}

		// Token: 0x06002516 RID: 9494 RVA: 0x000E540C File Offset: 0x000E360C
		public static ResponseBattlegroundBuckets ReadResponseBattlegroundBuckets(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseBattlegroundBuckets responseBattlegroundBuckets = new ResponseBattlegroundBuckets();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseBattlegroundBuckets.DeserializeMessage(array);
			return responseBattlegroundBuckets;
		}

		// Token: 0x06002517 RID: 9495 RVA: 0x000E5450 File Offset: 0x000E3650
		public static List<ResponseBattlegroundBuckets> ReadListResponseBattlegroundBuckets(byte[] data, ref int offset)
		{
			List<ResponseBattlegroundBuckets> list = new List<ResponseBattlegroundBuckets>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseBattlegroundBuckets item = ArrayManager.ReadResponseBattlegroundBuckets(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002518 RID: 9496 RVA: 0x000E5494 File Offset: 0x000E3694
		public static void WritePacketSabotageBucket(ref byte[] data, ref int offset, PacketSabotageBucket value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002519 RID: 9497 RVA: 0x000E54B0 File Offset: 0x000E36B0
		public static void WriteListPacketSabotageBucket(ref byte[] data, ref int offset, List<PacketSabotageBucket> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketSabotageBucket value in values)
			{
				ArrayManager.WritePacketSabotageBucket(ref data, ref offset, value);
			}
		}

		// Token: 0x0600251A RID: 9498 RVA: 0x000E552C File Offset: 0x000E372C
		public static PacketSabotageBucket ReadPacketSabotageBucket(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketSabotageBucket packetSabotageBucket = new PacketSabotageBucket();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetSabotageBucket.DeserializeMessage(array);
			return packetSabotageBucket;
		}

		// Token: 0x0600251B RID: 9499 RVA: 0x000E5570 File Offset: 0x000E3770
		public static List<PacketSabotageBucket> ReadListPacketSabotageBucket(byte[] data, ref int offset)
		{
			List<PacketSabotageBucket> list = new List<PacketSabotageBucket>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketSabotageBucket item = ArrayManager.ReadPacketSabotageBucket(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600251C RID: 9500 RVA: 0x000E55B4 File Offset: 0x000E37B4
		public static void WriteResponseSabotageBuckets(ref byte[] data, ref int offset, ResponseSabotageBuckets value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600251D RID: 9501 RVA: 0x000E55D0 File Offset: 0x000E37D0
		public static void WriteListResponseSabotageBuckets(ref byte[] data, ref int offset, List<ResponseSabotageBuckets> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSabotageBuckets value in values)
			{
				ArrayManager.WriteResponseSabotageBuckets(ref data, ref offset, value);
			}
		}

		// Token: 0x0600251E RID: 9502 RVA: 0x000E564C File Offset: 0x000E384C
		public static ResponseSabotageBuckets ReadResponseSabotageBuckets(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSabotageBuckets responseSabotageBuckets = new ResponseSabotageBuckets();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSabotageBuckets.DeserializeMessage(array);
			return responseSabotageBuckets;
		}

		// Token: 0x0600251F RID: 9503 RVA: 0x000E5690 File Offset: 0x000E3890
		public static List<ResponseSabotageBuckets> ReadListResponseSabotageBuckets(byte[] data, ref int offset)
		{
			List<ResponseSabotageBuckets> list = new List<ResponseSabotageBuckets>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSabotageBuckets item = ArrayManager.ReadResponseSabotageBuckets(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002520 RID: 9504 RVA: 0x000E56D4 File Offset: 0x000E38D4
		public static void WritePlayerMissionProgressForNetwork(ref byte[] data, ref int offset, PlayerMissionProgressForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002521 RID: 9505 RVA: 0x000E56F0 File Offset: 0x000E38F0
		public static void WriteListPlayerMissionProgressForNetwork(ref byte[] data, ref int offset, List<PlayerMissionProgressForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerMissionProgressForNetwork value in values)
			{
				ArrayManager.WritePlayerMissionProgressForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002522 RID: 9506 RVA: 0x000E576C File Offset: 0x000E396C
		public static PlayerMissionProgressForNetwork ReadPlayerMissionProgressForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerMissionProgressForNetwork playerMissionProgressForNetwork = new PlayerMissionProgressForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerMissionProgressForNetwork.DeserializeMessage(array);
			return playerMissionProgressForNetwork;
		}

		// Token: 0x06002523 RID: 9507 RVA: 0x000E57B0 File Offset: 0x000E39B0
		public static List<PlayerMissionProgressForNetwork> ReadListPlayerMissionProgressForNetwork(byte[] data, ref int offset)
		{
			List<PlayerMissionProgressForNetwork> list = new List<PlayerMissionProgressForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerMissionProgressForNetwork item = ArrayManager.ReadPlayerMissionProgressForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002524 RID: 9508 RVA: 0x000E57F4 File Offset: 0x000E39F4
		public static void WritePushPlayerCampaignProgress(ref byte[] data, ref int offset, PushPlayerCampaignProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002525 RID: 9509 RVA: 0x000E5810 File Offset: 0x000E3A10
		public static void WriteListPushPlayerCampaignProgress(ref byte[] data, ref int offset, List<PushPlayerCampaignProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerCampaignProgress value in values)
			{
				ArrayManager.WritePushPlayerCampaignProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06002526 RID: 9510 RVA: 0x000E588C File Offset: 0x000E3A8C
		public static PushPlayerCampaignProgress ReadPushPlayerCampaignProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerCampaignProgress pushPlayerCampaignProgress = new PushPlayerCampaignProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerCampaignProgress.DeserializeMessage(array);
			return pushPlayerCampaignProgress;
		}

		// Token: 0x06002527 RID: 9511 RVA: 0x000E58D0 File Offset: 0x000E3AD0
		public static List<PushPlayerCampaignProgress> ReadListPushPlayerCampaignProgress(byte[] data, ref int offset)
		{
			List<PushPlayerCampaignProgress> list = new List<PushPlayerCampaignProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerCampaignProgress item = ArrayManager.ReadPushPlayerCampaignProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002528 RID: 9512 RVA: 0x000E5914 File Offset: 0x000E3B14
		public static void WriteRequestStartCampaignMission(ref byte[] data, ref int offset, RequestStartCampaignMission value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002529 RID: 9513 RVA: 0x000E5930 File Offset: 0x000E3B30
		public static void WriteListRequestStartCampaignMission(ref byte[] data, ref int offset, List<RequestStartCampaignMission> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestStartCampaignMission value in values)
			{
				ArrayManager.WriteRequestStartCampaignMission(ref data, ref offset, value);
			}
		}

		// Token: 0x0600252A RID: 9514 RVA: 0x000E59AC File Offset: 0x000E3BAC
		public static RequestStartCampaignMission ReadRequestStartCampaignMission(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestStartCampaignMission requestStartCampaignMission = new RequestStartCampaignMission();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestStartCampaignMission.DeserializeMessage(array);
			return requestStartCampaignMission;
		}

		// Token: 0x0600252B RID: 9515 RVA: 0x000E59F0 File Offset: 0x000E3BF0
		public static List<RequestStartCampaignMission> ReadListRequestStartCampaignMission(byte[] data, ref int offset)
		{
			List<RequestStartCampaignMission> list = new List<RequestStartCampaignMission>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestStartCampaignMission item = ArrayManager.ReadRequestStartCampaignMission(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600252C RID: 9516 RVA: 0x000E5A34 File Offset: 0x000E3C34
		public static void WriteResponseStartCampaignMission(ref byte[] data, ref int offset, ResponseStartCampaignMission value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600252D RID: 9517 RVA: 0x000E5A50 File Offset: 0x000E3C50
		public static void WriteListResponseStartCampaignMission(ref byte[] data, ref int offset, List<ResponseStartCampaignMission> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseStartCampaignMission value in values)
			{
				ArrayManager.WriteResponseStartCampaignMission(ref data, ref offset, value);
			}
		}

		// Token: 0x0600252E RID: 9518 RVA: 0x000E5ACC File Offset: 0x000E3CCC
		public static ResponseStartCampaignMission ReadResponseStartCampaignMission(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseStartCampaignMission responseStartCampaignMission = new ResponseStartCampaignMission();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseStartCampaignMission.DeserializeMessage(array);
			return responseStartCampaignMission;
		}

		// Token: 0x0600252F RID: 9519 RVA: 0x000E5B10 File Offset: 0x000E3D10
		public static List<ResponseStartCampaignMission> ReadListResponseStartCampaignMission(byte[] data, ref int offset)
		{
			List<ResponseStartCampaignMission> list = new List<ResponseStartCampaignMission>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseStartCampaignMission item = ArrayManager.ReadResponseStartCampaignMission(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002530 RID: 9520 RVA: 0x000E5B54 File Offset: 0x000E3D54
		public static void WriteNotifyCampaignStarted(ref byte[] data, ref int offset, NotifyCampaignStarted value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002531 RID: 9521 RVA: 0x000E5B70 File Offset: 0x000E3D70
		public static void WriteListNotifyCampaignStarted(ref byte[] data, ref int offset, List<NotifyCampaignStarted> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NotifyCampaignStarted value in values)
			{
				ArrayManager.WriteNotifyCampaignStarted(ref data, ref offset, value);
			}
		}

		// Token: 0x06002532 RID: 9522 RVA: 0x000E5BEC File Offset: 0x000E3DEC
		public static NotifyCampaignStarted ReadNotifyCampaignStarted(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NotifyCampaignStarted notifyCampaignStarted = new NotifyCampaignStarted();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			notifyCampaignStarted.DeserializeMessage(array);
			return notifyCampaignStarted;
		}

		// Token: 0x06002533 RID: 9523 RVA: 0x000E5C30 File Offset: 0x000E3E30
		public static List<NotifyCampaignStarted> ReadListNotifyCampaignStarted(byte[] data, ref int offset)
		{
			List<NotifyCampaignStarted> list = new List<NotifyCampaignStarted>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NotifyCampaignStarted item = ArrayManager.ReadNotifyCampaignStarted(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002534 RID: 9524 RVA: 0x000E5C74 File Offset: 0x000E3E74
		public static void WriteNotifySurvivalUnlocked(ref byte[] data, ref int offset, NotifySurvivalUnlocked value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002535 RID: 9525 RVA: 0x000E5C90 File Offset: 0x000E3E90
		public static void WriteListNotifySurvivalUnlocked(ref byte[] data, ref int offset, List<NotifySurvivalUnlocked> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NotifySurvivalUnlocked value in values)
			{
				ArrayManager.WriteNotifySurvivalUnlocked(ref data, ref offset, value);
			}
		}

		// Token: 0x06002536 RID: 9526 RVA: 0x000E5D0C File Offset: 0x000E3F0C
		public static NotifySurvivalUnlocked ReadNotifySurvivalUnlocked(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NotifySurvivalUnlocked notifySurvivalUnlocked = new NotifySurvivalUnlocked();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			notifySurvivalUnlocked.DeserializeMessage(array);
			return notifySurvivalUnlocked;
		}

		// Token: 0x06002537 RID: 9527 RVA: 0x000E5D50 File Offset: 0x000E3F50
		public static List<NotifySurvivalUnlocked> ReadListNotifySurvivalUnlocked(byte[] data, ref int offset)
		{
			List<NotifySurvivalUnlocked> list = new List<NotifySurvivalUnlocked>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NotifySurvivalUnlocked item = ArrayManager.ReadNotifySurvivalUnlocked(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002538 RID: 9528 RVA: 0x000E5D94 File Offset: 0x000E3F94
		public static void WriteNotifySiegelUnlocked(ref byte[] data, ref int offset, NotifySiegelUnlocked value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002539 RID: 9529 RVA: 0x000E5DB0 File Offset: 0x000E3FB0
		public static void WriteListNotifySiegelUnlocked(ref byte[] data, ref int offset, List<NotifySiegelUnlocked> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NotifySiegelUnlocked value in values)
			{
				ArrayManager.WriteNotifySiegelUnlocked(ref data, ref offset, value);
			}
		}

		// Token: 0x0600253A RID: 9530 RVA: 0x000E5E2C File Offset: 0x000E402C
		public static NotifySiegelUnlocked ReadNotifySiegelUnlocked(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NotifySiegelUnlocked notifySiegelUnlocked = new NotifySiegelUnlocked();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			notifySiegelUnlocked.DeserializeMessage(array);
			return notifySiegelUnlocked;
		}

		// Token: 0x0600253B RID: 9531 RVA: 0x000E5E70 File Offset: 0x000E4070
		public static List<NotifySiegelUnlocked> ReadListNotifySiegelUnlocked(byte[] data, ref int offset)
		{
			List<NotifySiegelUnlocked> list = new List<NotifySiegelUnlocked>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NotifySiegelUnlocked item = ArrayManager.ReadNotifySiegelUnlocked(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600253C RID: 9532 RVA: 0x000E5EB4 File Offset: 0x000E40B4
		public static void WriteNotifyWorkshopTaskComplete(ref byte[] data, ref int offset, NotifyWorkshopTaskComplete value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600253D RID: 9533 RVA: 0x000E5ED0 File Offset: 0x000E40D0
		public static void WriteListNotifyWorkshopTaskComplete(ref byte[] data, ref int offset, List<NotifyWorkshopTaskComplete> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NotifyWorkshopTaskComplete value in values)
			{
				ArrayManager.WriteNotifyWorkshopTaskComplete(ref data, ref offset, value);
			}
		}

		// Token: 0x0600253E RID: 9534 RVA: 0x000E5F4C File Offset: 0x000E414C
		public static NotifyWorkshopTaskComplete ReadNotifyWorkshopTaskComplete(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NotifyWorkshopTaskComplete notifyWorkshopTaskComplete = new NotifyWorkshopTaskComplete();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			notifyWorkshopTaskComplete.DeserializeMessage(array);
			return notifyWorkshopTaskComplete;
		}

		// Token: 0x0600253F RID: 9535 RVA: 0x000E5F90 File Offset: 0x000E4190
		public static List<NotifyWorkshopTaskComplete> ReadListNotifyWorkshopTaskComplete(byte[] data, ref int offset)
		{
			List<NotifyWorkshopTaskComplete> list = new List<NotifyWorkshopTaskComplete>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NotifyWorkshopTaskComplete item = ArrayManager.ReadNotifyWorkshopTaskComplete(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002540 RID: 9536 RVA: 0x000E5FD4 File Offset: 0x000E41D4
		public static void WritePlayerBoostStatus(ref byte[] data, ref int offset, PlayerBoostStatus value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002541 RID: 9537 RVA: 0x000E5FF0 File Offset: 0x000E41F0
		public static void WriteListPlayerBoostStatus(ref byte[] data, ref int offset, List<PlayerBoostStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerBoostStatus value in values)
			{
				ArrayManager.WritePlayerBoostStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06002542 RID: 9538 RVA: 0x000E606C File Offset: 0x000E426C
		public static PlayerBoostStatus ReadPlayerBoostStatus(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerBoostStatus playerBoostStatus = new PlayerBoostStatus();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerBoostStatus.DeserializeMessage(array);
			return playerBoostStatus;
		}

		// Token: 0x06002543 RID: 9539 RVA: 0x000E60B0 File Offset: 0x000E42B0
		public static List<PlayerBoostStatus> ReadListPlayerBoostStatus(byte[] data, ref int offset)
		{
			List<PlayerBoostStatus> list = new List<PlayerBoostStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerBoostStatus item = ArrayManager.ReadPlayerBoostStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002544 RID: 9540 RVA: 0x000E60F4 File Offset: 0x000E42F4
		public static void WritePushPlayerBoostStatus(ref byte[] data, ref int offset, PushPlayerBoostStatus value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002545 RID: 9541 RVA: 0x000E6110 File Offset: 0x000E4310
		public static void WriteListPushPlayerBoostStatus(ref byte[] data, ref int offset, List<PushPlayerBoostStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerBoostStatus value in values)
			{
				ArrayManager.WritePushPlayerBoostStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06002546 RID: 9542 RVA: 0x000E618C File Offset: 0x000E438C
		public static PushPlayerBoostStatus ReadPushPlayerBoostStatus(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerBoostStatus pushPlayerBoostStatus = new PushPlayerBoostStatus();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerBoostStatus.DeserializeMessage(array);
			return pushPlayerBoostStatus;
		}

		// Token: 0x06002547 RID: 9543 RVA: 0x000E61D0 File Offset: 0x000E43D0
		public static List<PushPlayerBoostStatus> ReadListPushPlayerBoostStatus(byte[] data, ref int offset)
		{
			List<PushPlayerBoostStatus> list = new List<PushPlayerBoostStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerBoostStatus item = ArrayManager.ReadPushPlayerBoostStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002548 RID: 9544 RVA: 0x000E6214 File Offset: 0x000E4414
		public static void WritePlayerBucketProgress(ref byte[] data, ref int offset, PlayerBucketProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002549 RID: 9545 RVA: 0x000E6230 File Offset: 0x000E4430
		public static void WriteListPlayerBucketProgress(ref byte[] data, ref int offset, List<PlayerBucketProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerBucketProgress value in values)
			{
				ArrayManager.WritePlayerBucketProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x0600254A RID: 9546 RVA: 0x000E62AC File Offset: 0x000E44AC
		public static PlayerBucketProgress ReadPlayerBucketProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerBucketProgress playerBucketProgress = new PlayerBucketProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerBucketProgress.DeserializeMessage(array);
			return playerBucketProgress;
		}

		// Token: 0x0600254B RID: 9547 RVA: 0x000E62F0 File Offset: 0x000E44F0
		public static List<PlayerBucketProgress> ReadListPlayerBucketProgress(byte[] data, ref int offset)
		{
			List<PlayerBucketProgress> list = new List<PlayerBucketProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerBucketProgress item = ArrayManager.ReadPlayerBucketProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600254C RID: 9548 RVA: 0x000E6334 File Offset: 0x000E4534
		public static void WritePushPlayerBucketProgress(ref byte[] data, ref int offset, PushPlayerBucketProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600254D RID: 9549 RVA: 0x000E6350 File Offset: 0x000E4550
		public static void WriteListPushPlayerBucketProgress(ref byte[] data, ref int offset, List<PushPlayerBucketProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerBucketProgress value in values)
			{
				ArrayManager.WritePushPlayerBucketProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x0600254E RID: 9550 RVA: 0x000E63CC File Offset: 0x000E45CC
		public static PushPlayerBucketProgress ReadPushPlayerBucketProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerBucketProgress pushPlayerBucketProgress = new PushPlayerBucketProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerBucketProgress.DeserializeMessage(array);
			return pushPlayerBucketProgress;
		}

		// Token: 0x0600254F RID: 9551 RVA: 0x000E6410 File Offset: 0x000E4610
		public static List<PushPlayerBucketProgress> ReadListPushPlayerBucketProgress(byte[] data, ref int offset)
		{
			List<PushPlayerBucketProgress> list = new List<PushPlayerBucketProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerBucketProgress item = ArrayManager.ReadPushPlayerBucketProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002550 RID: 9552 RVA: 0x000E6454 File Offset: 0x000E4654
		public static void WriteRequestLobbyDeckList(ref byte[] data, ref int offset, RequestLobbyDeckList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002551 RID: 9553 RVA: 0x000E6470 File Offset: 0x000E4670
		public static void WriteListRequestLobbyDeckList(ref byte[] data, ref int offset, List<RequestLobbyDeckList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyDeckList value in values)
			{
				ArrayManager.WriteRequestLobbyDeckList(ref data, ref offset, value);
			}
		}

		// Token: 0x06002552 RID: 9554 RVA: 0x000E64EC File Offset: 0x000E46EC
		public static RequestLobbyDeckList ReadRequestLobbyDeckList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyDeckList requestLobbyDeckList = new RequestLobbyDeckList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyDeckList.DeserializeMessage(array);
			return requestLobbyDeckList;
		}

		// Token: 0x06002553 RID: 9555 RVA: 0x000E6530 File Offset: 0x000E4730
		public static List<RequestLobbyDeckList> ReadListRequestLobbyDeckList(byte[] data, ref int offset)
		{
			List<RequestLobbyDeckList> list = new List<RequestLobbyDeckList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyDeckList item = ArrayManager.ReadRequestLobbyDeckList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002554 RID: 9556 RVA: 0x000E6574 File Offset: 0x000E4774
		public static void WriteResponseLobbyDeckList(ref byte[] data, ref int offset, ResponseLobbyDeckList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002555 RID: 9557 RVA: 0x000E6590 File Offset: 0x000E4790
		public static void WriteListResponseLobbyDeckList(ref byte[] data, ref int offset, List<ResponseLobbyDeckList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseLobbyDeckList value in values)
			{
				ArrayManager.WriteResponseLobbyDeckList(ref data, ref offset, value);
			}
		}

		// Token: 0x06002556 RID: 9558 RVA: 0x000E660C File Offset: 0x000E480C
		public static ResponseLobbyDeckList ReadResponseLobbyDeckList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseLobbyDeckList responseLobbyDeckList = new ResponseLobbyDeckList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseLobbyDeckList.DeserializeMessage(array);
			return responseLobbyDeckList;
		}

		// Token: 0x06002557 RID: 9559 RVA: 0x000E6650 File Offset: 0x000E4850
		public static List<ResponseLobbyDeckList> ReadListResponseLobbyDeckList(byte[] data, ref int offset)
		{
			List<ResponseLobbyDeckList> list = new List<ResponseLobbyDeckList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseLobbyDeckList item = ArrayManager.ReadResponseLobbyDeckList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002558 RID: 9560 RVA: 0x000E6694 File Offset: 0x000E4894
		public static void WritePacketChallenge(ref byte[] data, ref int offset, PacketChallenge value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002559 RID: 9561 RVA: 0x000E66B0 File Offset: 0x000E48B0
		public static void WriteListPacketChallenge(ref byte[] data, ref int offset, List<PacketChallenge> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketChallenge value in values)
			{
				ArrayManager.WritePacketChallenge(ref data, ref offset, value);
			}
		}

		// Token: 0x0600255A RID: 9562 RVA: 0x000E672C File Offset: 0x000E492C
		public static PacketChallenge ReadPacketChallenge(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketChallenge packetChallenge = new PacketChallenge();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetChallenge.DeserializeMessage(array);
			return packetChallenge;
		}

		// Token: 0x0600255B RID: 9563 RVA: 0x000E6770 File Offset: 0x000E4970
		public static List<PacketChallenge> ReadListPacketChallenge(byte[] data, ref int offset)
		{
			List<PacketChallenge> list = new List<PacketChallenge>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketChallenge item = ArrayManager.ReadPacketChallenge(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600255C RID: 9564 RVA: 0x000E67B4 File Offset: 0x000E49B4
		public static void WritePushActiveChallenge(ref byte[] data, ref int offset, PushActiveChallenge value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600255D RID: 9565 RVA: 0x000E67D0 File Offset: 0x000E49D0
		public static void WriteListPushActiveChallenge(ref byte[] data, ref int offset, List<PushActiveChallenge> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushActiveChallenge value in values)
			{
				ArrayManager.WritePushActiveChallenge(ref data, ref offset, value);
			}
		}

		// Token: 0x0600255E RID: 9566 RVA: 0x000E684C File Offset: 0x000E4A4C
		public static PushActiveChallenge ReadPushActiveChallenge(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushActiveChallenge pushActiveChallenge = new PushActiveChallenge();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushActiveChallenge.DeserializeMessage(array);
			return pushActiveChallenge;
		}

		// Token: 0x0600255F RID: 9567 RVA: 0x000E6890 File Offset: 0x000E4A90
		public static List<PushActiveChallenge> ReadListPushActiveChallenge(byte[] data, ref int offset)
		{
			List<PushActiveChallenge> list = new List<PushActiveChallenge>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushActiveChallenge item = ArrayManager.ReadPushActiveChallenge(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002560 RID: 9568 RVA: 0x000E68D4 File Offset: 0x000E4AD4
		public static void WritePushPlayerChallengeProgress(ref byte[] data, ref int offset, PushPlayerChallengeProgress value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002561 RID: 9569 RVA: 0x000E68F0 File Offset: 0x000E4AF0
		public static void WriteListPushPlayerChallengeProgress(ref byte[] data, ref int offset, List<PushPlayerChallengeProgress> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerChallengeProgress value in values)
			{
				ArrayManager.WritePushPlayerChallengeProgress(ref data, ref offset, value);
			}
		}

		// Token: 0x06002562 RID: 9570 RVA: 0x000E696C File Offset: 0x000E4B6C
		public static PushPlayerChallengeProgress ReadPushPlayerChallengeProgress(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerChallengeProgress pushPlayerChallengeProgress = new PushPlayerChallengeProgress();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerChallengeProgress.DeserializeMessage(array);
			return pushPlayerChallengeProgress;
		}

		// Token: 0x06002563 RID: 9571 RVA: 0x000E69B0 File Offset: 0x000E4BB0
		public static List<PushPlayerChallengeProgress> ReadListPushPlayerChallengeProgress(byte[] data, ref int offset)
		{
			List<PushPlayerChallengeProgress> list = new List<PushPlayerChallengeProgress>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerChallengeProgress item = ArrayManager.ReadPushPlayerChallengeProgress(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002564 RID: 9572 RVA: 0x000E69F4 File Offset: 0x000E4BF4
		public static void WritePacketDeckContents(ref byte[] data, ref int offset, PacketDeckContents value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002565 RID: 9573 RVA: 0x000E6A10 File Offset: 0x000E4C10
		public static void WriteListPacketDeckContents(ref byte[] data, ref int offset, List<PacketDeckContents> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PacketDeckContents value in values)
			{
				ArrayManager.WritePacketDeckContents(ref data, ref offset, value);
			}
		}

		// Token: 0x06002566 RID: 9574 RVA: 0x000E6A8C File Offset: 0x000E4C8C
		public static PacketDeckContents ReadPacketDeckContents(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PacketDeckContents packetDeckContents = new PacketDeckContents();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			packetDeckContents.DeserializeMessage(array);
			return packetDeckContents;
		}

		// Token: 0x06002567 RID: 9575 RVA: 0x000E6AD0 File Offset: 0x000E4CD0
		public static List<PacketDeckContents> ReadListPacketDeckContents(byte[] data, ref int offset)
		{
			List<PacketDeckContents> list = new List<PacketDeckContents>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PacketDeckContents item = ArrayManager.ReadPacketDeckContents(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002568 RID: 9576 RVA: 0x000E6B14 File Offset: 0x000E4D14
		public static void WritePushPlayerRotatingStore(ref byte[] data, ref int offset, PushPlayerRotatingStore value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002569 RID: 9577 RVA: 0x000E6B30 File Offset: 0x000E4D30
		public static void WriteListPushPlayerRotatingStore(ref byte[] data, ref int offset, List<PushPlayerRotatingStore> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerRotatingStore value in values)
			{
				ArrayManager.WritePushPlayerRotatingStore(ref data, ref offset, value);
			}
		}

		// Token: 0x0600256A RID: 9578 RVA: 0x000E6BAC File Offset: 0x000E4DAC
		public static PushPlayerRotatingStore ReadPushPlayerRotatingStore(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerRotatingStore pushPlayerRotatingStore = new PushPlayerRotatingStore();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerRotatingStore.DeserializeMessage(array);
			return pushPlayerRotatingStore;
		}

		// Token: 0x0600256B RID: 9579 RVA: 0x000E6BF0 File Offset: 0x000E4DF0
		public static List<PushPlayerRotatingStore> ReadListPushPlayerRotatingStore(byte[] data, ref int offset)
		{
			List<PushPlayerRotatingStore> list = new List<PushPlayerRotatingStore>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerRotatingStore item = ArrayManager.ReadPushPlayerRotatingStore(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600256C RID: 9580 RVA: 0x000E6C34 File Offset: 0x000E4E34
		public static void WriteRequestPushPlayerRotatingStore(ref byte[] data, ref int offset, RequestPushPlayerRotatingStore value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600256D RID: 9581 RVA: 0x000E6C50 File Offset: 0x000E4E50
		public static void WriteListRequestPushPlayerRotatingStore(ref byte[] data, ref int offset, List<RequestPushPlayerRotatingStore> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPushPlayerRotatingStore value in values)
			{
				ArrayManager.WriteRequestPushPlayerRotatingStore(ref data, ref offset, value);
			}
		}

		// Token: 0x0600256E RID: 9582 RVA: 0x000E6CCC File Offset: 0x000E4ECC
		public static RequestPushPlayerRotatingStore ReadRequestPushPlayerRotatingStore(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPushPlayerRotatingStore requestPushPlayerRotatingStore = new RequestPushPlayerRotatingStore();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPushPlayerRotatingStore.DeserializeMessage(array);
			return requestPushPlayerRotatingStore;
		}

		// Token: 0x0600256F RID: 9583 RVA: 0x000E6D10 File Offset: 0x000E4F10
		public static List<RequestPushPlayerRotatingStore> ReadListRequestPushPlayerRotatingStore(byte[] data, ref int offset)
		{
			List<RequestPushPlayerRotatingStore> list = new List<RequestPushPlayerRotatingStore>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPushPlayerRotatingStore item = ArrayManager.ReadRequestPushPlayerRotatingStore(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002570 RID: 9584 RVA: 0x000E6D54 File Offset: 0x000E4F54
		public static void WritePushAnimaticDefinitions(ref byte[] data, ref int offset, PushAnimaticDefinitions value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002571 RID: 9585 RVA: 0x000E6D70 File Offset: 0x000E4F70
		public static void WriteListPushAnimaticDefinitions(ref byte[] data, ref int offset, List<PushAnimaticDefinitions> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushAnimaticDefinitions value in values)
			{
				ArrayManager.WritePushAnimaticDefinitions(ref data, ref offset, value);
			}
		}

		// Token: 0x06002572 RID: 9586 RVA: 0x000E6DEC File Offset: 0x000E4FEC
		public static PushAnimaticDefinitions ReadPushAnimaticDefinitions(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushAnimaticDefinitions pushAnimaticDefinitions = new PushAnimaticDefinitions();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushAnimaticDefinitions.DeserializeMessage(array);
			return pushAnimaticDefinitions;
		}

		// Token: 0x06002573 RID: 9587 RVA: 0x000E6E30 File Offset: 0x000E5030
		public static List<PushAnimaticDefinitions> ReadListPushAnimaticDefinitions(byte[] data, ref int offset)
		{
			List<PushAnimaticDefinitions> list = new List<PushAnimaticDefinitions>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushAnimaticDefinitions item = ArrayManager.ReadPushAnimaticDefinitions(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002574 RID: 9588 RVA: 0x000E6E74 File Offset: 0x000E5074
		public static void WriteAnimaticDefinitionPacket(ref byte[] data, ref int offset, AnimaticDefinitionPacket value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002575 RID: 9589 RVA: 0x000E6E90 File Offset: 0x000E5090
		public static void WriteListAnimaticDefinitionPacket(ref byte[] data, ref int offset, List<AnimaticDefinitionPacket> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AnimaticDefinitionPacket value in values)
			{
				ArrayManager.WriteAnimaticDefinitionPacket(ref data, ref offset, value);
			}
		}

		// Token: 0x06002576 RID: 9590 RVA: 0x000E6F0C File Offset: 0x000E510C
		public static AnimaticDefinitionPacket ReadAnimaticDefinitionPacket(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AnimaticDefinitionPacket animaticDefinitionPacket = new AnimaticDefinitionPacket();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			animaticDefinitionPacket.DeserializeMessage(array);
			return animaticDefinitionPacket;
		}

		// Token: 0x06002577 RID: 9591 RVA: 0x000E6F50 File Offset: 0x000E5150
		public static List<AnimaticDefinitionPacket> ReadListAnimaticDefinitionPacket(byte[] data, ref int offset)
		{
			List<AnimaticDefinitionPacket> list = new List<AnimaticDefinitionPacket>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AnimaticDefinitionPacket item = ArrayManager.ReadAnimaticDefinitionPacket(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002578 RID: 9592 RVA: 0x000E6F94 File Offset: 0x000E5194
		public static void WriteRequestSkipPrologue(ref byte[] data, ref int offset, RequestSkipPrologue value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002579 RID: 9593 RVA: 0x000E6FB0 File Offset: 0x000E51B0
		public static void WriteListRequestSkipPrologue(ref byte[] data, ref int offset, List<RequestSkipPrologue> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSkipPrologue value in values)
			{
				ArrayManager.WriteRequestSkipPrologue(ref data, ref offset, value);
			}
		}

		// Token: 0x0600257A RID: 9594 RVA: 0x000E702C File Offset: 0x000E522C
		public static RequestSkipPrologue ReadRequestSkipPrologue(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSkipPrologue requestSkipPrologue = new RequestSkipPrologue();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSkipPrologue.DeserializeMessage(array);
			return requestSkipPrologue;
		}

		// Token: 0x0600257B RID: 9595 RVA: 0x000E7070 File Offset: 0x000E5270
		public static List<RequestSkipPrologue> ReadListRequestSkipPrologue(byte[] data, ref int offset)
		{
			List<RequestSkipPrologue> list = new List<RequestSkipPrologue>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSkipPrologue item = ArrayManager.ReadRequestSkipPrologue(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600257C RID: 9596 RVA: 0x000E70B4 File Offset: 0x000E52B4
		public static void WriteResponseSkipPrologue(ref byte[] data, ref int offset, ResponseSkipPrologue value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600257D RID: 9597 RVA: 0x000E70D0 File Offset: 0x000E52D0
		public static void WriteListResponseSkipPrologue(ref byte[] data, ref int offset, List<ResponseSkipPrologue> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSkipPrologue value in values)
			{
				ArrayManager.WriteResponseSkipPrologue(ref data, ref offset, value);
			}
		}

		// Token: 0x0600257E RID: 9598 RVA: 0x000E714C File Offset: 0x000E534C
		public static ResponseSkipPrologue ReadResponseSkipPrologue(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSkipPrologue responseSkipPrologue = new ResponseSkipPrologue();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSkipPrologue.DeserializeMessage(array);
			return responseSkipPrologue;
		}

		// Token: 0x0600257F RID: 9599 RVA: 0x000E7190 File Offset: 0x000E5390
		public static List<ResponseSkipPrologue> ReadListResponseSkipPrologue(byte[] data, ref int offset)
		{
			List<ResponseSkipPrologue> list = new List<ResponseSkipPrologue>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSkipPrologue item = ArrayManager.ReadResponseSkipPrologue(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002580 RID: 9600 RVA: 0x000E71D4 File Offset: 0x000E53D4
		public static void WriteRequestRegisterEUPlayer(ref byte[] data, ref int offset, RequestRegisterEUPlayer value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002581 RID: 9601 RVA: 0x000E71F0 File Offset: 0x000E53F0
		public static void WriteListRequestRegisterEUPlayer(ref byte[] data, ref int offset, List<RequestRegisterEUPlayer> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestRegisterEUPlayer value in values)
			{
				ArrayManager.WriteRequestRegisterEUPlayer(ref data, ref offset, value);
			}
		}

		// Token: 0x06002582 RID: 9602 RVA: 0x000E726C File Offset: 0x000E546C
		public static RequestRegisterEUPlayer ReadRequestRegisterEUPlayer(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestRegisterEUPlayer requestRegisterEUPlayer = new RequestRegisterEUPlayer();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestRegisterEUPlayer.DeserializeMessage(array);
			return requestRegisterEUPlayer;
		}

		// Token: 0x06002583 RID: 9603 RVA: 0x000E72B0 File Offset: 0x000E54B0
		public static List<RequestRegisterEUPlayer> ReadListRequestRegisterEUPlayer(byte[] data, ref int offset)
		{
			List<RequestRegisterEUPlayer> list = new List<RequestRegisterEUPlayer>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestRegisterEUPlayer item = ArrayManager.ReadRequestRegisterEUPlayer(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002584 RID: 9604 RVA: 0x000E72F4 File Offset: 0x000E54F4
		public static void WriteResponseRegisterEUPlayer(ref byte[] data, ref int offset, ResponseRegisterEUPlayer value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002585 RID: 9605 RVA: 0x000E7310 File Offset: 0x000E5510
		public static void WriteListResponseRegisterEUPlayer(ref byte[] data, ref int offset, List<ResponseRegisterEUPlayer> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseRegisterEUPlayer value in values)
			{
				ArrayManager.WriteResponseRegisterEUPlayer(ref data, ref offset, value);
			}
		}

		// Token: 0x06002586 RID: 9606 RVA: 0x000E738C File Offset: 0x000E558C
		public static ResponseRegisterEUPlayer ReadResponseRegisterEUPlayer(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseRegisterEUPlayer responseRegisterEUPlayer = new ResponseRegisterEUPlayer();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseRegisterEUPlayer.DeserializeMessage(array);
			return responseRegisterEUPlayer;
		}

		// Token: 0x06002587 RID: 9607 RVA: 0x000E73D0 File Offset: 0x000E55D0
		public static List<ResponseRegisterEUPlayer> ReadListResponseRegisterEUPlayer(byte[] data, ref int offset)
		{
			List<ResponseRegisterEUPlayer> list = new List<ResponseRegisterEUPlayer>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseRegisterEUPlayer item = ArrayManager.ReadResponseRegisterEUPlayer(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002588 RID: 9608 RVA: 0x000E7414 File Offset: 0x000E5614
		public static void WriteRequestMergeEUPlayer(ref byte[] data, ref int offset, RequestMergeEUPlayer value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002589 RID: 9609 RVA: 0x000E7430 File Offset: 0x000E5630
		public static void WriteListRequestMergeEUPlayer(ref byte[] data, ref int offset, List<RequestMergeEUPlayer> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestMergeEUPlayer value in values)
			{
				ArrayManager.WriteRequestMergeEUPlayer(ref data, ref offset, value);
			}
		}

		// Token: 0x0600258A RID: 9610 RVA: 0x000E74AC File Offset: 0x000E56AC
		public static RequestMergeEUPlayer ReadRequestMergeEUPlayer(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestMergeEUPlayer requestMergeEUPlayer = new RequestMergeEUPlayer();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestMergeEUPlayer.DeserializeMessage(array);
			return requestMergeEUPlayer;
		}

		// Token: 0x0600258B RID: 9611 RVA: 0x000E74F0 File Offset: 0x000E56F0
		public static List<RequestMergeEUPlayer> ReadListRequestMergeEUPlayer(byte[] data, ref int offset)
		{
			List<RequestMergeEUPlayer> list = new List<RequestMergeEUPlayer>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestMergeEUPlayer item = ArrayManager.ReadRequestMergeEUPlayer(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600258C RID: 9612 RVA: 0x000E7534 File Offset: 0x000E5734
		public static void WriteResponseMergeEUPlayer(ref byte[] data, ref int offset, ResponseMergeEUPlayer value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600258D RID: 9613 RVA: 0x000E7550 File Offset: 0x000E5750
		public static void WriteListResponseMergeEUPlayer(ref byte[] data, ref int offset, List<ResponseMergeEUPlayer> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseMergeEUPlayer value in values)
			{
				ArrayManager.WriteResponseMergeEUPlayer(ref data, ref offset, value);
			}
		}

		// Token: 0x0600258E RID: 9614 RVA: 0x000E75CC File Offset: 0x000E57CC
		public static ResponseMergeEUPlayer ReadResponseMergeEUPlayer(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseMergeEUPlayer responseMergeEUPlayer = new ResponseMergeEUPlayer();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseMergeEUPlayer.DeserializeMessage(array);
			return responseMergeEUPlayer;
		}

		// Token: 0x0600258F RID: 9615 RVA: 0x000E7610 File Offset: 0x000E5810
		public static List<ResponseMergeEUPlayer> ReadListResponseMergeEUPlayer(byte[] data, ref int offset)
		{
			List<ResponseMergeEUPlayer> list = new List<ResponseMergeEUPlayer>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseMergeEUPlayer item = ArrayManager.ReadResponseMergeEUPlayer(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002590 RID: 9616 RVA: 0x000E7654 File Offset: 0x000E5854
		public static void WritePushPlayerMMR(ref byte[] data, ref int offset, PushPlayerMMR value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002591 RID: 9617 RVA: 0x000E7670 File Offset: 0x000E5870
		public static void WriteListPushPlayerMMR(ref byte[] data, ref int offset, List<PushPlayerMMR> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerMMR value in values)
			{
				ArrayManager.WritePushPlayerMMR(ref data, ref offset, value);
			}
		}

		// Token: 0x06002592 RID: 9618 RVA: 0x000E76EC File Offset: 0x000E58EC
		public static PushPlayerMMR ReadPushPlayerMMR(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerMMR pushPlayerMMR = new PushPlayerMMR();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerMMR.DeserializeMessage(array);
			return pushPlayerMMR;
		}

		// Token: 0x06002593 RID: 9619 RVA: 0x000E7730 File Offset: 0x000E5930
		public static List<PushPlayerMMR> ReadListPushPlayerMMR(byte[] data, ref int offset)
		{
			List<PushPlayerMMR> list = new List<PushPlayerMMR>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerMMR item = ArrayManager.ReadPushPlayerMMR(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002594 RID: 9620 RVA: 0x000E7774 File Offset: 0x000E5974
		public static void WriteCurrentWeeklyChallengeViewed(ref byte[] data, ref int offset, CurrentWeeklyChallengeViewed value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002595 RID: 9621 RVA: 0x000E7790 File Offset: 0x000E5990
		public static void WriteListCurrentWeeklyChallengeViewed(ref byte[] data, ref int offset, List<CurrentWeeklyChallengeViewed> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CurrentWeeklyChallengeViewed value in values)
			{
				ArrayManager.WriteCurrentWeeklyChallengeViewed(ref data, ref offset, value);
			}
		}

		// Token: 0x06002596 RID: 9622 RVA: 0x000E780C File Offset: 0x000E5A0C
		public static CurrentWeeklyChallengeViewed ReadCurrentWeeklyChallengeViewed(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CurrentWeeklyChallengeViewed currentWeeklyChallengeViewed = new CurrentWeeklyChallengeViewed();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			currentWeeklyChallengeViewed.DeserializeMessage(array);
			return currentWeeklyChallengeViewed;
		}

		// Token: 0x06002597 RID: 9623 RVA: 0x000E7850 File Offset: 0x000E5A50
		public static List<CurrentWeeklyChallengeViewed> ReadListCurrentWeeklyChallengeViewed(byte[] data, ref int offset)
		{
			List<CurrentWeeklyChallengeViewed> list = new List<CurrentWeeklyChallengeViewed>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CurrentWeeklyChallengeViewed item = ArrayManager.ReadCurrentWeeklyChallengeViewed(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002598 RID: 9624 RVA: 0x000E7894 File Offset: 0x000E5A94
		public static void WriteKeystoneDetailPacket(ref byte[] data, ref int offset, KeystoneDetailPacket value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002599 RID: 9625 RVA: 0x000E78B0 File Offset: 0x000E5AB0
		public static void WriteListKeystoneDetailPacket(ref byte[] data, ref int offset, List<KeystoneDetailPacket> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystoneDetailPacket value in values)
			{
				ArrayManager.WriteKeystoneDetailPacket(ref data, ref offset, value);
			}
		}

		// Token: 0x0600259A RID: 9626 RVA: 0x000E792C File Offset: 0x000E5B2C
		public static KeystoneDetailPacket ReadKeystoneDetailPacket(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystoneDetailPacket keystoneDetailPacket = new KeystoneDetailPacket();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystoneDetailPacket.DeserializeMessage(array);
			return keystoneDetailPacket;
		}

		// Token: 0x0600259B RID: 9627 RVA: 0x000E7970 File Offset: 0x000E5B70
		public static List<KeystoneDetailPacket> ReadListKeystoneDetailPacket(byte[] data, ref int offset)
		{
			List<KeystoneDetailPacket> list = new List<KeystoneDetailPacket>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystoneDetailPacket item = ArrayManager.ReadKeystoneDetailPacket(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600259C RID: 9628 RVA: 0x000E79B4 File Offset: 0x000E5BB4
		public static void WritePushPlayerKeystone(ref byte[] data, ref int offset, PushPlayerKeystone value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600259D RID: 9629 RVA: 0x000E79D0 File Offset: 0x000E5BD0
		public static void WriteListPushPlayerKeystone(ref byte[] data, ref int offset, List<PushPlayerKeystone> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerKeystone value in values)
			{
				ArrayManager.WritePushPlayerKeystone(ref data, ref offset, value);
			}
		}

		// Token: 0x0600259E RID: 9630 RVA: 0x000E7A4C File Offset: 0x000E5C4C
		public static PushPlayerKeystone ReadPushPlayerKeystone(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerKeystone pushPlayerKeystone = new PushPlayerKeystone();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerKeystone.DeserializeMessage(array);
			return pushPlayerKeystone;
		}

		// Token: 0x0600259F RID: 9631 RVA: 0x000E7A90 File Offset: 0x000E5C90
		public static List<PushPlayerKeystone> ReadListPushPlayerKeystone(byte[] data, ref int offset)
		{
			List<PushPlayerKeystone> list = new List<PushPlayerKeystone>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerKeystone item = ArrayManager.ReadPushPlayerKeystone(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025A0 RID: 9632 RVA: 0x000E7AD4 File Offset: 0x000E5CD4
		public static void WriteRequestUpdateNameplate(ref byte[] data, ref int offset, RequestUpdateNameplate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025A1 RID: 9633 RVA: 0x000E7AF0 File Offset: 0x000E5CF0
		public static void WriteListRequestUpdateNameplate(ref byte[] data, ref int offset, List<RequestUpdateNameplate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestUpdateNameplate value in values)
			{
				ArrayManager.WriteRequestUpdateNameplate(ref data, ref offset, value);
			}
		}

		// Token: 0x060025A2 RID: 9634 RVA: 0x000E7B6C File Offset: 0x000E5D6C
		public static RequestUpdateNameplate ReadRequestUpdateNameplate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestUpdateNameplate requestUpdateNameplate = new RequestUpdateNameplate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestUpdateNameplate.DeserializeMessage(array);
			return requestUpdateNameplate;
		}

		// Token: 0x060025A3 RID: 9635 RVA: 0x000E7BB0 File Offset: 0x000E5DB0
		public static List<RequestUpdateNameplate> ReadListRequestUpdateNameplate(byte[] data, ref int offset)
		{
			List<RequestUpdateNameplate> list = new List<RequestUpdateNameplate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestUpdateNameplate item = ArrayManager.ReadRequestUpdateNameplate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025A4 RID: 9636 RVA: 0x000E7BF4 File Offset: 0x000E5DF4
		public static void WriteResponseUpdateNameplate(ref byte[] data, ref int offset, ResponseUpdateNameplate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025A5 RID: 9637 RVA: 0x000E7C10 File Offset: 0x000E5E10
		public static void WriteListResponseUpdateNameplate(ref byte[] data, ref int offset, List<ResponseUpdateNameplate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseUpdateNameplate value in values)
			{
				ArrayManager.WriteResponseUpdateNameplate(ref data, ref offset, value);
			}
		}

		// Token: 0x060025A6 RID: 9638 RVA: 0x000E7C8C File Offset: 0x000E5E8C
		public static ResponseUpdateNameplate ReadResponseUpdateNameplate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseUpdateNameplate responseUpdateNameplate = new ResponseUpdateNameplate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseUpdateNameplate.DeserializeMessage(array);
			return responseUpdateNameplate;
		}

		// Token: 0x060025A7 RID: 9639 RVA: 0x000E7CD0 File Offset: 0x000E5ED0
		public static List<ResponseUpdateNameplate> ReadListResponseUpdateNameplate(byte[] data, ref int offset)
		{
			List<ResponseUpdateNameplate> list = new List<ResponseUpdateNameplate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseUpdateNameplate item = ArrayManager.ReadResponseUpdateNameplate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025A8 RID: 9640 RVA: 0x000E7D14 File Offset: 0x000E5F14
		public static void WritePlayerCommunityEventsIndividualContributionsForNetwork(ref byte[] data, ref int offset, PlayerCommunityEventsIndividualContributionsForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025A9 RID: 9641 RVA: 0x000E7D30 File Offset: 0x000E5F30
		public static void WriteListPlayerCommunityEventsIndividualContributionsForNetwork(ref byte[] data, ref int offset, List<PlayerCommunityEventsIndividualContributionsForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerCommunityEventsIndividualContributionsForNetwork value in values)
			{
				ArrayManager.WritePlayerCommunityEventsIndividualContributionsForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025AA RID: 9642 RVA: 0x000E7DAC File Offset: 0x000E5FAC
		public static PlayerCommunityEventsIndividualContributionsForNetwork ReadPlayerCommunityEventsIndividualContributionsForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerCommunityEventsIndividualContributionsForNetwork playerCommunityEventsIndividualContributionsForNetwork = new PlayerCommunityEventsIndividualContributionsForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerCommunityEventsIndividualContributionsForNetwork.DeserializeMessage(array);
			return playerCommunityEventsIndividualContributionsForNetwork;
		}

		// Token: 0x060025AB RID: 9643 RVA: 0x000E7DF0 File Offset: 0x000E5FF0
		public static List<PlayerCommunityEventsIndividualContributionsForNetwork> ReadListPlayerCommunityEventsIndividualContributionsForNetwork(byte[] data, ref int offset)
		{
			List<PlayerCommunityEventsIndividualContributionsForNetwork> list = new List<PlayerCommunityEventsIndividualContributionsForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerCommunityEventsIndividualContributionsForNetwork item = ArrayManager.ReadPlayerCommunityEventsIndividualContributionsForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025AC RID: 9644 RVA: 0x000E7E34 File Offset: 0x000E6034
		public static void WritePlayerCommunityEventGoalsForNetwork(ref byte[] data, ref int offset, PlayerCommunityEventGoalsForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025AD RID: 9645 RVA: 0x000E7E50 File Offset: 0x000E6050
		public static void WriteListPlayerCommunityEventGoalsForNetwork(ref byte[] data, ref int offset, List<PlayerCommunityEventGoalsForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerCommunityEventGoalsForNetwork value in values)
			{
				ArrayManager.WritePlayerCommunityEventGoalsForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025AE RID: 9646 RVA: 0x000E7ECC File Offset: 0x000E60CC
		public static PlayerCommunityEventGoalsForNetwork ReadPlayerCommunityEventGoalsForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerCommunityEventGoalsForNetwork playerCommunityEventGoalsForNetwork = new PlayerCommunityEventGoalsForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerCommunityEventGoalsForNetwork.DeserializeMessage(array);
			return playerCommunityEventGoalsForNetwork;
		}

		// Token: 0x060025AF RID: 9647 RVA: 0x000E7F10 File Offset: 0x000E6110
		public static List<PlayerCommunityEventGoalsForNetwork> ReadListPlayerCommunityEventGoalsForNetwork(byte[] data, ref int offset)
		{
			List<PlayerCommunityEventGoalsForNetwork> list = new List<PlayerCommunityEventGoalsForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerCommunityEventGoalsForNetwork item = ArrayManager.ReadPlayerCommunityEventGoalsForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025B0 RID: 9648 RVA: 0x000E7F54 File Offset: 0x000E6154
		public static void WritePlayerCommunityEventBoostForNetwork(ref byte[] data, ref int offset, PlayerCommunityEventBoostForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025B1 RID: 9649 RVA: 0x000E7F70 File Offset: 0x000E6170
		public static void WriteListPlayerCommunityEventBoostForNetwork(ref byte[] data, ref int offset, List<PlayerCommunityEventBoostForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerCommunityEventBoostForNetwork value in values)
			{
				ArrayManager.WritePlayerCommunityEventBoostForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025B2 RID: 9650 RVA: 0x000E7FEC File Offset: 0x000E61EC
		public static PlayerCommunityEventBoostForNetwork ReadPlayerCommunityEventBoostForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerCommunityEventBoostForNetwork playerCommunityEventBoostForNetwork = new PlayerCommunityEventBoostForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerCommunityEventBoostForNetwork.DeserializeMessage(array);
			return playerCommunityEventBoostForNetwork;
		}

		// Token: 0x060025B3 RID: 9651 RVA: 0x000E8030 File Offset: 0x000E6230
		public static List<PlayerCommunityEventBoostForNetwork> ReadListPlayerCommunityEventBoostForNetwork(byte[] data, ref int offset)
		{
			List<PlayerCommunityEventBoostForNetwork> list = new List<PlayerCommunityEventBoostForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerCommunityEventBoostForNetwork item = ArrayManager.ReadPlayerCommunityEventBoostForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025B4 RID: 9652 RVA: 0x000E8074 File Offset: 0x000E6274
		public static void WritePlayerCommunityEventsForNetwork(ref byte[] data, ref int offset, PlayerCommunityEventsForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025B5 RID: 9653 RVA: 0x000E8090 File Offset: 0x000E6290
		public static void WriteListPlayerCommunityEventsForNetwork(ref byte[] data, ref int offset, List<PlayerCommunityEventsForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerCommunityEventsForNetwork value in values)
			{
				ArrayManager.WritePlayerCommunityEventsForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025B6 RID: 9654 RVA: 0x000E810C File Offset: 0x000E630C
		public static PlayerCommunityEventsForNetwork ReadPlayerCommunityEventsForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerCommunityEventsForNetwork playerCommunityEventsForNetwork = new PlayerCommunityEventsForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerCommunityEventsForNetwork.DeserializeMessage(array);
			return playerCommunityEventsForNetwork;
		}

		// Token: 0x060025B7 RID: 9655 RVA: 0x000E8150 File Offset: 0x000E6350
		public static List<PlayerCommunityEventsForNetwork> ReadListPlayerCommunityEventsForNetwork(byte[] data, ref int offset)
		{
			List<PlayerCommunityEventsForNetwork> list = new List<PlayerCommunityEventsForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerCommunityEventsForNetwork item = ArrayManager.ReadPlayerCommunityEventsForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025B8 RID: 9656 RVA: 0x000E8194 File Offset: 0x000E6394
		public static void WriteCommunityEventDataRequest(ref byte[] data, ref int offset, CommunityEventDataRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025B9 RID: 9657 RVA: 0x000E81B0 File Offset: 0x000E63B0
		public static void WriteListCommunityEventDataRequest(ref byte[] data, ref int offset, List<CommunityEventDataRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventDataRequest value in values)
			{
				ArrayManager.WriteCommunityEventDataRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x060025BA RID: 9658 RVA: 0x000E822C File Offset: 0x000E642C
		public static CommunityEventDataRequest ReadCommunityEventDataRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventDataRequest communityEventDataRequest = new CommunityEventDataRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventDataRequest.DeserializeMessage(array);
			return communityEventDataRequest;
		}

		// Token: 0x060025BB RID: 9659 RVA: 0x000E8270 File Offset: 0x000E6470
		public static List<CommunityEventDataRequest> ReadListCommunityEventDataRequest(byte[] data, ref int offset)
		{
			List<CommunityEventDataRequest> list = new List<CommunityEventDataRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventDataRequest item = ArrayManager.ReadCommunityEventDataRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025BC RID: 9660 RVA: 0x000E82B4 File Offset: 0x000E64B4
		public static void WriteCommunityEventDataResponse(ref byte[] data, ref int offset, CommunityEventDataResponse value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025BD RID: 9661 RVA: 0x000E82D0 File Offset: 0x000E64D0
		public static void WriteListCommunityEventDataResponse(ref byte[] data, ref int offset, List<CommunityEventDataResponse> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CommunityEventDataResponse value in values)
			{
				ArrayManager.WriteCommunityEventDataResponse(ref data, ref offset, value);
			}
		}

		// Token: 0x060025BE RID: 9662 RVA: 0x000E834C File Offset: 0x000E654C
		public static CommunityEventDataResponse ReadCommunityEventDataResponse(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CommunityEventDataResponse communityEventDataResponse = new CommunityEventDataResponse();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			communityEventDataResponse.DeserializeMessage(array);
			return communityEventDataResponse;
		}

		// Token: 0x060025BF RID: 9663 RVA: 0x000E8390 File Offset: 0x000E6590
		public static List<CommunityEventDataResponse> ReadListCommunityEventDataResponse(byte[] data, ref int offset)
		{
			List<CommunityEventDataResponse> list = new List<CommunityEventDataResponse>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CommunityEventDataResponse item = ArrayManager.ReadCommunityEventDataResponse(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025C0 RID: 9664 RVA: 0x000E83D4 File Offset: 0x000E65D4
		public static void WritePushPlayerCommunityEventsListForNetwork(ref byte[] data, ref int offset, PushPlayerCommunityEventsListForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025C1 RID: 9665 RVA: 0x000E83F0 File Offset: 0x000E65F0
		public static void WriteListPushPlayerCommunityEventsListForNetwork(ref byte[] data, ref int offset, List<PushPlayerCommunityEventsListForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerCommunityEventsListForNetwork value in values)
			{
				ArrayManager.WritePushPlayerCommunityEventsListForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025C2 RID: 9666 RVA: 0x000E846C File Offset: 0x000E666C
		public static PushPlayerCommunityEventsListForNetwork ReadPushPlayerCommunityEventsListForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerCommunityEventsListForNetwork pushPlayerCommunityEventsListForNetwork = new PushPlayerCommunityEventsListForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerCommunityEventsListForNetwork.DeserializeMessage(array);
			return pushPlayerCommunityEventsListForNetwork;
		}

		// Token: 0x060025C3 RID: 9667 RVA: 0x000E84B0 File Offset: 0x000E66B0
		public static List<PushPlayerCommunityEventsListForNetwork> ReadListPushPlayerCommunityEventsListForNetwork(byte[] data, ref int offset)
		{
			List<PushPlayerCommunityEventsListForNetwork> list = new List<PushPlayerCommunityEventsListForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerCommunityEventsListForNetwork item = ArrayManager.ReadPushPlayerCommunityEventsListForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025C4 RID: 9668 RVA: 0x000E84F4 File Offset: 0x000E66F4
		public static void WriteRequestKeystoneReroll(ref byte[] data, ref int offset, RequestKeystoneReroll value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025C5 RID: 9669 RVA: 0x000E8510 File Offset: 0x000E6710
		public static void WriteListRequestKeystoneReroll(ref byte[] data, ref int offset, List<RequestKeystoneReroll> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestKeystoneReroll value in values)
			{
				ArrayManager.WriteRequestKeystoneReroll(ref data, ref offset, value);
			}
		}

		// Token: 0x060025C6 RID: 9670 RVA: 0x000E858C File Offset: 0x000E678C
		public static RequestKeystoneReroll ReadRequestKeystoneReroll(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestKeystoneReroll requestKeystoneReroll = new RequestKeystoneReroll();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestKeystoneReroll.DeserializeMessage(array);
			return requestKeystoneReroll;
		}

		// Token: 0x060025C7 RID: 9671 RVA: 0x000E85D0 File Offset: 0x000E67D0
		public static List<RequestKeystoneReroll> ReadListRequestKeystoneReroll(byte[] data, ref int offset)
		{
			List<RequestKeystoneReroll> list = new List<RequestKeystoneReroll>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestKeystoneReroll item = ArrayManager.ReadRequestKeystoneReroll(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025C8 RID: 9672 RVA: 0x000E8614 File Offset: 0x000E6814
		public static void WriteResponseKeystoneReroll(ref byte[] data, ref int offset, ResponseKeystoneReroll value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025C9 RID: 9673 RVA: 0x000E8630 File Offset: 0x000E6830
		public static void WriteListResponseKeystoneReroll(ref byte[] data, ref int offset, List<ResponseKeystoneReroll> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseKeystoneReroll value in values)
			{
				ArrayManager.WriteResponseKeystoneReroll(ref data, ref offset, value);
			}
		}

		// Token: 0x060025CA RID: 9674 RVA: 0x000E86AC File Offset: 0x000E68AC
		public static ResponseKeystoneReroll ReadResponseKeystoneReroll(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseKeystoneReroll responseKeystoneReroll = new ResponseKeystoneReroll();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseKeystoneReroll.DeserializeMessage(array);
			return responseKeystoneReroll;
		}

		// Token: 0x060025CB RID: 9675 RVA: 0x000E86F0 File Offset: 0x000E68F0
		public static List<ResponseKeystoneReroll> ReadListResponseKeystoneReroll(byte[] data, ref int offset)
		{
			List<ResponseKeystoneReroll> list = new List<ResponseKeystoneReroll>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseKeystoneReroll item = ArrayManager.ReadResponseKeystoneReroll(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025CC RID: 9676 RVA: 0x000E8734 File Offset: 0x000E6934
		public static void WriteRequestAcceptKeystoneRollResult(ref byte[] data, ref int offset, RequestAcceptKeystoneRollResult value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025CD RID: 9677 RVA: 0x000E8750 File Offset: 0x000E6950
		public static void WriteListRequestAcceptKeystoneRollResult(ref byte[] data, ref int offset, List<RequestAcceptKeystoneRollResult> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestAcceptKeystoneRollResult value in values)
			{
				ArrayManager.WriteRequestAcceptKeystoneRollResult(ref data, ref offset, value);
			}
		}

		// Token: 0x060025CE RID: 9678 RVA: 0x000E87CC File Offset: 0x000E69CC
		public static RequestAcceptKeystoneRollResult ReadRequestAcceptKeystoneRollResult(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestAcceptKeystoneRollResult requestAcceptKeystoneRollResult = new RequestAcceptKeystoneRollResult();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestAcceptKeystoneRollResult.DeserializeMessage(array);
			return requestAcceptKeystoneRollResult;
		}

		// Token: 0x060025CF RID: 9679 RVA: 0x000E8810 File Offset: 0x000E6A10
		public static List<RequestAcceptKeystoneRollResult> ReadListRequestAcceptKeystoneRollResult(byte[] data, ref int offset)
		{
			List<RequestAcceptKeystoneRollResult> list = new List<RequestAcceptKeystoneRollResult>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestAcceptKeystoneRollResult item = ArrayManager.ReadRequestAcceptKeystoneRollResult(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025D0 RID: 9680 RVA: 0x000E8854 File Offset: 0x000E6A54
		public static void WriteResponseAcceptKeystoneRollResult(ref byte[] data, ref int offset, ResponseAcceptKeystoneRollResult value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025D1 RID: 9681 RVA: 0x000E8870 File Offset: 0x000E6A70
		public static void WriteListResponseAcceptKeystoneRollResult(ref byte[] data, ref int offset, List<ResponseAcceptKeystoneRollResult> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseAcceptKeystoneRollResult value in values)
			{
				ArrayManager.WriteResponseAcceptKeystoneRollResult(ref data, ref offset, value);
			}
		}

		// Token: 0x060025D2 RID: 9682 RVA: 0x000E88EC File Offset: 0x000E6AEC
		public static ResponseAcceptKeystoneRollResult ReadResponseAcceptKeystoneRollResult(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseAcceptKeystoneRollResult responseAcceptKeystoneRollResult = new ResponseAcceptKeystoneRollResult();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseAcceptKeystoneRollResult.DeserializeMessage(array);
			return responseAcceptKeystoneRollResult;
		}

		// Token: 0x060025D3 RID: 9683 RVA: 0x000E8930 File Offset: 0x000E6B30
		public static List<ResponseAcceptKeystoneRollResult> ReadListResponseAcceptKeystoneRollResult(byte[] data, ref int offset)
		{
			List<ResponseAcceptKeystoneRollResult> list = new List<ResponseAcceptKeystoneRollResult>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseAcceptKeystoneRollResult item = ArrayManager.ReadResponseAcceptKeystoneRollResult(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025D4 RID: 9684 RVA: 0x000E8974 File Offset: 0x000E6B74
		public static void WriteRequestStreamerAPIStateChange(ref byte[] data, ref int offset, RequestStreamerAPIStateChange value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025D5 RID: 9685 RVA: 0x000E8990 File Offset: 0x000E6B90
		public static void WriteListRequestStreamerAPIStateChange(ref byte[] data, ref int offset, List<RequestStreamerAPIStateChange> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestStreamerAPIStateChange value in values)
			{
				ArrayManager.WriteRequestStreamerAPIStateChange(ref data, ref offset, value);
			}
		}

		// Token: 0x060025D6 RID: 9686 RVA: 0x000E8A0C File Offset: 0x000E6C0C
		public static RequestStreamerAPIStateChange ReadRequestStreamerAPIStateChange(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestStreamerAPIStateChange requestStreamerAPIStateChange = new RequestStreamerAPIStateChange();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestStreamerAPIStateChange.DeserializeMessage(array);
			return requestStreamerAPIStateChange;
		}

		// Token: 0x060025D7 RID: 9687 RVA: 0x000E8A50 File Offset: 0x000E6C50
		public static List<RequestStreamerAPIStateChange> ReadListRequestStreamerAPIStateChange(byte[] data, ref int offset)
		{
			List<RequestStreamerAPIStateChange> list = new List<RequestStreamerAPIStateChange>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestStreamerAPIStateChange item = ArrayManager.ReadRequestStreamerAPIStateChange(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025D8 RID: 9688 RVA: 0x000E8A94 File Offset: 0x000E6C94
		public static void WriteResponseStreamerAPIStateChange(ref byte[] data, ref int offset, ResponseStreamerAPIStateChange value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025D9 RID: 9689 RVA: 0x000E8AB0 File Offset: 0x000E6CB0
		public static void WriteListResponseStreamerAPIStateChange(ref byte[] data, ref int offset, List<ResponseStreamerAPIStateChange> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseStreamerAPIStateChange value in values)
			{
				ArrayManager.WriteResponseStreamerAPIStateChange(ref data, ref offset, value);
			}
		}

		// Token: 0x060025DA RID: 9690 RVA: 0x000E8B2C File Offset: 0x000E6D2C
		public static ResponseStreamerAPIStateChange ReadResponseStreamerAPIStateChange(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseStreamerAPIStateChange responseStreamerAPIStateChange = new ResponseStreamerAPIStateChange();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseStreamerAPIStateChange.DeserializeMessage(array);
			return responseStreamerAPIStateChange;
		}

		// Token: 0x060025DB RID: 9691 RVA: 0x000E8B70 File Offset: 0x000E6D70
		public static List<ResponseStreamerAPIStateChange> ReadListResponseStreamerAPIStateChange(byte[] data, ref int offset)
		{
			List<ResponseStreamerAPIStateChange> list = new List<ResponseStreamerAPIStateChange>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseStreamerAPIStateChange item = ArrayManager.ReadResponseStreamerAPIStateChange(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025DC RID: 9692 RVA: 0x000E8BB4 File Offset: 0x000E6DB4
		public static void WriteSabotageRankingDefinitionForNetwork(ref byte[] data, ref int offset, SabotageRankingDefinitionForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025DD RID: 9693 RVA: 0x000E8BD0 File Offset: 0x000E6DD0
		public static void WriteListSabotageRankingDefinitionForNetwork(ref byte[] data, ref int offset, List<SabotageRankingDefinitionForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SabotageRankingDefinitionForNetwork value in values)
			{
				ArrayManager.WriteSabotageRankingDefinitionForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025DE RID: 9694 RVA: 0x000E8C4C File Offset: 0x000E6E4C
		public static SabotageRankingDefinitionForNetwork ReadSabotageRankingDefinitionForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SabotageRankingDefinitionForNetwork sabotageRankingDefinitionForNetwork = new SabotageRankingDefinitionForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			sabotageRankingDefinitionForNetwork.DeserializeMessage(array);
			return sabotageRankingDefinitionForNetwork;
		}

		// Token: 0x060025DF RID: 9695 RVA: 0x000E8C90 File Offset: 0x000E6E90
		public static List<SabotageRankingDefinitionForNetwork> ReadListSabotageRankingDefinitionForNetwork(byte[] data, ref int offset)
		{
			List<SabotageRankingDefinitionForNetwork> list = new List<SabotageRankingDefinitionForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SabotageRankingDefinitionForNetwork item = ArrayManager.ReadSabotageRankingDefinitionForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025E0 RID: 9696 RVA: 0x000E8CD4 File Offset: 0x000E6ED4
		public static void WritePushSabotageRankingDefinition(ref byte[] data, ref int offset, PushSabotageRankingDefinition value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025E1 RID: 9697 RVA: 0x000E8CF0 File Offset: 0x000E6EF0
		public static void WriteListPushSabotageRankingDefinition(ref byte[] data, ref int offset, List<PushSabotageRankingDefinition> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushSabotageRankingDefinition value in values)
			{
				ArrayManager.WritePushSabotageRankingDefinition(ref data, ref offset, value);
			}
		}

		// Token: 0x060025E2 RID: 9698 RVA: 0x000E8D6C File Offset: 0x000E6F6C
		public static PushSabotageRankingDefinition ReadPushSabotageRankingDefinition(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushSabotageRankingDefinition pushSabotageRankingDefinition = new PushSabotageRankingDefinition();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushSabotageRankingDefinition.DeserializeMessage(array);
			return pushSabotageRankingDefinition;
		}

		// Token: 0x060025E3 RID: 9699 RVA: 0x000E8DB0 File Offset: 0x000E6FB0
		public static List<PushSabotageRankingDefinition> ReadListPushSabotageRankingDefinition(byte[] data, ref int offset)
		{
			List<PushSabotageRankingDefinition> list = new List<PushSabotageRankingDefinition>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushSabotageRankingDefinition item = ArrayManager.ReadPushSabotageRankingDefinition(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025E4 RID: 9700 RVA: 0x000E8DF4 File Offset: 0x000E6FF4
		public static void WriteLeaderboardPlayerInfoForNetwork(ref byte[] data, ref int offset, LeaderboardPlayerInfoForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025E5 RID: 9701 RVA: 0x000E8E10 File Offset: 0x000E7010
		public static void WriteListLeaderboardPlayerInfoForNetwork(ref byte[] data, ref int offset, List<LeaderboardPlayerInfoForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LeaderboardPlayerInfoForNetwork value in values)
			{
				ArrayManager.WriteLeaderboardPlayerInfoForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025E6 RID: 9702 RVA: 0x000E8E8C File Offset: 0x000E708C
		public static LeaderboardPlayerInfoForNetwork ReadLeaderboardPlayerInfoForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LeaderboardPlayerInfoForNetwork leaderboardPlayerInfoForNetwork = new LeaderboardPlayerInfoForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			leaderboardPlayerInfoForNetwork.DeserializeMessage(array);
			return leaderboardPlayerInfoForNetwork;
		}

		// Token: 0x060025E7 RID: 9703 RVA: 0x000E8ED0 File Offset: 0x000E70D0
		public static List<LeaderboardPlayerInfoForNetwork> ReadListLeaderboardPlayerInfoForNetwork(byte[] data, ref int offset)
		{
			List<LeaderboardPlayerInfoForNetwork> list = new List<LeaderboardPlayerInfoForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LeaderboardPlayerInfoForNetwork item = ArrayManager.ReadLeaderboardPlayerInfoForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025E8 RID: 9704 RVA: 0x000E8F14 File Offset: 0x000E7114
		public static void WriteRequestSabotagePlayerInfo(ref byte[] data, ref int offset, RequestSabotagePlayerInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025E9 RID: 9705 RVA: 0x000E8F30 File Offset: 0x000E7130
		public static void WriteListRequestSabotagePlayerInfo(ref byte[] data, ref int offset, List<RequestSabotagePlayerInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSabotagePlayerInfo value in values)
			{
				ArrayManager.WriteRequestSabotagePlayerInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x060025EA RID: 9706 RVA: 0x000E8FAC File Offset: 0x000E71AC
		public static RequestSabotagePlayerInfo ReadRequestSabotagePlayerInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSabotagePlayerInfo requestSabotagePlayerInfo = new RequestSabotagePlayerInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSabotagePlayerInfo.DeserializeMessage(array);
			return requestSabotagePlayerInfo;
		}

		// Token: 0x060025EB RID: 9707 RVA: 0x000E8FF0 File Offset: 0x000E71F0
		public static List<RequestSabotagePlayerInfo> ReadListRequestSabotagePlayerInfo(byte[] data, ref int offset)
		{
			List<RequestSabotagePlayerInfo> list = new List<RequestSabotagePlayerInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSabotagePlayerInfo item = ArrayManager.ReadRequestSabotagePlayerInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025EC RID: 9708 RVA: 0x000E9034 File Offset: 0x000E7234
		public static void WriteSabotagePlayerInfoForNetwork(ref byte[] data, ref int offset, SabotagePlayerInfoForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025ED RID: 9709 RVA: 0x000E9050 File Offset: 0x000E7250
		public static void WriteListSabotagePlayerInfoForNetwork(ref byte[] data, ref int offset, List<SabotagePlayerInfoForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SabotagePlayerInfoForNetwork value in values)
			{
				ArrayManager.WriteSabotagePlayerInfoForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025EE RID: 9710 RVA: 0x000E90CC File Offset: 0x000E72CC
		public static SabotagePlayerInfoForNetwork ReadSabotagePlayerInfoForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SabotagePlayerInfoForNetwork sabotagePlayerInfoForNetwork = new SabotagePlayerInfoForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			sabotagePlayerInfoForNetwork.DeserializeMessage(array);
			return sabotagePlayerInfoForNetwork;
		}

		// Token: 0x060025EF RID: 9711 RVA: 0x000E9110 File Offset: 0x000E7310
		public static List<SabotagePlayerInfoForNetwork> ReadListSabotagePlayerInfoForNetwork(byte[] data, ref int offset)
		{
			List<SabotagePlayerInfoForNetwork> list = new List<SabotagePlayerInfoForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SabotagePlayerInfoForNetwork item = ArrayManager.ReadSabotagePlayerInfoForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025F0 RID: 9712 RVA: 0x000E9154 File Offset: 0x000E7354
		public static void WriteResponseSabotagePlayerInfo(ref byte[] data, ref int offset, ResponseSabotagePlayerInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025F1 RID: 9713 RVA: 0x000E9170 File Offset: 0x000E7370
		public static void WriteListResponseSabotagePlayerInfo(ref byte[] data, ref int offset, List<ResponseSabotagePlayerInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSabotagePlayerInfo value in values)
			{
				ArrayManager.WriteResponseSabotagePlayerInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x060025F2 RID: 9714 RVA: 0x000E91EC File Offset: 0x000E73EC
		public static ResponseSabotagePlayerInfo ReadResponseSabotagePlayerInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSabotagePlayerInfo responseSabotagePlayerInfo = new ResponseSabotagePlayerInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSabotagePlayerInfo.DeserializeMessage(array);
			return responseSabotagePlayerInfo;
		}

		// Token: 0x060025F3 RID: 9715 RVA: 0x000E9230 File Offset: 0x000E7430
		public static List<ResponseSabotagePlayerInfo> ReadListResponseSabotagePlayerInfo(byte[] data, ref int offset)
		{
			List<ResponseSabotagePlayerInfo> list = new List<ResponseSabotagePlayerInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSabotagePlayerInfo item = ArrayManager.ReadResponseSabotagePlayerInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025F4 RID: 9716 RVA: 0x000E9274 File Offset: 0x000E7474
		public static void WriteRequestSabotageGuildInfo(ref byte[] data, ref int offset, RequestSabotageGuildInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025F5 RID: 9717 RVA: 0x000E9290 File Offset: 0x000E7490
		public static void WriteListRequestSabotageGuildInfo(ref byte[] data, ref int offset, List<RequestSabotageGuildInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSabotageGuildInfo value in values)
			{
				ArrayManager.WriteRequestSabotageGuildInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x060025F6 RID: 9718 RVA: 0x000E930C File Offset: 0x000E750C
		public static RequestSabotageGuildInfo ReadRequestSabotageGuildInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSabotageGuildInfo requestSabotageGuildInfo = new RequestSabotageGuildInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSabotageGuildInfo.DeserializeMessage(array);
			return requestSabotageGuildInfo;
		}

		// Token: 0x060025F7 RID: 9719 RVA: 0x000E9350 File Offset: 0x000E7550
		public static List<RequestSabotageGuildInfo> ReadListRequestSabotageGuildInfo(byte[] data, ref int offset)
		{
			List<RequestSabotageGuildInfo> list = new List<RequestSabotageGuildInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSabotageGuildInfo item = ArrayManager.ReadRequestSabotageGuildInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025F8 RID: 9720 RVA: 0x000E9394 File Offset: 0x000E7594
		public static void WriteSabotageGuildInfoForNetwork(ref byte[] data, ref int offset, SabotageGuildInfoForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025F9 RID: 9721 RVA: 0x000E93B0 File Offset: 0x000E75B0
		public static void WriteListSabotageGuildInfoForNetwork(ref byte[] data, ref int offset, List<SabotageGuildInfoForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (SabotageGuildInfoForNetwork value in values)
			{
				ArrayManager.WriteSabotageGuildInfoForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x060025FA RID: 9722 RVA: 0x000E942C File Offset: 0x000E762C
		public static SabotageGuildInfoForNetwork ReadSabotageGuildInfoForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			SabotageGuildInfoForNetwork sabotageGuildInfoForNetwork = new SabotageGuildInfoForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			sabotageGuildInfoForNetwork.DeserializeMessage(array);
			return sabotageGuildInfoForNetwork;
		}

		// Token: 0x060025FB RID: 9723 RVA: 0x000E9470 File Offset: 0x000E7670
		public static List<SabotageGuildInfoForNetwork> ReadListSabotageGuildInfoForNetwork(byte[] data, ref int offset)
		{
			List<SabotageGuildInfoForNetwork> list = new List<SabotageGuildInfoForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				SabotageGuildInfoForNetwork item = ArrayManager.ReadSabotageGuildInfoForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060025FC RID: 9724 RVA: 0x000E94B4 File Offset: 0x000E76B4
		public static void WriteResponseSabotageGuildInfo(ref byte[] data, ref int offset, ResponseSabotageGuildInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060025FD RID: 9725 RVA: 0x000E94D0 File Offset: 0x000E76D0
		public static void WriteListResponseSabotageGuildInfo(ref byte[] data, ref int offset, List<ResponseSabotageGuildInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSabotageGuildInfo value in values)
			{
				ArrayManager.WriteResponseSabotageGuildInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x060025FE RID: 9726 RVA: 0x000E954C File Offset: 0x000E774C
		public static ResponseSabotageGuildInfo ReadResponseSabotageGuildInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSabotageGuildInfo responseSabotageGuildInfo = new ResponseSabotageGuildInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSabotageGuildInfo.DeserializeMessage(array);
			return responseSabotageGuildInfo;
		}

		// Token: 0x060025FF RID: 9727 RVA: 0x000E9590 File Offset: 0x000E7790
		public static List<ResponseSabotageGuildInfo> ReadListResponseSabotageGuildInfo(byte[] data, ref int offset)
		{
			List<ResponseSabotageGuildInfo> list = new List<ResponseSabotageGuildInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSabotageGuildInfo item = ArrayManager.ReadResponseSabotageGuildInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002600 RID: 9728 RVA: 0x000E95D4 File Offset: 0x000E77D4
		public static void WriteRequestLeaderboardInfo(ref byte[] data, ref int offset, RequestLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002601 RID: 9729 RVA: 0x000E95F0 File Offset: 0x000E77F0
		public static void WriteListRequestLeaderboardInfo(ref byte[] data, ref int offset, List<RequestLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLeaderboardInfo value in values)
			{
				ArrayManager.WriteRequestLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06002602 RID: 9730 RVA: 0x000E966C File Offset: 0x000E786C
		public static RequestLeaderboardInfo ReadRequestLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLeaderboardInfo requestLeaderboardInfo = new RequestLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLeaderboardInfo.DeserializeMessage(array);
			return requestLeaderboardInfo;
		}

		// Token: 0x06002603 RID: 9731 RVA: 0x000E96B0 File Offset: 0x000E78B0
		public static List<RequestLeaderboardInfo> ReadListRequestLeaderboardInfo(byte[] data, ref int offset)
		{
			List<RequestLeaderboardInfo> list = new List<RequestLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLeaderboardInfo item = ArrayManager.ReadRequestLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002604 RID: 9732 RVA: 0x000E96F4 File Offset: 0x000E78F4
		public static void WriteResponseLeaderboardInfo(ref byte[] data, ref int offset, ResponseLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002605 RID: 9733 RVA: 0x000E9710 File Offset: 0x000E7910
		public static void WriteListResponseLeaderboardInfo(ref byte[] data, ref int offset, List<ResponseLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseLeaderboardInfo value in values)
			{
				ArrayManager.WriteResponseLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06002606 RID: 9734 RVA: 0x000E978C File Offset: 0x000E798C
		public static ResponseLeaderboardInfo ReadResponseLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseLeaderboardInfo responseLeaderboardInfo = new ResponseLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseLeaderboardInfo.DeserializeMessage(array);
			return responseLeaderboardInfo;
		}

		// Token: 0x06002607 RID: 9735 RVA: 0x000E97D0 File Offset: 0x000E79D0
		public static List<ResponseLeaderboardInfo> ReadListResponseLeaderboardInfo(byte[] data, ref int offset)
		{
			List<ResponseLeaderboardInfo> list = new List<ResponseLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseLeaderboardInfo item = ArrayManager.ReadResponseLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002608 RID: 9736 RVA: 0x000E9814 File Offset: 0x000E7A14
		public static void WriteRequestChallengeLeaderboardInfo(ref byte[] data, ref int offset, RequestChallengeLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002609 RID: 9737 RVA: 0x000E9830 File Offset: 0x000E7A30
		public static void WriteListRequestChallengeLeaderboardInfo(ref byte[] data, ref int offset, List<RequestChallengeLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestChallengeLeaderboardInfo value in values)
			{
				ArrayManager.WriteRequestChallengeLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x0600260A RID: 9738 RVA: 0x000E98AC File Offset: 0x000E7AAC
		public static RequestChallengeLeaderboardInfo ReadRequestChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestChallengeLeaderboardInfo requestChallengeLeaderboardInfo = new RequestChallengeLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestChallengeLeaderboardInfo.DeserializeMessage(array);
			return requestChallengeLeaderboardInfo;
		}

		// Token: 0x0600260B RID: 9739 RVA: 0x000E98F0 File Offset: 0x000E7AF0
		public static List<RequestChallengeLeaderboardInfo> ReadListRequestChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			List<RequestChallengeLeaderboardInfo> list = new List<RequestChallengeLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestChallengeLeaderboardInfo item = ArrayManager.ReadRequestChallengeLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600260C RID: 9740 RVA: 0x000E9934 File Offset: 0x000E7B34
		public static void WriteResponseChallengeLeaderboardInfo(ref byte[] data, ref int offset, ResponseChallengeLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600260D RID: 9741 RVA: 0x000E9950 File Offset: 0x000E7B50
		public static void WriteListResponseChallengeLeaderboardInfo(ref byte[] data, ref int offset, List<ResponseChallengeLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseChallengeLeaderboardInfo value in values)
			{
				ArrayManager.WriteResponseChallengeLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x0600260E RID: 9742 RVA: 0x000E99CC File Offset: 0x000E7BCC
		public static ResponseChallengeLeaderboardInfo ReadResponseChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseChallengeLeaderboardInfo responseChallengeLeaderboardInfo = new ResponseChallengeLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseChallengeLeaderboardInfo.DeserializeMessage(array);
			return responseChallengeLeaderboardInfo;
		}

		// Token: 0x0600260F RID: 9743 RVA: 0x000E9A10 File Offset: 0x000E7C10
		public static List<ResponseChallengeLeaderboardInfo> ReadListResponseChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			List<ResponseChallengeLeaderboardInfo> list = new List<ResponseChallengeLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseChallengeLeaderboardInfo item = ArrayManager.ReadResponseChallengeLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002610 RID: 9744 RVA: 0x000E9A54 File Offset: 0x000E7C54
		public static void WriteRequestPreviousChallengeLeaderboardInfo(ref byte[] data, ref int offset, RequestPreviousChallengeLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002611 RID: 9745 RVA: 0x000E9A70 File Offset: 0x000E7C70
		public static void WriteListRequestPreviousChallengeLeaderboardInfo(ref byte[] data, ref int offset, List<RequestPreviousChallengeLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPreviousChallengeLeaderboardInfo value in values)
			{
				ArrayManager.WriteRequestPreviousChallengeLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06002612 RID: 9746 RVA: 0x000E9AEC File Offset: 0x000E7CEC
		public static RequestPreviousChallengeLeaderboardInfo ReadRequestPreviousChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPreviousChallengeLeaderboardInfo requestPreviousChallengeLeaderboardInfo = new RequestPreviousChallengeLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPreviousChallengeLeaderboardInfo.DeserializeMessage(array);
			return requestPreviousChallengeLeaderboardInfo;
		}

		// Token: 0x06002613 RID: 9747 RVA: 0x000E9B30 File Offset: 0x000E7D30
		public static List<RequestPreviousChallengeLeaderboardInfo> ReadListRequestPreviousChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			List<RequestPreviousChallengeLeaderboardInfo> list = new List<RequestPreviousChallengeLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPreviousChallengeLeaderboardInfo item = ArrayManager.ReadRequestPreviousChallengeLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002614 RID: 9748 RVA: 0x000E9B74 File Offset: 0x000E7D74
		public static void WriteResponsePreviousChallengeLeaderboardInfo(ref byte[] data, ref int offset, ResponsePreviousChallengeLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002615 RID: 9749 RVA: 0x000E9B90 File Offset: 0x000E7D90
		public static void WriteListResponsePreviousChallengeLeaderboardInfo(ref byte[] data, ref int offset, List<ResponsePreviousChallengeLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePreviousChallengeLeaderboardInfo value in values)
			{
				ArrayManager.WriteResponsePreviousChallengeLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06002616 RID: 9750 RVA: 0x000E9C0C File Offset: 0x000E7E0C
		public static ResponsePreviousChallengeLeaderboardInfo ReadResponsePreviousChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePreviousChallengeLeaderboardInfo responsePreviousChallengeLeaderboardInfo = new ResponsePreviousChallengeLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePreviousChallengeLeaderboardInfo.DeserializeMessage(array);
			return responsePreviousChallengeLeaderboardInfo;
		}

		// Token: 0x06002617 RID: 9751 RVA: 0x000E9C50 File Offset: 0x000E7E50
		public static List<ResponsePreviousChallengeLeaderboardInfo> ReadListResponsePreviousChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			List<ResponsePreviousChallengeLeaderboardInfo> list = new List<ResponsePreviousChallengeLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePreviousChallengeLeaderboardInfo item = ArrayManager.ReadResponsePreviousChallengeLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002618 RID: 9752 RVA: 0x000E9C94 File Offset: 0x000E7E94
		public static void WriteRequestCurrentChallengeLeaderboardInfo(ref byte[] data, ref int offset, RequestCurrentChallengeLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002619 RID: 9753 RVA: 0x000E9CB0 File Offset: 0x000E7EB0
		public static void WriteListRequestCurrentChallengeLeaderboardInfo(ref byte[] data, ref int offset, List<RequestCurrentChallengeLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCurrentChallengeLeaderboardInfo value in values)
			{
				ArrayManager.WriteRequestCurrentChallengeLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x0600261A RID: 9754 RVA: 0x000E9D2C File Offset: 0x000E7F2C
		public static RequestCurrentChallengeLeaderboardInfo ReadRequestCurrentChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCurrentChallengeLeaderboardInfo requestCurrentChallengeLeaderboardInfo = new RequestCurrentChallengeLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCurrentChallengeLeaderboardInfo.DeserializeMessage(array);
			return requestCurrentChallengeLeaderboardInfo;
		}

		// Token: 0x0600261B RID: 9755 RVA: 0x000E9D70 File Offset: 0x000E7F70
		public static List<RequestCurrentChallengeLeaderboardInfo> ReadListRequestCurrentChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			List<RequestCurrentChallengeLeaderboardInfo> list = new List<RequestCurrentChallengeLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCurrentChallengeLeaderboardInfo item = ArrayManager.ReadRequestCurrentChallengeLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600261C RID: 9756 RVA: 0x000E9DB4 File Offset: 0x000E7FB4
		public static void WriteResponseCurrentChallengeLeaderboardInfo(ref byte[] data, ref int offset, ResponseCurrentChallengeLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600261D RID: 9757 RVA: 0x000E9DD0 File Offset: 0x000E7FD0
		public static void WriteListResponseCurrentChallengeLeaderboardInfo(ref byte[] data, ref int offset, List<ResponseCurrentChallengeLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCurrentChallengeLeaderboardInfo value in values)
			{
				ArrayManager.WriteResponseCurrentChallengeLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x0600261E RID: 9758 RVA: 0x000E9E4C File Offset: 0x000E804C
		public static ResponseCurrentChallengeLeaderboardInfo ReadResponseCurrentChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCurrentChallengeLeaderboardInfo responseCurrentChallengeLeaderboardInfo = new ResponseCurrentChallengeLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCurrentChallengeLeaderboardInfo.DeserializeMessage(array);
			return responseCurrentChallengeLeaderboardInfo;
		}

		// Token: 0x0600261F RID: 9759 RVA: 0x000E9E90 File Offset: 0x000E8090
		public static List<ResponseCurrentChallengeLeaderboardInfo> ReadListResponseCurrentChallengeLeaderboardInfo(byte[] data, ref int offset)
		{
			List<ResponseCurrentChallengeLeaderboardInfo> list = new List<ResponseCurrentChallengeLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCurrentChallengeLeaderboardInfo item = ArrayManager.ReadResponseCurrentChallengeLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002620 RID: 9760 RVA: 0x000E9ED4 File Offset: 0x000E80D4
		public static void WriteRequestKeystoneLeaderboardInfo(ref byte[] data, ref int offset, RequestKeystoneLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002621 RID: 9761 RVA: 0x000E9EF0 File Offset: 0x000E80F0
		public static void WriteListRequestKeystoneLeaderboardInfo(ref byte[] data, ref int offset, List<RequestKeystoneLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestKeystoneLeaderboardInfo value in values)
			{
				ArrayManager.WriteRequestKeystoneLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06002622 RID: 9762 RVA: 0x000E9F6C File Offset: 0x000E816C
		public static RequestKeystoneLeaderboardInfo ReadRequestKeystoneLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestKeystoneLeaderboardInfo requestKeystoneLeaderboardInfo = new RequestKeystoneLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestKeystoneLeaderboardInfo.DeserializeMessage(array);
			return requestKeystoneLeaderboardInfo;
		}

		// Token: 0x06002623 RID: 9763 RVA: 0x000E9FB0 File Offset: 0x000E81B0
		public static List<RequestKeystoneLeaderboardInfo> ReadListRequestKeystoneLeaderboardInfo(byte[] data, ref int offset)
		{
			List<RequestKeystoneLeaderboardInfo> list = new List<RequestKeystoneLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestKeystoneLeaderboardInfo item = ArrayManager.ReadRequestKeystoneLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002624 RID: 9764 RVA: 0x000E9FF4 File Offset: 0x000E81F4
		public static void WriteResponseKeystoneLeaderboardInfo(ref byte[] data, ref int offset, ResponseKeystoneLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002625 RID: 9765 RVA: 0x000EA010 File Offset: 0x000E8210
		public static void WriteListResponseKeystoneLeaderboardInfo(ref byte[] data, ref int offset, List<ResponseKeystoneLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseKeystoneLeaderboardInfo value in values)
			{
				ArrayManager.WriteResponseKeystoneLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x06002626 RID: 9766 RVA: 0x000EA08C File Offset: 0x000E828C
		public static ResponseKeystoneLeaderboardInfo ReadResponseKeystoneLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseKeystoneLeaderboardInfo responseKeystoneLeaderboardInfo = new ResponseKeystoneLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseKeystoneLeaderboardInfo.DeserializeMessage(array);
			return responseKeystoneLeaderboardInfo;
		}

		// Token: 0x06002627 RID: 9767 RVA: 0x000EA0D0 File Offset: 0x000E82D0
		public static List<ResponseKeystoneLeaderboardInfo> ReadListResponseKeystoneLeaderboardInfo(byte[] data, ref int offset)
		{
			List<ResponseKeystoneLeaderboardInfo> list = new List<ResponseKeystoneLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseKeystoneLeaderboardInfo item = ArrayManager.ReadResponseKeystoneLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002628 RID: 9768 RVA: 0x000EA114 File Offset: 0x000E8314
		public static void WriteRequestUpdatePlayerKeystoneLeaderboardInfo(ref byte[] data, ref int offset, RequestUpdatePlayerKeystoneLeaderboardInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002629 RID: 9769 RVA: 0x000EA130 File Offset: 0x000E8330
		public static void WriteListRequestUpdatePlayerKeystoneLeaderboardInfo(ref byte[] data, ref int offset, List<RequestUpdatePlayerKeystoneLeaderboardInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestUpdatePlayerKeystoneLeaderboardInfo value in values)
			{
				ArrayManager.WriteRequestUpdatePlayerKeystoneLeaderboardInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x0600262A RID: 9770 RVA: 0x000EA1AC File Offset: 0x000E83AC
		public static RequestUpdatePlayerKeystoneLeaderboardInfo ReadRequestUpdatePlayerKeystoneLeaderboardInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestUpdatePlayerKeystoneLeaderboardInfo requestUpdatePlayerKeystoneLeaderboardInfo = new RequestUpdatePlayerKeystoneLeaderboardInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestUpdatePlayerKeystoneLeaderboardInfo.DeserializeMessage(array);
			return requestUpdatePlayerKeystoneLeaderboardInfo;
		}

		// Token: 0x0600262B RID: 9771 RVA: 0x000EA1F0 File Offset: 0x000E83F0
		public static List<RequestUpdatePlayerKeystoneLeaderboardInfo> ReadListRequestUpdatePlayerKeystoneLeaderboardInfo(byte[] data, ref int offset)
		{
			List<RequestUpdatePlayerKeystoneLeaderboardInfo> list = new List<RequestUpdatePlayerKeystoneLeaderboardInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestUpdatePlayerKeystoneLeaderboardInfo item = ArrayManager.ReadRequestUpdatePlayerKeystoneLeaderboardInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600262C RID: 9772 RVA: 0x000EA234 File Offset: 0x000E8434
		public static void WriteKeystonePlayerInfoForNetwork(ref byte[] data, ref int offset, KeystonePlayerInfoForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600262D RID: 9773 RVA: 0x000EA250 File Offset: 0x000E8450
		public static void WriteListKeystonePlayerInfoForNetwork(ref byte[] data, ref int offset, List<KeystonePlayerInfoForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (KeystonePlayerInfoForNetwork value in values)
			{
				ArrayManager.WriteKeystonePlayerInfoForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600262E RID: 9774 RVA: 0x000EA2CC File Offset: 0x000E84CC
		public static KeystonePlayerInfoForNetwork ReadKeystonePlayerInfoForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			KeystonePlayerInfoForNetwork keystonePlayerInfoForNetwork = new KeystonePlayerInfoForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			keystonePlayerInfoForNetwork.DeserializeMessage(array);
			return keystonePlayerInfoForNetwork;
		}

		// Token: 0x0600262F RID: 9775 RVA: 0x000EA310 File Offset: 0x000E8510
		public static List<KeystonePlayerInfoForNetwork> ReadListKeystonePlayerInfoForNetwork(byte[] data, ref int offset)
		{
			List<KeystonePlayerInfoForNetwork> list = new List<KeystonePlayerInfoForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				KeystonePlayerInfoForNetwork item = ArrayManager.ReadKeystonePlayerInfoForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002630 RID: 9776 RVA: 0x000EA354 File Offset: 0x000E8554
		public static void WriteRequestLobbyList(ref byte[] data, ref int offset, RequestLobbyList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002631 RID: 9777 RVA: 0x000EA370 File Offset: 0x000E8570
		public static void WriteListRequestLobbyList(ref byte[] data, ref int offset, List<RequestLobbyList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyList value in values)
			{
				ArrayManager.WriteRequestLobbyList(ref data, ref offset, value);
			}
		}

		// Token: 0x06002632 RID: 9778 RVA: 0x000EA3EC File Offset: 0x000E85EC
		public static RequestLobbyList ReadRequestLobbyList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyList requestLobbyList = new RequestLobbyList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyList.DeserializeMessage(array);
			return requestLobbyList;
		}

		// Token: 0x06002633 RID: 9779 RVA: 0x000EA430 File Offset: 0x000E8630
		public static List<RequestLobbyList> ReadListRequestLobbyList(byte[] data, ref int offset)
		{
			List<RequestLobbyList> list = new List<RequestLobbyList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyList item = ArrayManager.ReadRequestLobbyList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002634 RID: 9780 RVA: 0x000EA474 File Offset: 0x000E8674
		public static void WriteRequestBotList(ref byte[] data, ref int offset, RequestBotList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002635 RID: 9781 RVA: 0x000EA490 File Offset: 0x000E8690
		public static void WriteListRequestBotList(ref byte[] data, ref int offset, List<RequestBotList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestBotList value in values)
			{
				ArrayManager.WriteRequestBotList(ref data, ref offset, value);
			}
		}

		// Token: 0x06002636 RID: 9782 RVA: 0x000EA50C File Offset: 0x000E870C
		public static RequestBotList ReadRequestBotList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestBotList requestBotList = new RequestBotList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestBotList.DeserializeMessage(array);
			return requestBotList;
		}

		// Token: 0x06002637 RID: 9783 RVA: 0x000EA550 File Offset: 0x000E8750
		public static List<RequestBotList> ReadListRequestBotList(byte[] data, ref int offset)
		{
			List<RequestBotList> list = new List<RequestBotList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestBotList item = ArrayManager.ReadRequestBotList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002638 RID: 9784 RVA: 0x000EA594 File Offset: 0x000E8794
		public static void WriteRequestLobbyDetail(ref byte[] data, ref int offset, RequestLobbyDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002639 RID: 9785 RVA: 0x000EA5B0 File Offset: 0x000E87B0
		public static void WriteListRequestLobbyDetail(ref byte[] data, ref int offset, List<RequestLobbyDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyDetail value in values)
			{
				ArrayManager.WriteRequestLobbyDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x0600263A RID: 9786 RVA: 0x000EA62C File Offset: 0x000E882C
		public static RequestLobbyDetail ReadRequestLobbyDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyDetail requestLobbyDetail = new RequestLobbyDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyDetail.DeserializeMessage(array);
			return requestLobbyDetail;
		}

		// Token: 0x0600263B RID: 9787 RVA: 0x000EA670 File Offset: 0x000E8870
		public static List<RequestLobbyDetail> ReadListRequestLobbyDetail(byte[] data, ref int offset)
		{
			List<RequestLobbyDetail> list = new List<RequestLobbyDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyDetail item = ArrayManager.ReadRequestLobbyDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600263C RID: 9788 RVA: 0x000EA6B4 File Offset: 0x000E88B4
		public static void WriteRequestLobbyLockTeams(ref byte[] data, ref int offset, RequestLobbyLockTeams value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600263D RID: 9789 RVA: 0x000EA6D0 File Offset: 0x000E88D0
		public static void WriteListRequestLobbyLockTeams(ref byte[] data, ref int offset, List<RequestLobbyLockTeams> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyLockTeams value in values)
			{
				ArrayManager.WriteRequestLobbyLockTeams(ref data, ref offset, value);
			}
		}

		// Token: 0x0600263E RID: 9790 RVA: 0x000EA74C File Offset: 0x000E894C
		public static RequestLobbyLockTeams ReadRequestLobbyLockTeams(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyLockTeams requestLobbyLockTeams = new RequestLobbyLockTeams();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyLockTeams.DeserializeMessage(array);
			return requestLobbyLockTeams;
		}

		// Token: 0x0600263F RID: 9791 RVA: 0x000EA790 File Offset: 0x000E8990
		public static List<RequestLobbyLockTeams> ReadListRequestLobbyLockTeams(byte[] data, ref int offset)
		{
			List<RequestLobbyLockTeams> list = new List<RequestLobbyLockTeams>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyLockTeams item = ArrayManager.ReadRequestLobbyLockTeams(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002640 RID: 9792 RVA: 0x000EA7D4 File Offset: 0x000E89D4
		public static void WriteRequestDirectLobbyCreate(ref byte[] data, ref int offset, RequestDirectLobbyCreate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002641 RID: 9793 RVA: 0x000EA7F0 File Offset: 0x000E89F0
		public static void WriteListRequestDirectLobbyCreate(ref byte[] data, ref int offset, List<RequestDirectLobbyCreate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestDirectLobbyCreate value in values)
			{
				ArrayManager.WriteRequestDirectLobbyCreate(ref data, ref offset, value);
			}
		}

		// Token: 0x06002642 RID: 9794 RVA: 0x000EA86C File Offset: 0x000E8A6C
		public static RequestDirectLobbyCreate ReadRequestDirectLobbyCreate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestDirectLobbyCreate requestDirectLobbyCreate = new RequestDirectLobbyCreate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestDirectLobbyCreate.DeserializeMessage(array);
			return requestDirectLobbyCreate;
		}

		// Token: 0x06002643 RID: 9795 RVA: 0x000EA8B0 File Offset: 0x000E8AB0
		public static List<RequestDirectLobbyCreate> ReadListRequestDirectLobbyCreate(byte[] data, ref int offset)
		{
			List<RequestDirectLobbyCreate> list = new List<RequestDirectLobbyCreate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestDirectLobbyCreate item = ArrayManager.ReadRequestDirectLobbyCreate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002644 RID: 9796 RVA: 0x000EA8F4 File Offset: 0x000E8AF4
		public static void WriteRequestDirectLobbyCreateParty(ref byte[] data, ref int offset, RequestDirectLobbyCreateParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002645 RID: 9797 RVA: 0x000EA910 File Offset: 0x000E8B10
		public static void WriteListRequestDirectLobbyCreateParty(ref byte[] data, ref int offset, List<RequestDirectLobbyCreateParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestDirectLobbyCreateParty value in values)
			{
				ArrayManager.WriteRequestDirectLobbyCreateParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002646 RID: 9798 RVA: 0x000EA98C File Offset: 0x000E8B8C
		public static RequestDirectLobbyCreateParty ReadRequestDirectLobbyCreateParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestDirectLobbyCreateParty requestDirectLobbyCreateParty = new RequestDirectLobbyCreateParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestDirectLobbyCreateParty.DeserializeMessage(array);
			return requestDirectLobbyCreateParty;
		}

		// Token: 0x06002647 RID: 9799 RVA: 0x000EA9D0 File Offset: 0x000E8BD0
		public static List<RequestDirectLobbyCreateParty> ReadListRequestDirectLobbyCreateParty(byte[] data, ref int offset)
		{
			List<RequestDirectLobbyCreateParty> list = new List<RequestDirectLobbyCreateParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestDirectLobbyCreateParty item = ArrayManager.ReadRequestDirectLobbyCreateParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002648 RID: 9800 RVA: 0x000EAA14 File Offset: 0x000E8C14
		public static void WriteRequestCreateSpecialLobby(ref byte[] data, ref int offset, RequestCreateSpecialLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002649 RID: 9801 RVA: 0x000EAA30 File Offset: 0x000E8C30
		public static void WriteListRequestCreateSpecialLobby(ref byte[] data, ref int offset, List<RequestCreateSpecialLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateSpecialLobby value in values)
			{
				ArrayManager.WriteRequestCreateSpecialLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x0600264A RID: 9802 RVA: 0x000EAAAC File Offset: 0x000E8CAC
		public static RequestCreateSpecialLobby ReadRequestCreateSpecialLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateSpecialLobby requestCreateSpecialLobby = new RequestCreateSpecialLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateSpecialLobby.DeserializeMessage(array);
			return requestCreateSpecialLobby;
		}

		// Token: 0x0600264B RID: 9803 RVA: 0x000EAAF0 File Offset: 0x000E8CF0
		public static List<RequestCreateSpecialLobby> ReadListRequestCreateSpecialLobby(byte[] data, ref int offset)
		{
			List<RequestCreateSpecialLobby> list = new List<RequestCreateSpecialLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateSpecialLobby item = ArrayManager.ReadRequestCreateSpecialLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600264C RID: 9804 RVA: 0x000EAB34 File Offset: 0x000E8D34
		public static void WriteResponseCreateSpecialLobby(ref byte[] data, ref int offset, ResponseCreateSpecialLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600264D RID: 9805 RVA: 0x000EAB50 File Offset: 0x000E8D50
		public static void WriteListResponseCreateSpecialLobby(ref byte[] data, ref int offset, List<ResponseCreateSpecialLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCreateSpecialLobby value in values)
			{
				ArrayManager.WriteResponseCreateSpecialLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x0600264E RID: 9806 RVA: 0x000EABCC File Offset: 0x000E8DCC
		public static ResponseCreateSpecialLobby ReadResponseCreateSpecialLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCreateSpecialLobby responseCreateSpecialLobby = new ResponseCreateSpecialLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCreateSpecialLobby.DeserializeMessage(array);
			return responseCreateSpecialLobby;
		}

		// Token: 0x0600264F RID: 9807 RVA: 0x000EAC10 File Offset: 0x000E8E10
		public static List<ResponseCreateSpecialLobby> ReadListResponseCreateSpecialLobby(byte[] data, ref int offset)
		{
			List<ResponseCreateSpecialLobby> list = new List<ResponseCreateSpecialLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCreateSpecialLobby item = ArrayManager.ReadResponseCreateSpecialLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002650 RID: 9808 RVA: 0x000EAC54 File Offset: 0x000E8E54
		public static void WriteRequestLobbyJoin(ref byte[] data, ref int offset, RequestLobbyJoin value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002651 RID: 9809 RVA: 0x000EAC70 File Offset: 0x000E8E70
		public static void WriteListRequestLobbyJoin(ref byte[] data, ref int offset, List<RequestLobbyJoin> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyJoin value in values)
			{
				ArrayManager.WriteRequestLobbyJoin(ref data, ref offset, value);
			}
		}

		// Token: 0x06002652 RID: 9810 RVA: 0x000EACEC File Offset: 0x000E8EEC
		public static RequestLobbyJoin ReadRequestLobbyJoin(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyJoin requestLobbyJoin = new RequestLobbyJoin();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyJoin.DeserializeMessage(array);
			return requestLobbyJoin;
		}

		// Token: 0x06002653 RID: 9811 RVA: 0x000EAD30 File Offset: 0x000E8F30
		public static List<RequestLobbyJoin> ReadListRequestLobbyJoin(byte[] data, ref int offset)
		{
			List<RequestLobbyJoin> list = new List<RequestLobbyJoin>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyJoin item = ArrayManager.ReadRequestLobbyJoin(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002654 RID: 9812 RVA: 0x000EAD74 File Offset: 0x000E8F74
		public static void WriteRequestLobbyJoinForParty(ref byte[] data, ref int offset, RequestLobbyJoinForParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002655 RID: 9813 RVA: 0x000EAD90 File Offset: 0x000E8F90
		public static void WriteListRequestLobbyJoinForParty(ref byte[] data, ref int offset, List<RequestLobbyJoinForParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyJoinForParty value in values)
			{
				ArrayManager.WriteRequestLobbyJoinForParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002656 RID: 9814 RVA: 0x000EAE0C File Offset: 0x000E900C
		public static RequestLobbyJoinForParty ReadRequestLobbyJoinForParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyJoinForParty requestLobbyJoinForParty = new RequestLobbyJoinForParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyJoinForParty.DeserializeMessage(array);
			return requestLobbyJoinForParty;
		}

		// Token: 0x06002657 RID: 9815 RVA: 0x000EAE50 File Offset: 0x000E9050
		public static List<RequestLobbyJoinForParty> ReadListRequestLobbyJoinForParty(byte[] data, ref int offset)
		{
			List<RequestLobbyJoinForParty> list = new List<RequestLobbyJoinForParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyJoinForParty item = ArrayManager.ReadRequestLobbyJoinForParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002658 RID: 9816 RVA: 0x000EAE94 File Offset: 0x000E9094
		public static void WritePushLobbyJoined(ref byte[] data, ref int offset, PushLobbyJoined value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002659 RID: 9817 RVA: 0x000EAEB0 File Offset: 0x000E90B0
		public static void WriteListPushLobbyJoined(ref byte[] data, ref int offset, List<PushLobbyJoined> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushLobbyJoined value in values)
			{
				ArrayManager.WritePushLobbyJoined(ref data, ref offset, value);
			}
		}

		// Token: 0x0600265A RID: 9818 RVA: 0x000EAF2C File Offset: 0x000E912C
		public static PushLobbyJoined ReadPushLobbyJoined(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushLobbyJoined pushLobbyJoined = new PushLobbyJoined();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushLobbyJoined.DeserializeMessage(array);
			return pushLobbyJoined;
		}

		// Token: 0x0600265B RID: 9819 RVA: 0x000EAF70 File Offset: 0x000E9170
		public static List<PushLobbyJoined> ReadListPushLobbyJoined(byte[] data, ref int offset)
		{
			List<PushLobbyJoined> list = new List<PushLobbyJoined>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushLobbyJoined item = ArrayManager.ReadPushLobbyJoined(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600265C RID: 9820 RVA: 0x000EAFB4 File Offset: 0x000E91B4
		public static void WriteRequestLobbyBotJoin(ref byte[] data, ref int offset, RequestLobbyBotJoin value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600265D RID: 9821 RVA: 0x000EAFD0 File Offset: 0x000E91D0
		public static void WriteListRequestLobbyBotJoin(ref byte[] data, ref int offset, List<RequestLobbyBotJoin> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyBotJoin value in values)
			{
				ArrayManager.WriteRequestLobbyBotJoin(ref data, ref offset, value);
			}
		}

		// Token: 0x0600265E RID: 9822 RVA: 0x000EB04C File Offset: 0x000E924C
		public static RequestLobbyBotJoin ReadRequestLobbyBotJoin(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyBotJoin requestLobbyBotJoin = new RequestLobbyBotJoin();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyBotJoin.DeserializeMessage(array);
			return requestLobbyBotJoin;
		}

		// Token: 0x0600265F RID: 9823 RVA: 0x000EB090 File Offset: 0x000E9290
		public static List<RequestLobbyBotJoin> ReadListRequestLobbyBotJoin(byte[] data, ref int offset)
		{
			List<RequestLobbyBotJoin> list = new List<RequestLobbyBotJoin>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyBotJoin item = ArrayManager.ReadRequestLobbyBotJoin(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002660 RID: 9824 RVA: 0x000EB0D4 File Offset: 0x000E92D4
		public static void WriteRequestLobbyBotLeave(ref byte[] data, ref int offset, RequestLobbyBotLeave value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002661 RID: 9825 RVA: 0x000EB0F0 File Offset: 0x000E92F0
		public static void WriteListRequestLobbyBotLeave(ref byte[] data, ref int offset, List<RequestLobbyBotLeave> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyBotLeave value in values)
			{
				ArrayManager.WriteRequestLobbyBotLeave(ref data, ref offset, value);
			}
		}

		// Token: 0x06002662 RID: 9826 RVA: 0x000EB16C File Offset: 0x000E936C
		public static RequestLobbyBotLeave ReadRequestLobbyBotLeave(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyBotLeave requestLobbyBotLeave = new RequestLobbyBotLeave();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyBotLeave.DeserializeMessage(array);
			return requestLobbyBotLeave;
		}

		// Token: 0x06002663 RID: 9827 RVA: 0x000EB1B0 File Offset: 0x000E93B0
		public static List<RequestLobbyBotLeave> ReadListRequestLobbyBotLeave(byte[] data, ref int offset)
		{
			List<RequestLobbyBotLeave> list = new List<RequestLobbyBotLeave>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyBotLeave item = ArrayManager.ReadRequestLobbyBotLeave(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002664 RID: 9828 RVA: 0x000EB1F4 File Offset: 0x000E93F4
		public static void WriteRequestLobbyLeave(ref byte[] data, ref int offset, RequestLobbyLeave value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002665 RID: 9829 RVA: 0x000EB210 File Offset: 0x000E9410
		public static void WriteListRequestLobbyLeave(ref byte[] data, ref int offset, List<RequestLobbyLeave> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyLeave value in values)
			{
				ArrayManager.WriteRequestLobbyLeave(ref data, ref offset, value);
			}
		}

		// Token: 0x06002666 RID: 9830 RVA: 0x000EB28C File Offset: 0x000E948C
		public static RequestLobbyLeave ReadRequestLobbyLeave(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyLeave requestLobbyLeave = new RequestLobbyLeave();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyLeave.DeserializeMessage(array);
			return requestLobbyLeave;
		}

		// Token: 0x06002667 RID: 9831 RVA: 0x000EB2D0 File Offset: 0x000E94D0
		public static List<RequestLobbyLeave> ReadListRequestLobbyLeave(byte[] data, ref int offset)
		{
			List<RequestLobbyLeave> list = new List<RequestLobbyLeave>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyLeave item = ArrayManager.ReadRequestLobbyLeave(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002668 RID: 9832 RVA: 0x000EB314 File Offset: 0x000E9514
		public static void WriteRequestLobbySwitchOwner(ref byte[] data, ref int offset, RequestLobbySwitchOwner value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002669 RID: 9833 RVA: 0x000EB330 File Offset: 0x000E9530
		public static void WriteListRequestLobbySwitchOwner(ref byte[] data, ref int offset, List<RequestLobbySwitchOwner> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySwitchOwner value in values)
			{
				ArrayManager.WriteRequestLobbySwitchOwner(ref data, ref offset, value);
			}
		}

		// Token: 0x0600266A RID: 9834 RVA: 0x000EB3AC File Offset: 0x000E95AC
		public static RequestLobbySwitchOwner ReadRequestLobbySwitchOwner(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySwitchOwner requestLobbySwitchOwner = new RequestLobbySwitchOwner();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySwitchOwner.DeserializeMessage(array);
			return requestLobbySwitchOwner;
		}

		// Token: 0x0600266B RID: 9835 RVA: 0x000EB3F0 File Offset: 0x000E95F0
		public static List<RequestLobbySwitchOwner> ReadListRequestLobbySwitchOwner(byte[] data, ref int offset)
		{
			List<RequestLobbySwitchOwner> list = new List<RequestLobbySwitchOwner>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySwitchOwner item = ArrayManager.ReadRequestLobbySwitchOwner(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600266C RID: 9836 RVA: 0x000EB434 File Offset: 0x000E9634
		public static void WriteRequestLobbySelectTeam(ref byte[] data, ref int offset, RequestLobbySelectTeam value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600266D RID: 9837 RVA: 0x000EB450 File Offset: 0x000E9650
		public static void WriteListRequestLobbySelectTeam(ref byte[] data, ref int offset, List<RequestLobbySelectTeam> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySelectTeam value in values)
			{
				ArrayManager.WriteRequestLobbySelectTeam(ref data, ref offset, value);
			}
		}

		// Token: 0x0600266E RID: 9838 RVA: 0x000EB4CC File Offset: 0x000E96CC
		public static RequestLobbySelectTeam ReadRequestLobbySelectTeam(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySelectTeam requestLobbySelectTeam = new RequestLobbySelectTeam();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySelectTeam.DeserializeMessage(array);
			return requestLobbySelectTeam;
		}

		// Token: 0x0600266F RID: 9839 RVA: 0x000EB510 File Offset: 0x000E9710
		public static List<RequestLobbySelectTeam> ReadListRequestLobbySelectTeam(byte[] data, ref int offset)
		{
			List<RequestLobbySelectTeam> list = new List<RequestLobbySelectTeam>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySelectTeam item = ArrayManager.ReadRequestLobbySelectTeam(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002670 RID: 9840 RVA: 0x000EB554 File Offset: 0x000E9754
		public static void WriteRequestLobbySelectCharacter(ref byte[] data, ref int offset, RequestLobbySelectCharacter value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002671 RID: 9841 RVA: 0x000EB570 File Offset: 0x000E9770
		public static void WriteListRequestLobbySelectCharacter(ref byte[] data, ref int offset, List<RequestLobbySelectCharacter> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySelectCharacter value in values)
			{
				ArrayManager.WriteRequestLobbySelectCharacter(ref data, ref offset, value);
			}
		}

		// Token: 0x06002672 RID: 9842 RVA: 0x000EB5EC File Offset: 0x000E97EC
		public static RequestLobbySelectCharacter ReadRequestLobbySelectCharacter(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySelectCharacter requestLobbySelectCharacter = new RequestLobbySelectCharacter();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySelectCharacter.DeserializeMessage(array);
			return requestLobbySelectCharacter;
		}

		// Token: 0x06002673 RID: 9843 RVA: 0x000EB630 File Offset: 0x000E9830
		public static List<RequestLobbySelectCharacter> ReadListRequestLobbySelectCharacter(byte[] data, ref int offset)
		{
			List<RequestLobbySelectCharacter> list = new List<RequestLobbySelectCharacter>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySelectCharacter item = ArrayManager.ReadRequestLobbySelectCharacter(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002674 RID: 9844 RVA: 0x000EB674 File Offset: 0x000E9874
		public static void WriteRequestLobbySelectDeck(ref byte[] data, ref int offset, RequestLobbySelectDeck value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002675 RID: 9845 RVA: 0x000EB690 File Offset: 0x000E9890
		public static void WriteListRequestLobbySelectDeck(ref byte[] data, ref int offset, List<RequestLobbySelectDeck> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySelectDeck value in values)
			{
				ArrayManager.WriteRequestLobbySelectDeck(ref data, ref offset, value);
			}
		}

		// Token: 0x06002676 RID: 9846 RVA: 0x000EB70C File Offset: 0x000E990C
		public static RequestLobbySelectDeck ReadRequestLobbySelectDeck(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySelectDeck requestLobbySelectDeck = new RequestLobbySelectDeck();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySelectDeck.DeserializeMessage(array);
			return requestLobbySelectDeck;
		}

		// Token: 0x06002677 RID: 9847 RVA: 0x000EB750 File Offset: 0x000E9950
		public static List<RequestLobbySelectDeck> ReadListRequestLobbySelectDeck(byte[] data, ref int offset)
		{
			List<RequestLobbySelectDeck> list = new List<RequestLobbySelectDeck>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySelectDeck item = ArrayManager.ReadRequestLobbySelectDeck(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002678 RID: 9848 RVA: 0x000EB794 File Offset: 0x000E9994
		public static void WriteRequestLobbySelectPlayerSkin(ref byte[] data, ref int offset, RequestLobbySelectPlayerSkin value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002679 RID: 9849 RVA: 0x000EB7B0 File Offset: 0x000E99B0
		public static void WriteListRequestLobbySelectPlayerSkin(ref byte[] data, ref int offset, List<RequestLobbySelectPlayerSkin> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySelectPlayerSkin value in values)
			{
				ArrayManager.WriteRequestLobbySelectPlayerSkin(ref data, ref offset, value);
			}
		}

		// Token: 0x0600267A RID: 9850 RVA: 0x000EB82C File Offset: 0x000E9A2C
		public static RequestLobbySelectPlayerSkin ReadRequestLobbySelectPlayerSkin(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySelectPlayerSkin requestLobbySelectPlayerSkin = new RequestLobbySelectPlayerSkin();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySelectPlayerSkin.DeserializeMessage(array);
			return requestLobbySelectPlayerSkin;
		}

		// Token: 0x0600267B RID: 9851 RVA: 0x000EB870 File Offset: 0x000E9A70
		public static List<RequestLobbySelectPlayerSkin> ReadListRequestLobbySelectPlayerSkin(byte[] data, ref int offset)
		{
			List<RequestLobbySelectPlayerSkin> list = new List<RequestLobbySelectPlayerSkin>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySelectPlayerSkin item = ArrayManager.ReadRequestLobbySelectPlayerSkin(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600267C RID: 9852 RVA: 0x000EB8B4 File Offset: 0x000E9AB4
		public static void WriteRequestLobbySelectReady(ref byte[] data, ref int offset, RequestLobbySelectReady value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600267D RID: 9853 RVA: 0x000EB8D0 File Offset: 0x000E9AD0
		public static void WriteListRequestLobbySelectReady(ref byte[] data, ref int offset, List<RequestLobbySelectReady> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySelectReady value in values)
			{
				ArrayManager.WriteRequestLobbySelectReady(ref data, ref offset, value);
			}
		}

		// Token: 0x0600267E RID: 9854 RVA: 0x000EB94C File Offset: 0x000E9B4C
		public static RequestLobbySelectReady ReadRequestLobbySelectReady(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySelectReady requestLobbySelectReady = new RequestLobbySelectReady();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySelectReady.DeserializeMessage(array);
			return requestLobbySelectReady;
		}

		// Token: 0x0600267F RID: 9855 RVA: 0x000EB990 File Offset: 0x000E9B90
		public static List<RequestLobbySelectReady> ReadListRequestLobbySelectReady(byte[] data, ref int offset)
		{
			List<RequestLobbySelectReady> list = new List<RequestLobbySelectReady>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySelectReady item = ArrayManager.ReadRequestLobbySelectReady(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002680 RID: 9856 RVA: 0x000EB9D4 File Offset: 0x000E9BD4
		public static void WriteRequestLobbyStartGame(ref byte[] data, ref int offset, RequestLobbyStartGame value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002681 RID: 9857 RVA: 0x000EB9F0 File Offset: 0x000E9BF0
		public static void WriteListRequestLobbyStartGame(ref byte[] data, ref int offset, List<RequestLobbyStartGame> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyStartGame value in values)
			{
				ArrayManager.WriteRequestLobbyStartGame(ref data, ref offset, value);
			}
		}

		// Token: 0x06002682 RID: 9858 RVA: 0x000EBA6C File Offset: 0x000E9C6C
		public static RequestLobbyStartGame ReadRequestLobbyStartGame(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyStartGame requestLobbyStartGame = new RequestLobbyStartGame();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyStartGame.DeserializeMessage(array);
			return requestLobbyStartGame;
		}

		// Token: 0x06002683 RID: 9859 RVA: 0x000EBAB0 File Offset: 0x000E9CB0
		public static List<RequestLobbyStartGame> ReadListRequestLobbyStartGame(byte[] data, ref int offset)
		{
			List<RequestLobbyStartGame> list = new List<RequestLobbyStartGame>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyStartGame item = ArrayManager.ReadRequestLobbyStartGame(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002684 RID: 9860 RVA: 0x000EBAF4 File Offset: 0x000E9CF4
		public static void WriteRequestSendLobbyChat(ref byte[] data, ref int offset, RequestSendLobbyChat value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002685 RID: 9861 RVA: 0x000EBB10 File Offset: 0x000E9D10
		public static void WriteListRequestSendLobbyChat(ref byte[] data, ref int offset, List<RequestSendLobbyChat> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSendLobbyChat value in values)
			{
				ArrayManager.WriteRequestSendLobbyChat(ref data, ref offset, value);
			}
		}

		// Token: 0x06002686 RID: 9862 RVA: 0x000EBB8C File Offset: 0x000E9D8C
		public static RequestSendLobbyChat ReadRequestSendLobbyChat(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSendLobbyChat requestSendLobbyChat = new RequestSendLobbyChat();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSendLobbyChat.DeserializeMessage(array);
			return requestSendLobbyChat;
		}

		// Token: 0x06002687 RID: 9863 RVA: 0x000EBBD0 File Offset: 0x000E9DD0
		public static List<RequestSendLobbyChat> ReadListRequestSendLobbyChat(byte[] data, ref int offset)
		{
			List<RequestSendLobbyChat> list = new List<RequestSendLobbyChat>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSendLobbyChat item = ArrayManager.ReadRequestSendLobbyChat(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002688 RID: 9864 RVA: 0x000EBC14 File Offset: 0x000E9E14
		public static void WriteRequestMapList(ref byte[] data, ref int offset, RequestMapList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002689 RID: 9865 RVA: 0x000EBC30 File Offset: 0x000E9E30
		public static void WriteListRequestMapList(ref byte[] data, ref int offset, List<RequestMapList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestMapList value in values)
			{
				ArrayManager.WriteRequestMapList(ref data, ref offset, value);
			}
		}

		// Token: 0x0600268A RID: 9866 RVA: 0x000EBCAC File Offset: 0x000E9EAC
		public static RequestMapList ReadRequestMapList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestMapList requestMapList = new RequestMapList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestMapList.DeserializeMessage(array);
			return requestMapList;
		}

		// Token: 0x0600268B RID: 9867 RVA: 0x000EBCF0 File Offset: 0x000E9EF0
		public static List<RequestMapList> ReadListRequestMapList(byte[] data, ref int offset)
		{
			List<RequestMapList> list = new List<RequestMapList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestMapList item = ArrayManager.ReadRequestMapList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600268C RID: 9868 RVA: 0x000EBD34 File Offset: 0x000E9F34
		public static void WriteRequestLobbyMap(ref byte[] data, ref int offset, RequestLobbyMap value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600268D RID: 9869 RVA: 0x000EBD50 File Offset: 0x000E9F50
		public static void WriteListRequestLobbyMap(ref byte[] data, ref int offset, List<RequestLobbyMap> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyMap value in values)
			{
				ArrayManager.WriteRequestLobbyMap(ref data, ref offset, value);
			}
		}

		// Token: 0x0600268E RID: 9870 RVA: 0x000EBDCC File Offset: 0x000E9FCC
		public static RequestLobbyMap ReadRequestLobbyMap(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyMap requestLobbyMap = new RequestLobbyMap();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyMap.DeserializeMessage(array);
			return requestLobbyMap;
		}

		// Token: 0x0600268F RID: 9871 RVA: 0x000EBE10 File Offset: 0x000EA010
		public static List<RequestLobbyMap> ReadListRequestLobbyMap(byte[] data, ref int offset)
		{
			List<RequestLobbyMap> list = new List<RequestLobbyMap>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyMap item = ArrayManager.ReadRequestLobbyMap(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002690 RID: 9872 RVA: 0x000EBE54 File Offset: 0x000EA054
		public static void WriteRequestApplyLeaverPenalty(ref byte[] data, ref int offset, RequestApplyLeaverPenalty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002691 RID: 9873 RVA: 0x000EBE70 File Offset: 0x000EA070
		public static void WriteListRequestApplyLeaverPenalty(ref byte[] data, ref int offset, List<RequestApplyLeaverPenalty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestApplyLeaverPenalty value in values)
			{
				ArrayManager.WriteRequestApplyLeaverPenalty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002692 RID: 9874 RVA: 0x000EBEEC File Offset: 0x000EA0EC
		public static RequestApplyLeaverPenalty ReadRequestApplyLeaverPenalty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestApplyLeaverPenalty requestApplyLeaverPenalty = new RequestApplyLeaverPenalty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestApplyLeaverPenalty.DeserializeMessage(array);
			return requestApplyLeaverPenalty;
		}

		// Token: 0x06002693 RID: 9875 RVA: 0x000EBF30 File Offset: 0x000EA130
		public static List<RequestApplyLeaverPenalty> ReadListRequestApplyLeaverPenalty(byte[] data, ref int offset)
		{
			List<RequestApplyLeaverPenalty> list = new List<RequestApplyLeaverPenalty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestApplyLeaverPenalty item = ArrayManager.ReadRequestApplyLeaverPenalty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002694 RID: 9876 RVA: 0x000EBF74 File Offset: 0x000EA174
		public static void WriteResponseLobbyRequest(ref byte[] data, ref int offset, ResponseLobbyRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002695 RID: 9877 RVA: 0x000EBF90 File Offset: 0x000EA190
		public static void WriteListResponseLobbyRequest(ref byte[] data, ref int offset, List<ResponseLobbyRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseLobbyRequest value in values)
			{
				ArrayManager.WriteResponseLobbyRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x06002696 RID: 9878 RVA: 0x000EC00C File Offset: 0x000EA20C
		public static ResponseLobbyRequest ReadResponseLobbyRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseLobbyRequest responseLobbyRequest = new ResponseLobbyRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseLobbyRequest.DeserializeMessage(array);
			return responseLobbyRequest;
		}

		// Token: 0x06002697 RID: 9879 RVA: 0x000EC050 File Offset: 0x000EA250
		public static List<ResponseLobbyRequest> ReadListResponseLobbyRequest(byte[] data, ref int offset)
		{
			List<ResponseLobbyRequest> list = new List<ResponseLobbyRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseLobbyRequest item = ArrayManager.ReadResponseLobbyRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002698 RID: 9880 RVA: 0x000EC094 File Offset: 0x000EA294
		public static void WriteLobbyListEntry(ref byte[] data, ref int offset, LobbyListEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002699 RID: 9881 RVA: 0x000EC0B0 File Offset: 0x000EA2B0
		public static void WriteListLobbyListEntry(ref byte[] data, ref int offset, List<LobbyListEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LobbyListEntry value in values)
			{
				ArrayManager.WriteLobbyListEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x0600269A RID: 9882 RVA: 0x000EC12C File Offset: 0x000EA32C
		public static LobbyListEntry ReadLobbyListEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LobbyListEntry lobbyListEntry = new LobbyListEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			lobbyListEntry.DeserializeMessage(array);
			return lobbyListEntry;
		}

		// Token: 0x0600269B RID: 9883 RVA: 0x000EC170 File Offset: 0x000EA370
		public static List<LobbyListEntry> ReadListLobbyListEntry(byte[] data, ref int offset)
		{
			List<LobbyListEntry> list = new List<LobbyListEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LobbyListEntry item = ArrayManager.ReadLobbyListEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600269C RID: 9884 RVA: 0x000EC1B4 File Offset: 0x000EA3B4
		public static void WriteDataLobbyList(ref byte[] data, ref int offset, DataLobbyList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600269D RID: 9885 RVA: 0x000EC1D0 File Offset: 0x000EA3D0
		public static void WriteListDataLobbyList(ref byte[] data, ref int offset, List<DataLobbyList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataLobbyList value in values)
			{
				ArrayManager.WriteDataLobbyList(ref data, ref offset, value);
			}
		}

		// Token: 0x0600269E RID: 9886 RVA: 0x000EC24C File Offset: 0x000EA44C
		public static DataLobbyList ReadDataLobbyList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataLobbyList dataLobbyList = new DataLobbyList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataLobbyList.DeserializeMessage(array);
			return dataLobbyList;
		}

		// Token: 0x0600269F RID: 9887 RVA: 0x000EC290 File Offset: 0x000EA490
		public static List<DataLobbyList> ReadListDataLobbyList(byte[] data, ref int offset)
		{
			List<DataLobbyList> list = new List<DataLobbyList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataLobbyList item = ArrayManager.ReadDataLobbyList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026A0 RID: 9888 RVA: 0x000EC2D4 File Offset: 0x000EA4D4
		public static void WriteDataLobbyDetail(ref byte[] data, ref int offset, DataLobbyDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026A1 RID: 9889 RVA: 0x000EC2F0 File Offset: 0x000EA4F0
		public static void WriteListDataLobbyDetail(ref byte[] data, ref int offset, List<DataLobbyDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataLobbyDetail value in values)
			{
				ArrayManager.WriteDataLobbyDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x060026A2 RID: 9890 RVA: 0x000EC36C File Offset: 0x000EA56C
		public static DataLobbyDetail ReadDataLobbyDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataLobbyDetail dataLobbyDetail = new DataLobbyDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataLobbyDetail.DeserializeMessage(array);
			return dataLobbyDetail;
		}

		// Token: 0x060026A3 RID: 9891 RVA: 0x000EC3B0 File Offset: 0x000EA5B0
		public static List<DataLobbyDetail> ReadListDataLobbyDetail(byte[] data, ref int offset)
		{
			List<DataLobbyDetail> list = new List<DataLobbyDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataLobbyDetail item = ArrayManager.ReadDataLobbyDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026A4 RID: 9892 RVA: 0x000EC3F4 File Offset: 0x000EA5F4
		public static void WriteGameLobbyMember(ref byte[] data, ref int offset, GameLobbyMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026A5 RID: 9893 RVA: 0x000EC410 File Offset: 0x000EA610
		public static void WriteListGameLobbyMember(ref byte[] data, ref int offset, List<GameLobbyMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GameLobbyMember value in values)
			{
				ArrayManager.WriteGameLobbyMember(ref data, ref offset, value);
			}
		}

		// Token: 0x060026A6 RID: 9894 RVA: 0x000EC48C File Offset: 0x000EA68C
		public static GameLobbyMember ReadGameLobbyMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GameLobbyMember gameLobbyMember = new GameLobbyMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gameLobbyMember.DeserializeMessage(array);
			return gameLobbyMember;
		}

		// Token: 0x060026A7 RID: 9895 RVA: 0x000EC4D0 File Offset: 0x000EA6D0
		public static List<GameLobbyMember> ReadListGameLobbyMember(byte[] data, ref int offset)
		{
			List<GameLobbyMember> list = new List<GameLobbyMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GameLobbyMember item = ArrayManager.ReadGameLobbyMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026A8 RID: 9896 RVA: 0x000EC514 File Offset: 0x000EA714
		public static void WriteGameMapList(ref byte[] data, ref int offset, GameMapList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026A9 RID: 9897 RVA: 0x000EC530 File Offset: 0x000EA730
		public static void WriteListGameMapList(ref byte[] data, ref int offset, List<GameMapList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GameMapList value in values)
			{
				ArrayManager.WriteGameMapList(ref data, ref offset, value);
			}
		}

		// Token: 0x060026AA RID: 9898 RVA: 0x000EC5AC File Offset: 0x000EA7AC
		public static GameMapList ReadGameMapList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GameMapList gameMapList = new GameMapList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gameMapList.DeserializeMessage(array);
			return gameMapList;
		}

		// Token: 0x060026AB RID: 9899 RVA: 0x000EC5F0 File Offset: 0x000EA7F0
		public static List<GameMapList> ReadListGameMapList(byte[] data, ref int offset)
		{
			List<GameMapList> list = new List<GameMapList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GameMapList item = ArrayManager.ReadGameMapList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026AC RID: 9900 RVA: 0x000EC634 File Offset: 0x000EA834
		public static void WriteGameMap(ref byte[] data, ref int offset, GameMap value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026AD RID: 9901 RVA: 0x000EC650 File Offset: 0x000EA850
		public static void WriteListGameMap(ref byte[] data, ref int offset, List<GameMap> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GameMap value in values)
			{
				ArrayManager.WriteGameMap(ref data, ref offset, value);
			}
		}

		// Token: 0x060026AE RID: 9902 RVA: 0x000EC6CC File Offset: 0x000EA8CC
		public static GameMap ReadGameMap(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GameMap gameMap = new GameMap();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gameMap.DeserializeMessage(array);
			return gameMap;
		}

		// Token: 0x060026AF RID: 9903 RVA: 0x000EC710 File Offset: 0x000EA910
		public static List<GameMap> ReadListGameMap(byte[] data, ref int offset)
		{
			List<GameMap> list = new List<GameMap>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GameMap item = ArrayManager.ReadGameMap(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026B0 RID: 9904 RVA: 0x000EC754 File Offset: 0x000EA954
		public static void WriteGameMapBot(ref byte[] data, ref int offset, GameMapBot value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026B1 RID: 9905 RVA: 0x000EC770 File Offset: 0x000EA970
		public static void WriteListGameMapBot(ref byte[] data, ref int offset, List<GameMapBot> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GameMapBot value in values)
			{
				ArrayManager.WriteGameMapBot(ref data, ref offset, value);
			}
		}

		// Token: 0x060026B2 RID: 9906 RVA: 0x000EC7EC File Offset: 0x000EA9EC
		public static GameMapBot ReadGameMapBot(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GameMapBot gameMapBot = new GameMapBot();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			gameMapBot.DeserializeMessage(array);
			return gameMapBot;
		}

		// Token: 0x060026B3 RID: 9907 RVA: 0x000EC830 File Offset: 0x000EAA30
		public static List<GameMapBot> ReadListGameMapBot(byte[] data, ref int offset)
		{
			List<GameMapBot> list = new List<GameMapBot>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GameMapBot item = ArrayManager.ReadGameMapBot(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026B4 RID: 9908 RVA: 0x000EC874 File Offset: 0x000EAA74
		public static void WriteDataLobbyEvent(ref byte[] data, ref int offset, DataLobbyEvent value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026B5 RID: 9909 RVA: 0x000EC890 File Offset: 0x000EAA90
		public static void WriteListDataLobbyEvent(ref byte[] data, ref int offset, List<DataLobbyEvent> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataLobbyEvent value in values)
			{
				ArrayManager.WriteDataLobbyEvent(ref data, ref offset, value);
			}
		}

		// Token: 0x060026B6 RID: 9910 RVA: 0x000EC90C File Offset: 0x000EAB0C
		public static DataLobbyEvent ReadDataLobbyEvent(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataLobbyEvent dataLobbyEvent = new DataLobbyEvent();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataLobbyEvent.DeserializeMessage(array);
			return dataLobbyEvent;
		}

		// Token: 0x060026B7 RID: 9911 RVA: 0x000EC950 File Offset: 0x000EAB50
		public static List<DataLobbyEvent> ReadListDataLobbyEvent(byte[] data, ref int offset)
		{
			List<DataLobbyEvent> list = new List<DataLobbyEvent>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataLobbyEvent item = ArrayManager.ReadDataLobbyEvent(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026B8 RID: 9912 RVA: 0x000EC994 File Offset: 0x000EAB94
		public static void WriteDataStartGame(ref byte[] data, ref int offset, DataStartGame value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026B9 RID: 9913 RVA: 0x000EC9B0 File Offset: 0x000EABB0
		public static void WriteListDataStartGame(ref byte[] data, ref int offset, List<DataStartGame> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataStartGame value in values)
			{
				ArrayManager.WriteDataStartGame(ref data, ref offset, value);
			}
		}

		// Token: 0x060026BA RID: 9914 RVA: 0x000ECA2C File Offset: 0x000EAC2C
		public static DataStartGame ReadDataStartGame(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataStartGame dataStartGame = new DataStartGame();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataStartGame.DeserializeMessage(array);
			return dataStartGame;
		}

		// Token: 0x060026BB RID: 9915 RVA: 0x000ECA70 File Offset: 0x000EAC70
		public static List<DataStartGame> ReadListDataStartGame(byte[] data, ref int offset)
		{
			List<DataStartGame> list = new List<DataStartGame>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataStartGame item = ArrayManager.ReadDataStartGame(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026BC RID: 9916 RVA: 0x000ECAB4 File Offset: 0x000EACB4
		public static void WriteDataTeamStats(ref byte[] data, ref int offset, DataTeamStats value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026BD RID: 9917 RVA: 0x000ECAD0 File Offset: 0x000EACD0
		public static void WriteListDataTeamStats(ref byte[] data, ref int offset, List<DataTeamStats> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataTeamStats value in values)
			{
				ArrayManager.WriteDataTeamStats(ref data, ref offset, value);
			}
		}

		// Token: 0x060026BE RID: 9918 RVA: 0x000ECB4C File Offset: 0x000EAD4C
		public static DataTeamStats ReadDataTeamStats(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataTeamStats dataTeamStats = new DataTeamStats();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataTeamStats.DeserializeMessage(array);
			return dataTeamStats;
		}

		// Token: 0x060026BF RID: 9919 RVA: 0x000ECB90 File Offset: 0x000EAD90
		public static List<DataTeamStats> ReadListDataTeamStats(byte[] data, ref int offset)
		{
			List<DataTeamStats> list = new List<DataTeamStats>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataTeamStats item = ArrayManager.ReadDataTeamStats(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026C0 RID: 9920 RVA: 0x000ECBD4 File Offset: 0x000EADD4
		public static void WriteDataPlayerStats(ref byte[] data, ref int offset, DataPlayerStats value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026C1 RID: 9921 RVA: 0x000ECBF0 File Offset: 0x000EADF0
		public static void WriteListDataPlayerStats(ref byte[] data, ref int offset, List<DataPlayerStats> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataPlayerStats value in values)
			{
				ArrayManager.WriteDataPlayerStats(ref data, ref offset, value);
			}
		}

		// Token: 0x060026C2 RID: 9922 RVA: 0x000ECC6C File Offset: 0x000EAE6C
		public static DataPlayerStats ReadDataPlayerStats(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataPlayerStats dataPlayerStats = new DataPlayerStats();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataPlayerStats.DeserializeMessage(array);
			return dataPlayerStats;
		}

		// Token: 0x060026C3 RID: 9923 RVA: 0x000ECCB0 File Offset: 0x000EAEB0
		public static List<DataPlayerStats> ReadListDataPlayerStats(byte[] data, ref int offset)
		{
			List<DataPlayerStats> list = new List<DataPlayerStats>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataPlayerStats item = ArrayManager.ReadDataPlayerStats(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026C4 RID: 9924 RVA: 0x000ECCF4 File Offset: 0x000EAEF4
		public static void WriteDataLobbyChat(ref byte[] data, ref int offset, DataLobbyChat value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026C5 RID: 9925 RVA: 0x000ECD10 File Offset: 0x000EAF10
		public static void WriteListDataLobbyChat(ref byte[] data, ref int offset, List<DataLobbyChat> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DataLobbyChat value in values)
			{
				ArrayManager.WriteDataLobbyChat(ref data, ref offset, value);
			}
		}

		// Token: 0x060026C6 RID: 9926 RVA: 0x000ECD8C File Offset: 0x000EAF8C
		public static DataLobbyChat ReadDataLobbyChat(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DataLobbyChat dataLobbyChat = new DataLobbyChat();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			dataLobbyChat.DeserializeMessage(array);
			return dataLobbyChat;
		}

		// Token: 0x060026C7 RID: 9927 RVA: 0x000ECDD0 File Offset: 0x000EAFD0
		public static List<DataLobbyChat> ReadListDataLobbyChat(byte[] data, ref int offset)
		{
			List<DataLobbyChat> list = new List<DataLobbyChat>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DataLobbyChat item = ArrayManager.ReadDataLobbyChat(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026C8 RID: 9928 RVA: 0x000ECE14 File Offset: 0x000EB014
		public static void WriteBotDetail(ref byte[] data, ref int offset, BotDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026C9 RID: 9929 RVA: 0x000ECE30 File Offset: 0x000EB030
		public static void WriteListBotDetail(ref byte[] data, ref int offset, List<BotDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (BotDetail value in values)
			{
				ArrayManager.WriteBotDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x060026CA RID: 9930 RVA: 0x000ECEAC File Offset: 0x000EB0AC
		public static BotDetail ReadBotDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			BotDetail botDetail = new BotDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			botDetail.DeserializeMessage(array);
			return botDetail;
		}

		// Token: 0x060026CB RID: 9931 RVA: 0x000ECEF0 File Offset: 0x000EB0F0
		public static List<BotDetail> ReadListBotDetail(byte[] data, ref int offset)
		{
			List<BotDetail> list = new List<BotDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				BotDetail item = ArrayManager.ReadBotDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026CC RID: 9932 RVA: 0x000ECF34 File Offset: 0x000EB134
		public static void WriteResponseBotList(ref byte[] data, ref int offset, ResponseBotList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026CD RID: 9933 RVA: 0x000ECF50 File Offset: 0x000EB150
		public static void WriteListResponseBotList(ref byte[] data, ref int offset, List<ResponseBotList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseBotList value in values)
			{
				ArrayManager.WriteResponseBotList(ref data, ref offset, value);
			}
		}

		// Token: 0x060026CE RID: 9934 RVA: 0x000ECFCC File Offset: 0x000EB1CC
		public static ResponseBotList ReadResponseBotList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseBotList responseBotList = new ResponseBotList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseBotList.DeserializeMessage(array);
			return responseBotList;
		}

		// Token: 0x060026CF RID: 9935 RVA: 0x000ED010 File Offset: 0x000EB210
		public static List<ResponseBotList> ReadListResponseBotList(byte[] data, ref int offset)
		{
			List<ResponseBotList> list = new List<ResponseBotList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseBotList item = ArrayManager.ReadResponseBotList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026D0 RID: 9936 RVA: 0x000ED054 File Offset: 0x000EB254
		public static void WriteRequestLobbyUpdateDeck(ref byte[] data, ref int offset, RequestLobbyUpdateDeck value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026D1 RID: 9937 RVA: 0x000ED070 File Offset: 0x000EB270
		public static void WriteListRequestLobbyUpdateDeck(ref byte[] data, ref int offset, List<RequestLobbyUpdateDeck> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyUpdateDeck value in values)
			{
				ArrayManager.WriteRequestLobbyUpdateDeck(ref data, ref offset, value);
			}
		}

		// Token: 0x060026D2 RID: 9938 RVA: 0x000ED0EC File Offset: 0x000EB2EC
		public static RequestLobbyUpdateDeck ReadRequestLobbyUpdateDeck(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyUpdateDeck requestLobbyUpdateDeck = new RequestLobbyUpdateDeck();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyUpdateDeck.DeserializeMessage(array);
			return requestLobbyUpdateDeck;
		}

		// Token: 0x060026D3 RID: 9939 RVA: 0x000ED130 File Offset: 0x000EB330
		public static List<RequestLobbyUpdateDeck> ReadListRequestLobbyUpdateDeck(byte[] data, ref int offset)
		{
			List<RequestLobbyUpdateDeck> list = new List<RequestLobbyUpdateDeck>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyUpdateDeck item = ArrayManager.ReadRequestLobbyUpdateDeck(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026D4 RID: 9940 RVA: 0x000ED174 File Offset: 0x000EB374
		public static void WriteRequestCreateLobbyKeystone(ref byte[] data, ref int offset, RequestCreateLobbyKeystone value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026D5 RID: 9941 RVA: 0x000ED190 File Offset: 0x000EB390
		public static void WriteListRequestCreateLobbyKeystone(ref byte[] data, ref int offset, List<RequestCreateLobbyKeystone> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateLobbyKeystone value in values)
			{
				ArrayManager.WriteRequestCreateLobbyKeystone(ref data, ref offset, value);
			}
		}

		// Token: 0x060026D6 RID: 9942 RVA: 0x000ED20C File Offset: 0x000EB40C
		public static RequestCreateLobbyKeystone ReadRequestCreateLobbyKeystone(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateLobbyKeystone requestCreateLobbyKeystone = new RequestCreateLobbyKeystone();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateLobbyKeystone.DeserializeMessage(array);
			return requestCreateLobbyKeystone;
		}

		// Token: 0x060026D7 RID: 9943 RVA: 0x000ED250 File Offset: 0x000EB450
		public static List<RequestCreateLobbyKeystone> ReadListRequestCreateLobbyKeystone(byte[] data, ref int offset)
		{
			List<RequestCreateLobbyKeystone> list = new List<RequestCreateLobbyKeystone>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateLobbyKeystone item = ArrayManager.ReadRequestCreateLobbyKeystone(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026D8 RID: 9944 RVA: 0x000ED294 File Offset: 0x000EB494
		public static void WriteRequestCreateLobbyKeystoneParty(ref byte[] data, ref int offset, RequestCreateLobbyKeystoneParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026D9 RID: 9945 RVA: 0x000ED2B0 File Offset: 0x000EB4B0
		public static void WriteListRequestCreateLobbyKeystoneParty(ref byte[] data, ref int offset, List<RequestCreateLobbyKeystoneParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateLobbyKeystoneParty value in values)
			{
				ArrayManager.WriteRequestCreateLobbyKeystoneParty(ref data, ref offset, value);
			}
		}

		// Token: 0x060026DA RID: 9946 RVA: 0x000ED32C File Offset: 0x000EB52C
		public static RequestCreateLobbyKeystoneParty ReadRequestCreateLobbyKeystoneParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateLobbyKeystoneParty requestCreateLobbyKeystoneParty = new RequestCreateLobbyKeystoneParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateLobbyKeystoneParty.DeserializeMessage(array);
			return requestCreateLobbyKeystoneParty;
		}

		// Token: 0x060026DB RID: 9947 RVA: 0x000ED370 File Offset: 0x000EB570
		public static List<RequestCreateLobbyKeystoneParty> ReadListRequestCreateLobbyKeystoneParty(byte[] data, ref int offset)
		{
			List<RequestCreateLobbyKeystoneParty> list = new List<RequestCreateLobbyKeystoneParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateLobbyKeystoneParty item = ArrayManager.ReadRequestCreateLobbyKeystoneParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026DC RID: 9948 RVA: 0x000ED3B4 File Offset: 0x000EB5B4
		public static void WriteRequestLobbyKickPlayer(ref byte[] data, ref int offset, RequestLobbyKickPlayer value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026DD RID: 9949 RVA: 0x000ED3D0 File Offset: 0x000EB5D0
		public static void WriteListRequestLobbyKickPlayer(ref byte[] data, ref int offset, List<RequestLobbyKickPlayer> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbyKickPlayer value in values)
			{
				ArrayManager.WriteRequestLobbyKickPlayer(ref data, ref offset, value);
			}
		}

		// Token: 0x060026DE RID: 9950 RVA: 0x000ED44C File Offset: 0x000EB64C
		public static RequestLobbyKickPlayer ReadRequestLobbyKickPlayer(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbyKickPlayer requestLobbyKickPlayer = new RequestLobbyKickPlayer();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbyKickPlayer.DeserializeMessage(array);
			return requestLobbyKickPlayer;
		}

		// Token: 0x060026DF RID: 9951 RVA: 0x000ED490 File Offset: 0x000EB690
		public static List<RequestLobbyKickPlayer> ReadListRequestLobbyKickPlayer(byte[] data, ref int offset)
		{
			List<RequestLobbyKickPlayer> list = new List<RequestLobbyKickPlayer>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbyKickPlayer item = ArrayManager.ReadRequestLobbyKickPlayer(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026E0 RID: 9952 RVA: 0x000ED4D4 File Offset: 0x000EB6D4
		public static void WriteRequestLobbySetVisibility(ref byte[] data, ref int offset, RequestLobbySetVisibility value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026E1 RID: 9953 RVA: 0x000ED4F0 File Offset: 0x000EB6F0
		public static void WriteListRequestLobbySetVisibility(ref byte[] data, ref int offset, List<RequestLobbySetVisibility> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySetVisibility value in values)
			{
				ArrayManager.WriteRequestLobbySetVisibility(ref data, ref offset, value);
			}
		}

		// Token: 0x060026E2 RID: 9954 RVA: 0x000ED56C File Offset: 0x000EB76C
		public static RequestLobbySetVisibility ReadRequestLobbySetVisibility(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySetVisibility requestLobbySetVisibility = new RequestLobbySetVisibility();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySetVisibility.DeserializeMessage(array);
			return requestLobbySetVisibility;
		}

		// Token: 0x060026E3 RID: 9955 RVA: 0x000ED5B0 File Offset: 0x000EB7B0
		public static List<RequestLobbySetVisibility> ReadListRequestLobbySetVisibility(byte[] data, ref int offset)
		{
			List<RequestLobbySetVisibility> list = new List<RequestLobbySetVisibility>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySetVisibility item = ArrayManager.ReadRequestLobbySetVisibility(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026E4 RID: 9956 RVA: 0x000ED5F4 File Offset: 0x000EB7F4
		public static void WriteRequestLobbySetDetails(ref byte[] data, ref int offset, RequestLobbySetDetails value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026E5 RID: 9957 RVA: 0x000ED610 File Offset: 0x000EB810
		public static void WriteListRequestLobbySetDetails(ref byte[] data, ref int offset, List<RequestLobbySetDetails> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLobbySetDetails value in values)
			{
				ArrayManager.WriteRequestLobbySetDetails(ref data, ref offset, value);
			}
		}

		// Token: 0x060026E6 RID: 9958 RVA: 0x000ED68C File Offset: 0x000EB88C
		public static RequestLobbySetDetails ReadRequestLobbySetDetails(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLobbySetDetails requestLobbySetDetails = new RequestLobbySetDetails();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLobbySetDetails.DeserializeMessage(array);
			return requestLobbySetDetails;
		}

		// Token: 0x060026E7 RID: 9959 RVA: 0x000ED6D0 File Offset: 0x000EB8D0
		public static List<RequestLobbySetDetails> ReadListRequestLobbySetDetails(byte[] data, ref int offset)
		{
			List<RequestLobbySetDetails> list = new List<RequestLobbySetDetails>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLobbySetDetails item = ArrayManager.ReadRequestLobbySetDetails(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026E8 RID: 9960 RVA: 0x000ED714 File Offset: 0x000EB914
		public static void WriteServerInviteToLobby(ref byte[] data, ref int offset, ServerInviteToLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026E9 RID: 9961 RVA: 0x000ED730 File Offset: 0x000EB930
		public static void WriteListServerInviteToLobby(ref byte[] data, ref int offset, List<ServerInviteToLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerInviteToLobby value in values)
			{
				ArrayManager.WriteServerInviteToLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x060026EA RID: 9962 RVA: 0x000ED7AC File Offset: 0x000EB9AC
		public static ServerInviteToLobby ReadServerInviteToLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerInviteToLobby serverInviteToLobby = new ServerInviteToLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverInviteToLobby.DeserializeMessage(array);
			return serverInviteToLobby;
		}

		// Token: 0x060026EB RID: 9963 RVA: 0x000ED7F0 File Offset: 0x000EB9F0
		public static List<ServerInviteToLobby> ReadListServerInviteToLobby(byte[] data, ref int offset)
		{
			List<ServerInviteToLobby> list = new List<ServerInviteToLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerInviteToLobby item = ArrayManager.ReadServerInviteToLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026EC RID: 9964 RVA: 0x000ED834 File Offset: 0x000EBA34
		public static void WriteServerAckInviteToLobby(ref byte[] data, ref int offset, ServerAckInviteToLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026ED RID: 9965 RVA: 0x000ED850 File Offset: 0x000EBA50
		public static void WriteListServerAckInviteToLobby(ref byte[] data, ref int offset, List<ServerAckInviteToLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerAckInviteToLobby value in values)
			{
				ArrayManager.WriteServerAckInviteToLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x060026EE RID: 9966 RVA: 0x000ED8CC File Offset: 0x000EBACC
		public static ServerAckInviteToLobby ReadServerAckInviteToLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerAckInviteToLobby serverAckInviteToLobby = new ServerAckInviteToLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverAckInviteToLobby.DeserializeMessage(array);
			return serverAckInviteToLobby;
		}

		// Token: 0x060026EF RID: 9967 RVA: 0x000ED910 File Offset: 0x000EBB10
		public static List<ServerAckInviteToLobby> ReadListServerAckInviteToLobby(byte[] data, ref int offset)
		{
			List<ServerAckInviteToLobby> list = new List<ServerAckInviteToLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerAckInviteToLobby item = ArrayManager.ReadServerAckInviteToLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026F0 RID: 9968 RVA: 0x000ED954 File Offset: 0x000EBB54
		public static void WriteResponseServerInviteToLobby(ref byte[] data, ref int offset, ResponseServerInviteToLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026F1 RID: 9969 RVA: 0x000ED970 File Offset: 0x000EBB70
		public static void WriteListResponseServerInviteToLobby(ref byte[] data, ref int offset, List<ResponseServerInviteToLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseServerInviteToLobby value in values)
			{
				ArrayManager.WriteResponseServerInviteToLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x060026F2 RID: 9970 RVA: 0x000ED9EC File Offset: 0x000EBBEC
		public static ResponseServerInviteToLobby ReadResponseServerInviteToLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseServerInviteToLobby responseServerInviteToLobby = new ResponseServerInviteToLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseServerInviteToLobby.DeserializeMessage(array);
			return responseServerInviteToLobby;
		}

		// Token: 0x060026F3 RID: 9971 RVA: 0x000EDA30 File Offset: 0x000EBC30
		public static List<ResponseServerInviteToLobby> ReadListResponseServerInviteToLobby(byte[] data, ref int offset)
		{
			List<ResponseServerInviteToLobby> list = new List<ResponseServerInviteToLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseServerInviteToLobby item = ArrayManager.ReadResponseServerInviteToLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026F4 RID: 9972 RVA: 0x000EDA74 File Offset: 0x000EBC74
		public static void WriteResponseServerAckInviteToLobby(ref byte[] data, ref int offset, ResponseServerAckInviteToLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026F5 RID: 9973 RVA: 0x000EDA90 File Offset: 0x000EBC90
		public static void WriteListResponseServerAckInviteToLobby(ref byte[] data, ref int offset, List<ResponseServerAckInviteToLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseServerAckInviteToLobby value in values)
			{
				ArrayManager.WriteResponseServerAckInviteToLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x060026F6 RID: 9974 RVA: 0x000EDB0C File Offset: 0x000EBD0C
		public static ResponseServerAckInviteToLobby ReadResponseServerAckInviteToLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseServerAckInviteToLobby responseServerAckInviteToLobby = new ResponseServerAckInviteToLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseServerAckInviteToLobby.DeserializeMessage(array);
			return responseServerAckInviteToLobby;
		}

		// Token: 0x060026F7 RID: 9975 RVA: 0x000EDB50 File Offset: 0x000EBD50
		public static List<ResponseServerAckInviteToLobby> ReadListResponseServerAckInviteToLobby(byte[] data, ref int offset)
		{
			List<ResponseServerAckInviteToLobby> list = new List<ResponseServerAckInviteToLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseServerAckInviteToLobby item = ArrayManager.ReadResponseServerAckInviteToLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026F8 RID: 9976 RVA: 0x000EDB94 File Offset: 0x000EBD94
		public static void WriteRecipientRequestInviteToLobby(ref byte[] data, ref int offset, RecipientRequestInviteToLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026F9 RID: 9977 RVA: 0x000EDBB0 File Offset: 0x000EBDB0
		public static void WriteListRecipientRequestInviteToLobby(ref byte[] data, ref int offset, List<RecipientRequestInviteToLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RecipientRequestInviteToLobby value in values)
			{
				ArrayManager.WriteRecipientRequestInviteToLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x060026FA RID: 9978 RVA: 0x000EDC2C File Offset: 0x000EBE2C
		public static RecipientRequestInviteToLobby ReadRecipientRequestInviteToLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RecipientRequestInviteToLobby recipientRequestInviteToLobby = new RecipientRequestInviteToLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			recipientRequestInviteToLobby.DeserializeMessage(array);
			return recipientRequestInviteToLobby;
		}

		// Token: 0x060026FB RID: 9979 RVA: 0x000EDC70 File Offset: 0x000EBE70
		public static List<RecipientRequestInviteToLobby> ReadListRecipientRequestInviteToLobby(byte[] data, ref int offset)
		{
			List<RecipientRequestInviteToLobby> list = new List<RecipientRequestInviteToLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RecipientRequestInviteToLobby item = ArrayManager.ReadRecipientRequestInviteToLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060026FC RID: 9980 RVA: 0x000EDCB4 File Offset: 0x000EBEB4
		public static void WriteRecipientResponseInviteToLobby(ref byte[] data, ref int offset, RecipientResponseInviteToLobby value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060026FD RID: 9981 RVA: 0x000EDCD0 File Offset: 0x000EBED0
		public static void WriteListRecipientResponseInviteToLobby(ref byte[] data, ref int offset, List<RecipientResponseInviteToLobby> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RecipientResponseInviteToLobby value in values)
			{
				ArrayManager.WriteRecipientResponseInviteToLobby(ref data, ref offset, value);
			}
		}

		// Token: 0x060026FE RID: 9982 RVA: 0x000EDD4C File Offset: 0x000EBF4C
		public static RecipientResponseInviteToLobby ReadRecipientResponseInviteToLobby(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RecipientResponseInviteToLobby recipientResponseInviteToLobby = new RecipientResponseInviteToLobby();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			recipientResponseInviteToLobby.DeserializeMessage(array);
			return recipientResponseInviteToLobby;
		}

		// Token: 0x060026FF RID: 9983 RVA: 0x000EDD90 File Offset: 0x000EBF90
		public static List<RecipientResponseInviteToLobby> ReadListRecipientResponseInviteToLobby(byte[] data, ref int offset)
		{
			List<RecipientResponseInviteToLobby> list = new List<RecipientResponseInviteToLobby>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RecipientResponseInviteToLobby item = ArrayManager.ReadRecipientResponseInviteToLobby(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002700 RID: 9984 RVA: 0x000EDDD4 File Offset: 0x000EBFD4
		public static void WritePushLobbyListUpdate(ref byte[] data, ref int offset, PushLobbyListUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002701 RID: 9985 RVA: 0x000EDDF0 File Offset: 0x000EBFF0
		public static void WriteListPushLobbyListUpdate(ref byte[] data, ref int offset, List<PushLobbyListUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushLobbyListUpdate value in values)
			{
				ArrayManager.WritePushLobbyListUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x06002702 RID: 9986 RVA: 0x000EDE6C File Offset: 0x000EC06C
		public static PushLobbyListUpdate ReadPushLobbyListUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushLobbyListUpdate pushLobbyListUpdate = new PushLobbyListUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushLobbyListUpdate.DeserializeMessage(array);
			return pushLobbyListUpdate;
		}

		// Token: 0x06002703 RID: 9987 RVA: 0x000EDEB0 File Offset: 0x000EC0B0
		public static List<PushLobbyListUpdate> ReadListPushLobbyListUpdate(byte[] data, ref int offset)
		{
			List<PushLobbyListUpdate> list = new List<PushLobbyListUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushLobbyListUpdate item = ArrayManager.ReadPushLobbyListUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002704 RID: 9988 RVA: 0x000EDEF4 File Offset: 0x000EC0F4
		public static void WriteLobbyListUpdateData(ref byte[] data, ref int offset, LobbyListUpdateData value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002705 RID: 9989 RVA: 0x000EDF10 File Offset: 0x000EC110
		public static void WriteListLobbyListUpdateData(ref byte[] data, ref int offset, List<LobbyListUpdateData> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (LobbyListUpdateData value in values)
			{
				ArrayManager.WriteLobbyListUpdateData(ref data, ref offset, value);
			}
		}

		// Token: 0x06002706 RID: 9990 RVA: 0x000EDF8C File Offset: 0x000EC18C
		public static LobbyListUpdateData ReadLobbyListUpdateData(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			LobbyListUpdateData lobbyListUpdateData = new LobbyListUpdateData();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			lobbyListUpdateData.DeserializeMessage(array);
			return lobbyListUpdateData;
		}

		// Token: 0x06002707 RID: 9991 RVA: 0x000EDFD0 File Offset: 0x000EC1D0
		public static List<LobbyListUpdateData> ReadListLobbyListUpdateData(byte[] data, ref int offset)
		{
			List<LobbyListUpdateData> list = new List<LobbyListUpdateData>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				LobbyListUpdateData item = ArrayManager.ReadLobbyListUpdateData(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002708 RID: 9992 RVA: 0x000EE014 File Offset: 0x000EC214
		public static void WriteRequestSubscribeToLobbyList(ref byte[] data, ref int offset, RequestSubscribeToLobbyList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002709 RID: 9993 RVA: 0x000EE030 File Offset: 0x000EC230
		public static void WriteListRequestSubscribeToLobbyList(ref byte[] data, ref int offset, List<RequestSubscribeToLobbyList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSubscribeToLobbyList value in values)
			{
				ArrayManager.WriteRequestSubscribeToLobbyList(ref data, ref offset, value);
			}
		}

		// Token: 0x0600270A RID: 9994 RVA: 0x000EE0AC File Offset: 0x000EC2AC
		public static RequestSubscribeToLobbyList ReadRequestSubscribeToLobbyList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSubscribeToLobbyList requestSubscribeToLobbyList = new RequestSubscribeToLobbyList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSubscribeToLobbyList.DeserializeMessage(array);
			return requestSubscribeToLobbyList;
		}

		// Token: 0x0600270B RID: 9995 RVA: 0x000EE0F0 File Offset: 0x000EC2F0
		public static List<RequestSubscribeToLobbyList> ReadListRequestSubscribeToLobbyList(byte[] data, ref int offset)
		{
			List<RequestSubscribeToLobbyList> list = new List<RequestSubscribeToLobbyList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSubscribeToLobbyList item = ArrayManager.ReadRequestSubscribeToLobbyList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600270C RID: 9996 RVA: 0x000EE134 File Offset: 0x000EC334
		public static void WriteResponseSubscribeToLobbyList(ref byte[] data, ref int offset, ResponseSubscribeToLobbyList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600270D RID: 9997 RVA: 0x000EE150 File Offset: 0x000EC350
		public static void WriteListResponseSubscribeToLobbyList(ref byte[] data, ref int offset, List<ResponseSubscribeToLobbyList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSubscribeToLobbyList value in values)
			{
				ArrayManager.WriteResponseSubscribeToLobbyList(ref data, ref offset, value);
			}
		}

		// Token: 0x0600270E RID: 9998 RVA: 0x000EE1CC File Offset: 0x000EC3CC
		public static ResponseSubscribeToLobbyList ReadResponseSubscribeToLobbyList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSubscribeToLobbyList responseSubscribeToLobbyList = new ResponseSubscribeToLobbyList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSubscribeToLobbyList.DeserializeMessage(array);
			return responseSubscribeToLobbyList;
		}

		// Token: 0x0600270F RID: 9999 RVA: 0x000EE210 File Offset: 0x000EC410
		public static List<ResponseSubscribeToLobbyList> ReadListResponseSubscribeToLobbyList(byte[] data, ref int offset)
		{
			List<ResponseSubscribeToLobbyList> list = new List<ResponseSubscribeToLobbyList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSubscribeToLobbyList item = ArrayManager.ReadResponseSubscribeToLobbyList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002710 RID: 10000 RVA: 0x000EE254 File Offset: 0x000EC454
		public static void WriteRequestUnsubscribeFromLobbyList(ref byte[] data, ref int offset, RequestUnsubscribeFromLobbyList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002711 RID: 10001 RVA: 0x000EE270 File Offset: 0x000EC470
		public static void WriteListRequestUnsubscribeFromLobbyList(ref byte[] data, ref int offset, List<RequestUnsubscribeFromLobbyList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestUnsubscribeFromLobbyList value in values)
			{
				ArrayManager.WriteRequestUnsubscribeFromLobbyList(ref data, ref offset, value);
			}
		}

		// Token: 0x06002712 RID: 10002 RVA: 0x000EE2EC File Offset: 0x000EC4EC
		public static RequestUnsubscribeFromLobbyList ReadRequestUnsubscribeFromLobbyList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestUnsubscribeFromLobbyList requestUnsubscribeFromLobbyList = new RequestUnsubscribeFromLobbyList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestUnsubscribeFromLobbyList.DeserializeMessage(array);
			return requestUnsubscribeFromLobbyList;
		}

		// Token: 0x06002713 RID: 10003 RVA: 0x000EE330 File Offset: 0x000EC530
		public static List<RequestUnsubscribeFromLobbyList> ReadListRequestUnsubscribeFromLobbyList(byte[] data, ref int offset)
		{
			List<RequestUnsubscribeFromLobbyList> list = new List<RequestUnsubscribeFromLobbyList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestUnsubscribeFromLobbyList item = ArrayManager.ReadRequestUnsubscribeFromLobbyList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002714 RID: 10004 RVA: 0x000EE374 File Offset: 0x000EC574
		public static void WriteResponseUnsubscribeFromLobbyList(ref byte[] data, ref int offset, ResponseUnsubscribeFromLobbyList value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002715 RID: 10005 RVA: 0x000EE390 File Offset: 0x000EC590
		public static void WriteListResponseUnsubscribeFromLobbyList(ref byte[] data, ref int offset, List<ResponseUnsubscribeFromLobbyList> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseUnsubscribeFromLobbyList value in values)
			{
				ArrayManager.WriteResponseUnsubscribeFromLobbyList(ref data, ref offset, value);
			}
		}

		// Token: 0x06002716 RID: 10006 RVA: 0x000EE40C File Offset: 0x000EC60C
		public static ResponseUnsubscribeFromLobbyList ReadResponseUnsubscribeFromLobbyList(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseUnsubscribeFromLobbyList responseUnsubscribeFromLobbyList = new ResponseUnsubscribeFromLobbyList();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseUnsubscribeFromLobbyList.DeserializeMessage(array);
			return responseUnsubscribeFromLobbyList;
		}

		// Token: 0x06002717 RID: 10007 RVA: 0x000EE450 File Offset: 0x000EC650
		public static List<ResponseUnsubscribeFromLobbyList> ReadListResponseUnsubscribeFromLobbyList(byte[] data, ref int offset)
		{
			List<ResponseUnsubscribeFromLobbyList> list = new List<ResponseUnsubscribeFromLobbyList>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseUnsubscribeFromLobbyList item = ArrayManager.ReadResponseUnsubscribeFromLobbyList(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002718 RID: 10008 RVA: 0x000EE494 File Offset: 0x000EC694
		public static void WritePushUnrealGameRestarting(ref byte[] data, ref int offset, PushUnrealGameRestarting value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002719 RID: 10009 RVA: 0x000EE4B0 File Offset: 0x000EC6B0
		public static void WriteListPushUnrealGameRestarting(ref byte[] data, ref int offset, List<PushUnrealGameRestarting> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushUnrealGameRestarting value in values)
			{
				ArrayManager.WritePushUnrealGameRestarting(ref data, ref offset, value);
			}
		}

		// Token: 0x0600271A RID: 10010 RVA: 0x000EE52C File Offset: 0x000EC72C
		public static PushUnrealGameRestarting ReadPushUnrealGameRestarting(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushUnrealGameRestarting pushUnrealGameRestarting = new PushUnrealGameRestarting();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushUnrealGameRestarting.DeserializeMessage(array);
			return pushUnrealGameRestarting;
		}

		// Token: 0x0600271B RID: 10011 RVA: 0x000EE570 File Offset: 0x000EC770
		public static List<PushUnrealGameRestarting> ReadListPushUnrealGameRestarting(byte[] data, ref int offset)
		{
			List<PushUnrealGameRestarting> list = new List<PushUnrealGameRestarting>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushUnrealGameRestarting item = ArrayManager.ReadPushUnrealGameRestarting(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600271C RID: 10012 RVA: 0x000EE5B4 File Offset: 0x000EC7B4
		public static void WritePushUnrealGameRestartData(ref byte[] data, ref int offset, PushUnrealGameRestartData value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600271D RID: 10013 RVA: 0x000EE5D0 File Offset: 0x000EC7D0
		public static void WriteListPushUnrealGameRestartData(ref byte[] data, ref int offset, List<PushUnrealGameRestartData> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushUnrealGameRestartData value in values)
			{
				ArrayManager.WritePushUnrealGameRestartData(ref data, ref offset, value);
			}
		}

		// Token: 0x0600271E RID: 10014 RVA: 0x000EE64C File Offset: 0x000EC84C
		public static PushUnrealGameRestartData ReadPushUnrealGameRestartData(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushUnrealGameRestartData pushUnrealGameRestartData = new PushUnrealGameRestartData();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushUnrealGameRestartData.DeserializeMessage(array);
			return pushUnrealGameRestartData;
		}

		// Token: 0x0600271F RID: 10015 RVA: 0x000EE690 File Offset: 0x000EC890
		public static List<PushUnrealGameRestartData> ReadListPushUnrealGameRestartData(byte[] data, ref int offset)
		{
			List<PushUnrealGameRestartData> list = new List<PushUnrealGameRestartData>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushUnrealGameRestartData item = ArrayManager.ReadPushUnrealGameRestartData(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002720 RID: 10016 RVA: 0x000EE6D4 File Offset: 0x000EC8D4
		public static void WriteMatchmakingStarted(ref byte[] data, ref int offset, MatchmakingStarted value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002721 RID: 10017 RVA: 0x000EE6F0 File Offset: 0x000EC8F0
		public static void WriteListMatchmakingStarted(ref byte[] data, ref int offset, List<MatchmakingStarted> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MatchmakingStarted value in values)
			{
				ArrayManager.WriteMatchmakingStarted(ref data, ref offset, value);
			}
		}

		// Token: 0x06002722 RID: 10018 RVA: 0x000EE76C File Offset: 0x000EC96C
		public static MatchmakingStarted ReadMatchmakingStarted(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MatchmakingStarted matchmakingStarted = new MatchmakingStarted();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			matchmakingStarted.DeserializeMessage(array);
			return matchmakingStarted;
		}

		// Token: 0x06002723 RID: 10019 RVA: 0x000EE7B0 File Offset: 0x000EC9B0
		public static List<MatchmakingStarted> ReadListMatchmakingStarted(byte[] data, ref int offset)
		{
			List<MatchmakingStarted> list = new List<MatchmakingStarted>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MatchmakingStarted item = ArrayManager.ReadMatchmakingStarted(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002724 RID: 10020 RVA: 0x000EE7F4 File Offset: 0x000EC9F4
		public static void WriteMatchmakingGamePlayer(ref byte[] data, ref int offset, MatchmakingGamePlayer value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002725 RID: 10021 RVA: 0x000EE810 File Offset: 0x000ECA10
		public static void WriteListMatchmakingGamePlayer(ref byte[] data, ref int offset, List<MatchmakingGamePlayer> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MatchmakingGamePlayer value in values)
			{
				ArrayManager.WriteMatchmakingGamePlayer(ref data, ref offset, value);
			}
		}

		// Token: 0x06002726 RID: 10022 RVA: 0x000EE88C File Offset: 0x000ECA8C
		public static MatchmakingGamePlayer ReadMatchmakingGamePlayer(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MatchmakingGamePlayer matchmakingGamePlayer = new MatchmakingGamePlayer();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			matchmakingGamePlayer.DeserializeMessage(array);
			return matchmakingGamePlayer;
		}

		// Token: 0x06002727 RID: 10023 RVA: 0x000EE8D0 File Offset: 0x000ECAD0
		public static List<MatchmakingGamePlayer> ReadListMatchmakingGamePlayer(byte[] data, ref int offset)
		{
			List<MatchmakingGamePlayer> list = new List<MatchmakingGamePlayer>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MatchmakingGamePlayer item = ArrayManager.ReadMatchmakingGamePlayer(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002728 RID: 10024 RVA: 0x000EE914 File Offset: 0x000ECB14
		public static void WritePushMatchmakingGameFound(ref byte[] data, ref int offset, PushMatchmakingGameFound value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002729 RID: 10025 RVA: 0x000EE930 File Offset: 0x000ECB30
		public static void WriteListPushMatchmakingGameFound(ref byte[] data, ref int offset, List<PushMatchmakingGameFound> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushMatchmakingGameFound value in values)
			{
				ArrayManager.WritePushMatchmakingGameFound(ref data, ref offset, value);
			}
		}

		// Token: 0x0600272A RID: 10026 RVA: 0x000EE9AC File Offset: 0x000ECBAC
		public static PushMatchmakingGameFound ReadPushMatchmakingGameFound(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushMatchmakingGameFound pushMatchmakingGameFound = new PushMatchmakingGameFound();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushMatchmakingGameFound.DeserializeMessage(array);
			return pushMatchmakingGameFound;
		}

		// Token: 0x0600272B RID: 10027 RVA: 0x000EE9F0 File Offset: 0x000ECBF0
		public static List<PushMatchmakingGameFound> ReadListPushMatchmakingGameFound(byte[] data, ref int offset)
		{
			List<PushMatchmakingGameFound> list = new List<PushMatchmakingGameFound>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushMatchmakingGameFound item = ArrayManager.ReadPushMatchmakingGameFound(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600272C RID: 10028 RVA: 0x000EEA34 File Offset: 0x000ECC34
		public static void WriteRequestMatchmakingGameFoundSetReady(ref byte[] data, ref int offset, RequestMatchmakingGameFoundSetReady value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600272D RID: 10029 RVA: 0x000EEA50 File Offset: 0x000ECC50
		public static void WriteListRequestMatchmakingGameFoundSetReady(ref byte[] data, ref int offset, List<RequestMatchmakingGameFoundSetReady> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestMatchmakingGameFoundSetReady value in values)
			{
				ArrayManager.WriteRequestMatchmakingGameFoundSetReady(ref data, ref offset, value);
			}
		}

		// Token: 0x0600272E RID: 10030 RVA: 0x000EEACC File Offset: 0x000ECCCC
		public static RequestMatchmakingGameFoundSetReady ReadRequestMatchmakingGameFoundSetReady(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestMatchmakingGameFoundSetReady requestMatchmakingGameFoundSetReady = new RequestMatchmakingGameFoundSetReady();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestMatchmakingGameFoundSetReady.DeserializeMessage(array);
			return requestMatchmakingGameFoundSetReady;
		}

		// Token: 0x0600272F RID: 10031 RVA: 0x000EEB10 File Offset: 0x000ECD10
		public static List<RequestMatchmakingGameFoundSetReady> ReadListRequestMatchmakingGameFoundSetReady(byte[] data, ref int offset)
		{
			List<RequestMatchmakingGameFoundSetReady> list = new List<RequestMatchmakingGameFoundSetReady>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestMatchmakingGameFoundSetReady item = ArrayManager.ReadRequestMatchmakingGameFoundSetReady(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002730 RID: 10032 RVA: 0x000EEB54 File Offset: 0x000ECD54
		public static void WriteRequestMatchmakingGameFoundSetDeclined(ref byte[] data, ref int offset, RequestMatchmakingGameFoundSetDeclined value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002731 RID: 10033 RVA: 0x000EEB70 File Offset: 0x000ECD70
		public static void WriteListRequestMatchmakingGameFoundSetDeclined(ref byte[] data, ref int offset, List<RequestMatchmakingGameFoundSetDeclined> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestMatchmakingGameFoundSetDeclined value in values)
			{
				ArrayManager.WriteRequestMatchmakingGameFoundSetDeclined(ref data, ref offset, value);
			}
		}

		// Token: 0x06002732 RID: 10034 RVA: 0x000EEBEC File Offset: 0x000ECDEC
		public static RequestMatchmakingGameFoundSetDeclined ReadRequestMatchmakingGameFoundSetDeclined(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestMatchmakingGameFoundSetDeclined requestMatchmakingGameFoundSetDeclined = new RequestMatchmakingGameFoundSetDeclined();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestMatchmakingGameFoundSetDeclined.DeserializeMessage(array);
			return requestMatchmakingGameFoundSetDeclined;
		}

		// Token: 0x06002733 RID: 10035 RVA: 0x000EEC30 File Offset: 0x000ECE30
		public static List<RequestMatchmakingGameFoundSetDeclined> ReadListRequestMatchmakingGameFoundSetDeclined(byte[] data, ref int offset)
		{
			List<RequestMatchmakingGameFoundSetDeclined> list = new List<RequestMatchmakingGameFoundSetDeclined>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestMatchmakingGameFoundSetDeclined item = ArrayManager.ReadRequestMatchmakingGameFoundSetDeclined(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002734 RID: 10036 RVA: 0x000EEC74 File Offset: 0x000ECE74
		public static void WritePushMatchmakingGameFoundPlayerReady(ref byte[] data, ref int offset, PushMatchmakingGameFoundPlayerReady value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002735 RID: 10037 RVA: 0x000EEC90 File Offset: 0x000ECE90
		public static void WriteListPushMatchmakingGameFoundPlayerReady(ref byte[] data, ref int offset, List<PushMatchmakingGameFoundPlayerReady> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushMatchmakingGameFoundPlayerReady value in values)
			{
				ArrayManager.WritePushMatchmakingGameFoundPlayerReady(ref data, ref offset, value);
			}
		}

		// Token: 0x06002736 RID: 10038 RVA: 0x000EED0C File Offset: 0x000ECF0C
		public static PushMatchmakingGameFoundPlayerReady ReadPushMatchmakingGameFoundPlayerReady(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushMatchmakingGameFoundPlayerReady pushMatchmakingGameFoundPlayerReady = new PushMatchmakingGameFoundPlayerReady();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushMatchmakingGameFoundPlayerReady.DeserializeMessage(array);
			return pushMatchmakingGameFoundPlayerReady;
		}

		// Token: 0x06002737 RID: 10039 RVA: 0x000EED50 File Offset: 0x000ECF50
		public static List<PushMatchmakingGameFoundPlayerReady> ReadListPushMatchmakingGameFoundPlayerReady(byte[] data, ref int offset)
		{
			List<PushMatchmakingGameFoundPlayerReady> list = new List<PushMatchmakingGameFoundPlayerReady>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushMatchmakingGameFoundPlayerReady item = ArrayManager.ReadPushMatchmakingGameFoundPlayerReady(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002738 RID: 10040 RVA: 0x000EED94 File Offset: 0x000ECF94
		public static void WritePushMatchmakingGameFoundPlayerDeclined(ref byte[] data, ref int offset, PushMatchmakingGameFoundPlayerDeclined value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002739 RID: 10041 RVA: 0x000EEDB0 File Offset: 0x000ECFB0
		public static void WriteListPushMatchmakingGameFoundPlayerDeclined(ref byte[] data, ref int offset, List<PushMatchmakingGameFoundPlayerDeclined> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushMatchmakingGameFoundPlayerDeclined value in values)
			{
				ArrayManager.WritePushMatchmakingGameFoundPlayerDeclined(ref data, ref offset, value);
			}
		}

		// Token: 0x0600273A RID: 10042 RVA: 0x000EEE2C File Offset: 0x000ED02C
		public static PushMatchmakingGameFoundPlayerDeclined ReadPushMatchmakingGameFoundPlayerDeclined(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushMatchmakingGameFoundPlayerDeclined pushMatchmakingGameFoundPlayerDeclined = new PushMatchmakingGameFoundPlayerDeclined();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushMatchmakingGameFoundPlayerDeclined.DeserializeMessage(array);
			return pushMatchmakingGameFoundPlayerDeclined;
		}

		// Token: 0x0600273B RID: 10043 RVA: 0x000EEE70 File Offset: 0x000ED070
		public static List<PushMatchmakingGameFoundPlayerDeclined> ReadListPushMatchmakingGameFoundPlayerDeclined(byte[] data, ref int offset)
		{
			List<PushMatchmakingGameFoundPlayerDeclined> list = new List<PushMatchmakingGameFoundPlayerDeclined>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushMatchmakingGameFoundPlayerDeclined item = ArrayManager.ReadPushMatchmakingGameFoundPlayerDeclined(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600273C RID: 10044 RVA: 0x000EEEB4 File Offset: 0x000ED0B4
		public static void WritePushMatchmakingGameFoundComplete(ref byte[] data, ref int offset, PushMatchmakingGameFoundComplete value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600273D RID: 10045 RVA: 0x000EEED0 File Offset: 0x000ED0D0
		public static void WriteListPushMatchmakingGameFoundComplete(ref byte[] data, ref int offset, List<PushMatchmakingGameFoundComplete> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushMatchmakingGameFoundComplete value in values)
			{
				ArrayManager.WritePushMatchmakingGameFoundComplete(ref data, ref offset, value);
			}
		}

		// Token: 0x0600273E RID: 10046 RVA: 0x000EEF4C File Offset: 0x000ED14C
		public static PushMatchmakingGameFoundComplete ReadPushMatchmakingGameFoundComplete(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushMatchmakingGameFoundComplete pushMatchmakingGameFoundComplete = new PushMatchmakingGameFoundComplete();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushMatchmakingGameFoundComplete.DeserializeMessage(array);
			return pushMatchmakingGameFoundComplete;
		}

		// Token: 0x0600273F RID: 10047 RVA: 0x000EEF90 File Offset: 0x000ED190
		public static List<PushMatchmakingGameFoundComplete> ReadListPushMatchmakingGameFoundComplete(byte[] data, ref int offset)
		{
			List<PushMatchmakingGameFoundComplete> list = new List<PushMatchmakingGameFoundComplete>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushMatchmakingGameFoundComplete item = ArrayManager.ReadPushMatchmakingGameFoundComplete(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002740 RID: 10048 RVA: 0x000EEFD4 File Offset: 0x000ED1D4
		public static void WriteStartMatchmakingSolo(ref byte[] data, ref int offset, StartMatchmakingSolo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002741 RID: 10049 RVA: 0x000EEFF0 File Offset: 0x000ED1F0
		public static void WriteListStartMatchmakingSolo(ref byte[] data, ref int offset, List<StartMatchmakingSolo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StartMatchmakingSolo value in values)
			{
				ArrayManager.WriteStartMatchmakingSolo(ref data, ref offset, value);
			}
		}

		// Token: 0x06002742 RID: 10050 RVA: 0x000EF06C File Offset: 0x000ED26C
		public static StartMatchmakingSolo ReadStartMatchmakingSolo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StartMatchmakingSolo startMatchmakingSolo = new StartMatchmakingSolo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			startMatchmakingSolo.DeserializeMessage(array);
			return startMatchmakingSolo;
		}

		// Token: 0x06002743 RID: 10051 RVA: 0x000EF0B0 File Offset: 0x000ED2B0
		public static List<StartMatchmakingSolo> ReadListStartMatchmakingSolo(byte[] data, ref int offset)
		{
			List<StartMatchmakingSolo> list = new List<StartMatchmakingSolo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StartMatchmakingSolo item = ArrayManager.ReadStartMatchmakingSolo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002744 RID: 10052 RVA: 0x000EF0F4 File Offset: 0x000ED2F4
		public static void WriteStartMatchmakingParty(ref byte[] data, ref int offset, StartMatchmakingParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002745 RID: 10053 RVA: 0x000EF110 File Offset: 0x000ED310
		public static void WriteListStartMatchmakingParty(ref byte[] data, ref int offset, List<StartMatchmakingParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StartMatchmakingParty value in values)
			{
				ArrayManager.WriteStartMatchmakingParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002746 RID: 10054 RVA: 0x000EF18C File Offset: 0x000ED38C
		public static StartMatchmakingParty ReadStartMatchmakingParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StartMatchmakingParty startMatchmakingParty = new StartMatchmakingParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			startMatchmakingParty.DeserializeMessage(array);
			return startMatchmakingParty;
		}

		// Token: 0x06002747 RID: 10055 RVA: 0x000EF1D0 File Offset: 0x000ED3D0
		public static List<StartMatchmakingParty> ReadListStartMatchmakingParty(byte[] data, ref int offset)
		{
			List<StartMatchmakingParty> list = new List<StartMatchmakingParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StartMatchmakingParty item = ArrayManager.ReadStartMatchmakingParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002748 RID: 10056 RVA: 0x000EF214 File Offset: 0x000ED414
		public static void WriteStopMatchmaking(ref byte[] data, ref int offset, StopMatchmaking value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002749 RID: 10057 RVA: 0x000EF230 File Offset: 0x000ED430
		public static void WriteListStopMatchmaking(ref byte[] data, ref int offset, List<StopMatchmaking> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (StopMatchmaking value in values)
			{
				ArrayManager.WriteStopMatchmaking(ref data, ref offset, value);
			}
		}

		// Token: 0x0600274A RID: 10058 RVA: 0x000EF2AC File Offset: 0x000ED4AC
		public static StopMatchmaking ReadStopMatchmaking(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			StopMatchmaking stopMatchmaking = new StopMatchmaking();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			stopMatchmaking.DeserializeMessage(array);
			return stopMatchmaking;
		}

		// Token: 0x0600274B RID: 10059 RVA: 0x000EF2F0 File Offset: 0x000ED4F0
		public static List<StopMatchmaking> ReadListStopMatchmaking(byte[] data, ref int offset)
		{
			List<StopMatchmaking> list = new List<StopMatchmaking>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				StopMatchmaking item = ArrayManager.ReadStopMatchmaking(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600274C RID: 10060 RVA: 0x000EF334 File Offset: 0x000ED534
		public static void WriteMatchmakingUserUpdate(ref byte[] data, ref int offset, MatchmakingUserUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600274D RID: 10061 RVA: 0x000EF350 File Offset: 0x000ED550
		public static void WriteListMatchmakingUserUpdate(ref byte[] data, ref int offset, List<MatchmakingUserUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MatchmakingUserUpdate value in values)
			{
				ArrayManager.WriteMatchmakingUserUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x0600274E RID: 10062 RVA: 0x000EF3CC File Offset: 0x000ED5CC
		public static MatchmakingUserUpdate ReadMatchmakingUserUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MatchmakingUserUpdate matchmakingUserUpdate = new MatchmakingUserUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			matchmakingUserUpdate.DeserializeMessage(array);
			return matchmakingUserUpdate;
		}

		// Token: 0x0600274F RID: 10063 RVA: 0x000EF410 File Offset: 0x000ED610
		public static List<MatchmakingUserUpdate> ReadListMatchmakingUserUpdate(byte[] data, ref int offset)
		{
			List<MatchmakingUserUpdate> list = new List<MatchmakingUserUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MatchmakingUserUpdate item = ArrayManager.ReadMatchmakingUserUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002750 RID: 10064 RVA: 0x000EF454 File Offset: 0x000ED654
		public static void WriteServerInviteToParty(ref byte[] data, ref int offset, ServerInviteToParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002751 RID: 10065 RVA: 0x000EF470 File Offset: 0x000ED670
		public static void WriteListServerInviteToParty(ref byte[] data, ref int offset, List<ServerInviteToParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerInviteToParty value in values)
			{
				ArrayManager.WriteServerInviteToParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002752 RID: 10066 RVA: 0x000EF4EC File Offset: 0x000ED6EC
		public static ServerInviteToParty ReadServerInviteToParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerInviteToParty serverInviteToParty = new ServerInviteToParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverInviteToParty.DeserializeMessage(array);
			return serverInviteToParty;
		}

		// Token: 0x06002753 RID: 10067 RVA: 0x000EF530 File Offset: 0x000ED730
		public static List<ServerInviteToParty> ReadListServerInviteToParty(byte[] data, ref int offset)
		{
			List<ServerInviteToParty> list = new List<ServerInviteToParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerInviteToParty item = ArrayManager.ReadServerInviteToParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002754 RID: 10068 RVA: 0x000EF574 File Offset: 0x000ED774
		public static void WriteServerAckInviteToParty(ref byte[] data, ref int offset, ServerAckInviteToParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002755 RID: 10069 RVA: 0x000EF590 File Offset: 0x000ED790
		public static void WriteListServerAckInviteToParty(ref byte[] data, ref int offset, List<ServerAckInviteToParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerAckInviteToParty value in values)
			{
				ArrayManager.WriteServerAckInviteToParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002756 RID: 10070 RVA: 0x000EF60C File Offset: 0x000ED80C
		public static ServerAckInviteToParty ReadServerAckInviteToParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerAckInviteToParty serverAckInviteToParty = new ServerAckInviteToParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverAckInviteToParty.DeserializeMessage(array);
			return serverAckInviteToParty;
		}

		// Token: 0x06002757 RID: 10071 RVA: 0x000EF650 File Offset: 0x000ED850
		public static List<ServerAckInviteToParty> ReadListServerAckInviteToParty(byte[] data, ref int offset)
		{
			List<ServerAckInviteToParty> list = new List<ServerAckInviteToParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerAckInviteToParty item = ArrayManager.ReadServerAckInviteToParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002758 RID: 10072 RVA: 0x000EF694 File Offset: 0x000ED894
		public static void WriteResponseServerInviteToParty(ref byte[] data, ref int offset, ResponseServerInviteToParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002759 RID: 10073 RVA: 0x000EF6B0 File Offset: 0x000ED8B0
		public static void WriteListResponseServerInviteToParty(ref byte[] data, ref int offset, List<ResponseServerInviteToParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseServerInviteToParty value in values)
			{
				ArrayManager.WriteResponseServerInviteToParty(ref data, ref offset, value);
			}
		}

		// Token: 0x0600275A RID: 10074 RVA: 0x000EF72C File Offset: 0x000ED92C
		public static ResponseServerInviteToParty ReadResponseServerInviteToParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseServerInviteToParty responseServerInviteToParty = new ResponseServerInviteToParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseServerInviteToParty.DeserializeMessage(array);
			return responseServerInviteToParty;
		}

		// Token: 0x0600275B RID: 10075 RVA: 0x000EF770 File Offset: 0x000ED970
		public static List<ResponseServerInviteToParty> ReadListResponseServerInviteToParty(byte[] data, ref int offset)
		{
			List<ResponseServerInviteToParty> list = new List<ResponseServerInviteToParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseServerInviteToParty item = ArrayManager.ReadResponseServerInviteToParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600275C RID: 10076 RVA: 0x000EF7B4 File Offset: 0x000ED9B4
		public static void WriteResponseServerAckInviteToParty(ref byte[] data, ref int offset, ResponseServerAckInviteToParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600275D RID: 10077 RVA: 0x000EF7D0 File Offset: 0x000ED9D0
		public static void WriteListResponseServerAckInviteToParty(ref byte[] data, ref int offset, List<ResponseServerAckInviteToParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseServerAckInviteToParty value in values)
			{
				ArrayManager.WriteResponseServerAckInviteToParty(ref data, ref offset, value);
			}
		}

		// Token: 0x0600275E RID: 10078 RVA: 0x000EF84C File Offset: 0x000EDA4C
		public static ResponseServerAckInviteToParty ReadResponseServerAckInviteToParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseServerAckInviteToParty responseServerAckInviteToParty = new ResponseServerAckInviteToParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseServerAckInviteToParty.DeserializeMessage(array);
			return responseServerAckInviteToParty;
		}

		// Token: 0x0600275F RID: 10079 RVA: 0x000EF890 File Offset: 0x000EDA90
		public static List<ResponseServerAckInviteToParty> ReadListResponseServerAckInviteToParty(byte[] data, ref int offset)
		{
			List<ResponseServerAckInviteToParty> list = new List<ResponseServerAckInviteToParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseServerAckInviteToParty item = ArrayManager.ReadResponseServerAckInviteToParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002760 RID: 10080 RVA: 0x000EF8D4 File Offset: 0x000EDAD4
		public static void WriteRecipientRequestInviteToParty(ref byte[] data, ref int offset, RecipientRequestInviteToParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002761 RID: 10081 RVA: 0x000EF8F0 File Offset: 0x000EDAF0
		public static void WriteListRecipientRequestInviteToParty(ref byte[] data, ref int offset, List<RecipientRequestInviteToParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RecipientRequestInviteToParty value in values)
			{
				ArrayManager.WriteRecipientRequestInviteToParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002762 RID: 10082 RVA: 0x000EF96C File Offset: 0x000EDB6C
		public static RecipientRequestInviteToParty ReadRecipientRequestInviteToParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RecipientRequestInviteToParty recipientRequestInviteToParty = new RecipientRequestInviteToParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			recipientRequestInviteToParty.DeserializeMessage(array);
			return recipientRequestInviteToParty;
		}

		// Token: 0x06002763 RID: 10083 RVA: 0x000EF9B0 File Offset: 0x000EDBB0
		public static List<RecipientRequestInviteToParty> ReadListRecipientRequestInviteToParty(byte[] data, ref int offset)
		{
			List<RecipientRequestInviteToParty> list = new List<RecipientRequestInviteToParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RecipientRequestInviteToParty item = ArrayManager.ReadRecipientRequestInviteToParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002764 RID: 10084 RVA: 0x000EF9F4 File Offset: 0x000EDBF4
		public static void WriteRecipientResponseInviteToParty(ref byte[] data, ref int offset, RecipientResponseInviteToParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002765 RID: 10085 RVA: 0x000EFA10 File Offset: 0x000EDC10
		public static void WriteListRecipientResponseInviteToParty(ref byte[] data, ref int offset, List<RecipientResponseInviteToParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RecipientResponseInviteToParty value in values)
			{
				ArrayManager.WriteRecipientResponseInviteToParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002766 RID: 10086 RVA: 0x000EFA8C File Offset: 0x000EDC8C
		public static RecipientResponseInviteToParty ReadRecipientResponseInviteToParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RecipientResponseInviteToParty recipientResponseInviteToParty = new RecipientResponseInviteToParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			recipientResponseInviteToParty.DeserializeMessage(array);
			return recipientResponseInviteToParty;
		}

		// Token: 0x06002767 RID: 10087 RVA: 0x000EFAD0 File Offset: 0x000EDCD0
		public static List<RecipientResponseInviteToParty> ReadListRecipientResponseInviteToParty(byte[] data, ref int offset)
		{
			List<RecipientResponseInviteToParty> list = new List<RecipientResponseInviteToParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RecipientResponseInviteToParty item = ArrayManager.ReadRecipientResponseInviteToParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002768 RID: 10088 RVA: 0x000EFB14 File Offset: 0x000EDD14
		public static void WritePlayerJoinedParty(ref byte[] data, ref int offset, PlayerJoinedParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002769 RID: 10089 RVA: 0x000EFB30 File Offset: 0x000EDD30
		public static void WriteListPlayerJoinedParty(ref byte[] data, ref int offset, List<PlayerJoinedParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerJoinedParty value in values)
			{
				ArrayManager.WritePlayerJoinedParty(ref data, ref offset, value);
			}
		}

		// Token: 0x0600276A RID: 10090 RVA: 0x000EFBAC File Offset: 0x000EDDAC
		public static PlayerJoinedParty ReadPlayerJoinedParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerJoinedParty playerJoinedParty = new PlayerJoinedParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerJoinedParty.DeserializeMessage(array);
			return playerJoinedParty;
		}

		// Token: 0x0600276B RID: 10091 RVA: 0x000EFBF0 File Offset: 0x000EDDF0
		public static List<PlayerJoinedParty> ReadListPlayerJoinedParty(byte[] data, ref int offset)
		{
			List<PlayerJoinedParty> list = new List<PlayerJoinedParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerJoinedParty item = ArrayManager.ReadPlayerJoinedParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600276C RID: 10092 RVA: 0x000EFC34 File Offset: 0x000EDE34
		public static void WriteServerLeaveParty(ref byte[] data, ref int offset, ServerLeaveParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600276D RID: 10093 RVA: 0x000EFC50 File Offset: 0x000EDE50
		public static void WriteListServerLeaveParty(ref byte[] data, ref int offset, List<ServerLeaveParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerLeaveParty value in values)
			{
				ArrayManager.WriteServerLeaveParty(ref data, ref offset, value);
			}
		}

		// Token: 0x0600276E RID: 10094 RVA: 0x000EFCCC File Offset: 0x000EDECC
		public static ServerLeaveParty ReadServerLeaveParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerLeaveParty serverLeaveParty = new ServerLeaveParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverLeaveParty.DeserializeMessage(array);
			return serverLeaveParty;
		}

		// Token: 0x0600276F RID: 10095 RVA: 0x000EFD10 File Offset: 0x000EDF10
		public static List<ServerLeaveParty> ReadListServerLeaveParty(byte[] data, ref int offset)
		{
			List<ServerLeaveParty> list = new List<ServerLeaveParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerLeaveParty item = ArrayManager.ReadServerLeaveParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002770 RID: 10096 RVA: 0x000EFD54 File Offset: 0x000EDF54
		public static void WriteServerAckLeaveParty(ref byte[] data, ref int offset, ServerAckLeaveParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002771 RID: 10097 RVA: 0x000EFD70 File Offset: 0x000EDF70
		public static void WriteListServerAckLeaveParty(ref byte[] data, ref int offset, List<ServerAckLeaveParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerAckLeaveParty value in values)
			{
				ArrayManager.WriteServerAckLeaveParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002772 RID: 10098 RVA: 0x000EFDEC File Offset: 0x000EDFEC
		public static ServerAckLeaveParty ReadServerAckLeaveParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerAckLeaveParty serverAckLeaveParty = new ServerAckLeaveParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverAckLeaveParty.DeserializeMessage(array);
			return serverAckLeaveParty;
		}

		// Token: 0x06002773 RID: 10099 RVA: 0x000EFE30 File Offset: 0x000EE030
		public static List<ServerAckLeaveParty> ReadListServerAckLeaveParty(byte[] data, ref int offset)
		{
			List<ServerAckLeaveParty> list = new List<ServerAckLeaveParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerAckLeaveParty item = ArrayManager.ReadServerAckLeaveParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002774 RID: 10100 RVA: 0x000EFE74 File Offset: 0x000EE074
		public static void WritePlayerLeftParty(ref byte[] data, ref int offset, PlayerLeftParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002775 RID: 10101 RVA: 0x000EFE90 File Offset: 0x000EE090
		public static void WriteListPlayerLeftParty(ref byte[] data, ref int offset, List<PlayerLeftParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerLeftParty value in values)
			{
				ArrayManager.WritePlayerLeftParty(ref data, ref offset, value);
			}
		}

		// Token: 0x06002776 RID: 10102 RVA: 0x000EFF0C File Offset: 0x000EE10C
		public static PlayerLeftParty ReadPlayerLeftParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerLeftParty playerLeftParty = new PlayerLeftParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerLeftParty.DeserializeMessage(array);
			return playerLeftParty;
		}

		// Token: 0x06002777 RID: 10103 RVA: 0x000EFF50 File Offset: 0x000EE150
		public static List<PlayerLeftParty> ReadListPlayerLeftParty(byte[] data, ref int offset)
		{
			List<PlayerLeftParty> list = new List<PlayerLeftParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerLeftParty item = ArrayManager.ReadPlayerLeftParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002778 RID: 10104 RVA: 0x000EFF94 File Offset: 0x000EE194
		public static void WritePartyClosed(ref byte[] data, ref int offset, PartyClosed value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002779 RID: 10105 RVA: 0x000EFFB0 File Offset: 0x000EE1B0
		public static void WriteListPartyClosed(ref byte[] data, ref int offset, List<PartyClosed> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PartyClosed value in values)
			{
				ArrayManager.WritePartyClosed(ref data, ref offset, value);
			}
		}

		// Token: 0x0600277A RID: 10106 RVA: 0x000F002C File Offset: 0x000EE22C
		public static PartyClosed ReadPartyClosed(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PartyClosed partyClosed = new PartyClosed();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			partyClosed.DeserializeMessage(array);
			return partyClosed;
		}

		// Token: 0x0600277B RID: 10107 RVA: 0x000F0070 File Offset: 0x000EE270
		public static List<PartyClosed> ReadListPartyClosed(byte[] data, ref int offset)
		{
			List<PartyClosed> list = new List<PartyClosed>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PartyClosed item = ArrayManager.ReadPartyClosed(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600277C RID: 10108 RVA: 0x000F00B4 File Offset: 0x000EE2B4
		public static void WriteServerPromoteNewLeader(ref byte[] data, ref int offset, ServerPromoteNewLeader value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600277D RID: 10109 RVA: 0x000F00D0 File Offset: 0x000EE2D0
		public static void WriteListServerPromoteNewLeader(ref byte[] data, ref int offset, List<ServerPromoteNewLeader> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerPromoteNewLeader value in values)
			{
				ArrayManager.WriteServerPromoteNewLeader(ref data, ref offset, value);
			}
		}

		// Token: 0x0600277E RID: 10110 RVA: 0x000F014C File Offset: 0x000EE34C
		public static ServerPromoteNewLeader ReadServerPromoteNewLeader(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerPromoteNewLeader serverPromoteNewLeader = new ServerPromoteNewLeader();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverPromoteNewLeader.DeserializeMessage(array);
			return serverPromoteNewLeader;
		}

		// Token: 0x0600277F RID: 10111 RVA: 0x000F0190 File Offset: 0x000EE390
		public static List<ServerPromoteNewLeader> ReadListServerPromoteNewLeader(byte[] data, ref int offset)
		{
			List<ServerPromoteNewLeader> list = new List<ServerPromoteNewLeader>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerPromoteNewLeader item = ArrayManager.ReadServerPromoteNewLeader(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002780 RID: 10112 RVA: 0x000F01D4 File Offset: 0x000EE3D4
		public static void WriteServerAckPromoteNewLeader(ref byte[] data, ref int offset, ServerAckPromoteNewLeader value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002781 RID: 10113 RVA: 0x000F01F0 File Offset: 0x000EE3F0
		public static void WriteListServerAckPromoteNewLeader(ref byte[] data, ref int offset, List<ServerAckPromoteNewLeader> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ServerAckPromoteNewLeader value in values)
			{
				ArrayManager.WriteServerAckPromoteNewLeader(ref data, ref offset, value);
			}
		}

		// Token: 0x06002782 RID: 10114 RVA: 0x000F026C File Offset: 0x000EE46C
		public static ServerAckPromoteNewLeader ReadServerAckPromoteNewLeader(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ServerAckPromoteNewLeader serverAckPromoteNewLeader = new ServerAckPromoteNewLeader();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			serverAckPromoteNewLeader.DeserializeMessage(array);
			return serverAckPromoteNewLeader;
		}

		// Token: 0x06002783 RID: 10115 RVA: 0x000F02B0 File Offset: 0x000EE4B0
		public static List<ServerAckPromoteNewLeader> ReadListServerAckPromoteNewLeader(byte[] data, ref int offset)
		{
			List<ServerAckPromoteNewLeader> list = new List<ServerAckPromoteNewLeader>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ServerAckPromoteNewLeader item = ArrayManager.ReadServerAckPromoteNewLeader(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002784 RID: 10116 RVA: 0x000F02F4 File Offset: 0x000EE4F4
		public static void WriteNewLeaderSelected(ref byte[] data, ref int offset, NewLeaderSelected value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002785 RID: 10117 RVA: 0x000F0310 File Offset: 0x000EE510
		public static void WriteListNewLeaderSelected(ref byte[] data, ref int offset, List<NewLeaderSelected> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NewLeaderSelected value in values)
			{
				ArrayManager.WriteNewLeaderSelected(ref data, ref offset, value);
			}
		}

		// Token: 0x06002786 RID: 10118 RVA: 0x000F038C File Offset: 0x000EE58C
		public static NewLeaderSelected ReadNewLeaderSelected(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NewLeaderSelected newLeaderSelected = new NewLeaderSelected();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			newLeaderSelected.DeserializeMessage(array);
			return newLeaderSelected;
		}

		// Token: 0x06002787 RID: 10119 RVA: 0x000F03D0 File Offset: 0x000EE5D0
		public static List<NewLeaderSelected> ReadListNewLeaderSelected(byte[] data, ref int offset)
		{
			List<NewLeaderSelected> list = new List<NewLeaderSelected>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NewLeaderSelected item = ArrayManager.ReadNewLeaderSelected(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002788 RID: 10120 RVA: 0x000F0414 File Offset: 0x000EE614
		public static void WriteNetworkPartyMember(ref byte[] data, ref int offset, NetworkPartyMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002789 RID: 10121 RVA: 0x000F0430 File Offset: 0x000EE630
		public static void WriteListNetworkPartyMember(ref byte[] data, ref int offset, List<NetworkPartyMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (NetworkPartyMember value in values)
			{
				ArrayManager.WriteNetworkPartyMember(ref data, ref offset, value);
			}
		}

		// Token: 0x0600278A RID: 10122 RVA: 0x000F04AC File Offset: 0x000EE6AC
		public static NetworkPartyMember ReadNetworkPartyMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			NetworkPartyMember networkPartyMember = new NetworkPartyMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			networkPartyMember.DeserializeMessage(array);
			return networkPartyMember;
		}

		// Token: 0x0600278B RID: 10123 RVA: 0x000F04F0 File Offset: 0x000EE6F0
		public static List<NetworkPartyMember> ReadListNetworkPartyMember(byte[] data, ref int offset)
		{
			List<NetworkPartyMember> list = new List<NetworkPartyMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				NetworkPartyMember item = ArrayManager.ReadNetworkPartyMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600278C RID: 10124 RVA: 0x000F0534 File Offset: 0x000EE734
		public static void WriteRequestPartyStatus(ref byte[] data, ref int offset, RequestPartyStatus value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600278D RID: 10125 RVA: 0x000F0550 File Offset: 0x000EE750
		public static void WriteListRequestPartyStatus(ref byte[] data, ref int offset, List<RequestPartyStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPartyStatus value in values)
			{
				ArrayManager.WriteRequestPartyStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x0600278E RID: 10126 RVA: 0x000F05CC File Offset: 0x000EE7CC
		public static RequestPartyStatus ReadRequestPartyStatus(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPartyStatus requestPartyStatus = new RequestPartyStatus();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPartyStatus.DeserializeMessage(array);
			return requestPartyStatus;
		}

		// Token: 0x0600278F RID: 10127 RVA: 0x000F0610 File Offset: 0x000EE810
		public static List<RequestPartyStatus> ReadListRequestPartyStatus(byte[] data, ref int offset)
		{
			List<RequestPartyStatus> list = new List<RequestPartyStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPartyStatus item = ArrayManager.ReadRequestPartyStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002790 RID: 10128 RVA: 0x000F0654 File Offset: 0x000EE854
		public static void WriteResponsePartyStatus(ref byte[] data, ref int offset, ResponsePartyStatus value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002791 RID: 10129 RVA: 0x000F0670 File Offset: 0x000EE870
		public static void WriteListResponsePartyStatus(ref byte[] data, ref int offset, List<ResponsePartyStatus> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePartyStatus value in values)
			{
				ArrayManager.WriteResponsePartyStatus(ref data, ref offset, value);
			}
		}

		// Token: 0x06002792 RID: 10130 RVA: 0x000F06EC File Offset: 0x000EE8EC
		public static ResponsePartyStatus ReadResponsePartyStatus(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePartyStatus responsePartyStatus = new ResponsePartyStatus();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePartyStatus.DeserializeMessage(array);
			return responsePartyStatus;
		}

		// Token: 0x06002793 RID: 10131 RVA: 0x000F0730 File Offset: 0x000EE930
		public static List<ResponsePartyStatus> ReadListResponsePartyStatus(byte[] data, ref int offset)
		{
			List<ResponsePartyStatus> list = new List<ResponsePartyStatus>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePartyStatus item = ArrayManager.ReadResponsePartyStatus(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002794 RID: 10132 RVA: 0x000F0774 File Offset: 0x000EE974
		public static void WriteRequestPartyChatID(ref byte[] data, ref int offset, RequestPartyChatID value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002795 RID: 10133 RVA: 0x000F0790 File Offset: 0x000EE990
		public static void WriteListRequestPartyChatID(ref byte[] data, ref int offset, List<RequestPartyChatID> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPartyChatID value in values)
			{
				ArrayManager.WriteRequestPartyChatID(ref data, ref offset, value);
			}
		}

		// Token: 0x06002796 RID: 10134 RVA: 0x000F080C File Offset: 0x000EEA0C
		public static RequestPartyChatID ReadRequestPartyChatID(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPartyChatID requestPartyChatID = new RequestPartyChatID();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPartyChatID.DeserializeMessage(array);
			return requestPartyChatID;
		}

		// Token: 0x06002797 RID: 10135 RVA: 0x000F0850 File Offset: 0x000EEA50
		public static List<RequestPartyChatID> ReadListRequestPartyChatID(byte[] data, ref int offset)
		{
			List<RequestPartyChatID> list = new List<RequestPartyChatID>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPartyChatID item = ArrayManager.ReadRequestPartyChatID(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002798 RID: 10136 RVA: 0x000F0894 File Offset: 0x000EEA94
		public static void WriteResponsePartyChatID(ref byte[] data, ref int offset, ResponsePartyChatID value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002799 RID: 10137 RVA: 0x000F08B0 File Offset: 0x000EEAB0
		public static void WriteListResponsePartyChatID(ref byte[] data, ref int offset, List<ResponsePartyChatID> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePartyChatID value in values)
			{
				ArrayManager.WriteResponsePartyChatID(ref data, ref offset, value);
			}
		}

		// Token: 0x0600279A RID: 10138 RVA: 0x000F092C File Offset: 0x000EEB2C
		public static ResponsePartyChatID ReadResponsePartyChatID(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePartyChatID responsePartyChatID = new ResponsePartyChatID();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePartyChatID.DeserializeMessage(array);
			return responsePartyChatID;
		}

		// Token: 0x0600279B RID: 10139 RVA: 0x000F0970 File Offset: 0x000EEB70
		public static List<ResponsePartyChatID> ReadListResponsePartyChatID(byte[] data, ref int offset)
		{
			List<ResponsePartyChatID> list = new List<ResponsePartyChatID>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePartyChatID item = ArrayManager.ReadResponsePartyChatID(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600279C RID: 10140 RVA: 0x000F09B4 File Offset: 0x000EEBB4
		public static void WriteRequestKickPlayerFromParty(ref byte[] data, ref int offset, RequestKickPlayerFromParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600279D RID: 10141 RVA: 0x000F09D0 File Offset: 0x000EEBD0
		public static void WriteListRequestKickPlayerFromParty(ref byte[] data, ref int offset, List<RequestKickPlayerFromParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestKickPlayerFromParty value in values)
			{
				ArrayManager.WriteRequestKickPlayerFromParty(ref data, ref offset, value);
			}
		}

		// Token: 0x0600279E RID: 10142 RVA: 0x000F0A4C File Offset: 0x000EEC4C
		public static RequestKickPlayerFromParty ReadRequestKickPlayerFromParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestKickPlayerFromParty requestKickPlayerFromParty = new RequestKickPlayerFromParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestKickPlayerFromParty.DeserializeMessage(array);
			return requestKickPlayerFromParty;
		}

		// Token: 0x0600279F RID: 10143 RVA: 0x000F0A90 File Offset: 0x000EEC90
		public static List<RequestKickPlayerFromParty> ReadListRequestKickPlayerFromParty(byte[] data, ref int offset)
		{
			List<RequestKickPlayerFromParty> list = new List<RequestKickPlayerFromParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestKickPlayerFromParty item = ArrayManager.ReadRequestKickPlayerFromParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027A0 RID: 10144 RVA: 0x000F0AD4 File Offset: 0x000EECD4
		public static void WriteResponseKickPlayerFromParty(ref byte[] data, ref int offset, ResponseKickPlayerFromParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027A1 RID: 10145 RVA: 0x000F0AF0 File Offset: 0x000EECF0
		public static void WriteListResponseKickPlayerFromParty(ref byte[] data, ref int offset, List<ResponseKickPlayerFromParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseKickPlayerFromParty value in values)
			{
				ArrayManager.WriteResponseKickPlayerFromParty(ref data, ref offset, value);
			}
		}

		// Token: 0x060027A2 RID: 10146 RVA: 0x000F0B6C File Offset: 0x000EED6C
		public static ResponseKickPlayerFromParty ReadResponseKickPlayerFromParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseKickPlayerFromParty responseKickPlayerFromParty = new ResponseKickPlayerFromParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseKickPlayerFromParty.DeserializeMessage(array);
			return responseKickPlayerFromParty;
		}

		// Token: 0x060027A3 RID: 10147 RVA: 0x000F0BB0 File Offset: 0x000EEDB0
		public static List<ResponseKickPlayerFromParty> ReadListResponseKickPlayerFromParty(byte[] data, ref int offset)
		{
			List<ResponseKickPlayerFromParty> list = new List<ResponseKickPlayerFromParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseKickPlayerFromParty item = ArrayManager.ReadResponseKickPlayerFromParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027A4 RID: 10148 RVA: 0x000F0BF4 File Offset: 0x000EEDF4
		public static void WritePushPlayerKickedFromParty(ref byte[] data, ref int offset, PushPlayerKickedFromParty value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027A5 RID: 10149 RVA: 0x000F0C10 File Offset: 0x000EEE10
		public static void WriteListPushPlayerKickedFromParty(ref byte[] data, ref int offset, List<PushPlayerKickedFromParty> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPlayerKickedFromParty value in values)
			{
				ArrayManager.WritePushPlayerKickedFromParty(ref data, ref offset, value);
			}
		}

		// Token: 0x060027A6 RID: 10150 RVA: 0x000F0C8C File Offset: 0x000EEE8C
		public static PushPlayerKickedFromParty ReadPushPlayerKickedFromParty(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPlayerKickedFromParty pushPlayerKickedFromParty = new PushPlayerKickedFromParty();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPlayerKickedFromParty.DeserializeMessage(array);
			return pushPlayerKickedFromParty;
		}

		// Token: 0x060027A7 RID: 10151 RVA: 0x000F0CD0 File Offset: 0x000EEED0
		public static List<PushPlayerKickedFromParty> ReadListPushPlayerKickedFromParty(byte[] data, ref int offset)
		{
			List<PushPlayerKickedFromParty> list = new List<PushPlayerKickedFromParty>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPlayerKickedFromParty item = ArrayManager.ReadPushPlayerKickedFromParty(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027A8 RID: 10152 RVA: 0x000F0D14 File Offset: 0x000EEF14
		public static void WriteRemovePlayerFromPartyLeftGameEarly(ref byte[] data, ref int offset, RemovePlayerFromPartyLeftGameEarly value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027A9 RID: 10153 RVA: 0x000F0D30 File Offset: 0x000EEF30
		public static void WriteListRemovePlayerFromPartyLeftGameEarly(ref byte[] data, ref int offset, List<RemovePlayerFromPartyLeftGameEarly> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RemovePlayerFromPartyLeftGameEarly value in values)
			{
				ArrayManager.WriteRemovePlayerFromPartyLeftGameEarly(ref data, ref offset, value);
			}
		}

		// Token: 0x060027AA RID: 10154 RVA: 0x000F0DAC File Offset: 0x000EEFAC
		public static RemovePlayerFromPartyLeftGameEarly ReadRemovePlayerFromPartyLeftGameEarly(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RemovePlayerFromPartyLeftGameEarly removePlayerFromPartyLeftGameEarly = new RemovePlayerFromPartyLeftGameEarly();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			removePlayerFromPartyLeftGameEarly.DeserializeMessage(array);
			return removePlayerFromPartyLeftGameEarly;
		}

		// Token: 0x060027AB RID: 10155 RVA: 0x000F0DF0 File Offset: 0x000EEFF0
		public static List<RemovePlayerFromPartyLeftGameEarly> ReadListRemovePlayerFromPartyLeftGameEarly(byte[] data, ref int offset)
		{
			List<RemovePlayerFromPartyLeftGameEarly> list = new List<RemovePlayerFromPartyLeftGameEarly>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RemovePlayerFromPartyLeftGameEarly item = ArrayManager.ReadRemovePlayerFromPartyLeftGameEarly(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027AC RID: 10156 RVA: 0x000F0E34 File Offset: 0x000EF034
		public static void WritePushPartyMemberUpdate(ref byte[] data, ref int offset, PushPartyMemberUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027AD RID: 10157 RVA: 0x000F0E50 File Offset: 0x000EF050
		public static void WriteListPushPartyMemberUpdate(ref byte[] data, ref int offset, List<PushPartyMemberUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPartyMemberUpdate value in values)
			{
				ArrayManager.WritePushPartyMemberUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x060027AE RID: 10158 RVA: 0x000F0ECC File Offset: 0x000EF0CC
		public static PushPartyMemberUpdate ReadPushPartyMemberUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPartyMemberUpdate pushPartyMemberUpdate = new PushPartyMemberUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPartyMemberUpdate.DeserializeMessage(array);
			return pushPartyMemberUpdate;
		}

		// Token: 0x060027AF RID: 10159 RVA: 0x000F0F10 File Offset: 0x000EF110
		public static List<PushPartyMemberUpdate> ReadListPushPartyMemberUpdate(byte[] data, ref int offset)
		{
			List<PushPartyMemberUpdate> list = new List<PushPartyMemberUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPartyMemberUpdate item = ArrayManager.ReadPushPartyMemberUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027B0 RID: 10160 RVA: 0x000F0F54 File Offset: 0x000EF154
		public static void WriteRequestPartyLeaderViewSync(ref byte[] data, ref int offset, RequestPartyLeaderViewSync value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027B1 RID: 10161 RVA: 0x000F0F70 File Offset: 0x000EF170
		public static void WriteListRequestPartyLeaderViewSync(ref byte[] data, ref int offset, List<RequestPartyLeaderViewSync> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPartyLeaderViewSync value in values)
			{
				ArrayManager.WriteRequestPartyLeaderViewSync(ref data, ref offset, value);
			}
		}

		// Token: 0x060027B2 RID: 10162 RVA: 0x000F0FEC File Offset: 0x000EF1EC
		public static RequestPartyLeaderViewSync ReadRequestPartyLeaderViewSync(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPartyLeaderViewSync requestPartyLeaderViewSync = new RequestPartyLeaderViewSync();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPartyLeaderViewSync.DeserializeMessage(array);
			return requestPartyLeaderViewSync;
		}

		// Token: 0x060027B3 RID: 10163 RVA: 0x000F1030 File Offset: 0x000EF230
		public static List<RequestPartyLeaderViewSync> ReadListRequestPartyLeaderViewSync(byte[] data, ref int offset)
		{
			List<RequestPartyLeaderViewSync> list = new List<RequestPartyLeaderViewSync>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPartyLeaderViewSync item = ArrayManager.ReadRequestPartyLeaderViewSync(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027B4 RID: 10164 RVA: 0x000F1074 File Offset: 0x000EF274
		public static void WritePushPartyLeaderViewSync(ref byte[] data, ref int offset, PushPartyLeaderViewSync value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027B5 RID: 10165 RVA: 0x000F1090 File Offset: 0x000EF290
		public static void WriteListPushPartyLeaderViewSync(ref byte[] data, ref int offset, List<PushPartyLeaderViewSync> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushPartyLeaderViewSync value in values)
			{
				ArrayManager.WritePushPartyLeaderViewSync(ref data, ref offset, value);
			}
		}

		// Token: 0x060027B6 RID: 10166 RVA: 0x000F110C File Offset: 0x000EF30C
		public static PushPartyLeaderViewSync ReadPushPartyLeaderViewSync(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushPartyLeaderViewSync pushPartyLeaderViewSync = new PushPartyLeaderViewSync();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushPartyLeaderViewSync.DeserializeMessage(array);
			return pushPartyLeaderViewSync;
		}

		// Token: 0x060027B7 RID: 10167 RVA: 0x000F1150 File Offset: 0x000EF350
		public static List<PushPartyLeaderViewSync> ReadListPushPartyLeaderViewSync(byte[] data, ref int offset)
		{
			List<PushPartyLeaderViewSync> list = new List<PushPartyLeaderViewSync>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushPartyLeaderViewSync item = ArrayManager.ReadPushPartyLeaderViewSync(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027B8 RID: 10168 RVA: 0x000F1194 File Offset: 0x000EF394
		public static void WritePartyMemberMapStat(ref byte[] data, ref int offset, PartyMemberMapStat value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027B9 RID: 10169 RVA: 0x000F11B0 File Offset: 0x000EF3B0
		public static void WriteListPartyMemberMapStat(ref byte[] data, ref int offset, List<PartyMemberMapStat> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PartyMemberMapStat value in values)
			{
				ArrayManager.WritePartyMemberMapStat(ref data, ref offset, value);
			}
		}

		// Token: 0x060027BA RID: 10170 RVA: 0x000F122C File Offset: 0x000EF42C
		public static PartyMemberMapStat ReadPartyMemberMapStat(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PartyMemberMapStat partyMemberMapStat = new PartyMemberMapStat();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			partyMemberMapStat.DeserializeMessage(array);
			return partyMemberMapStat;
		}

		// Token: 0x060027BB RID: 10171 RVA: 0x000F1270 File Offset: 0x000EF470
		public static List<PartyMemberMapStat> ReadListPartyMemberMapStat(byte[] data, ref int offset)
		{
			List<PartyMemberMapStat> list = new List<PartyMemberMapStat>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PartyMemberMapStat item = ArrayManager.ReadPartyMemberMapStat(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027BC RID: 10172 RVA: 0x000F12B4 File Offset: 0x000EF4B4
		public static void WritePlayerPresenceChanged(ref byte[] data, ref int offset, PlayerPresenceChanged value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027BD RID: 10173 RVA: 0x000F12D0 File Offset: 0x000EF4D0
		public static void WriteListPlayerPresenceChanged(ref byte[] data, ref int offset, List<PlayerPresenceChanged> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerPresenceChanged value in values)
			{
				ArrayManager.WritePlayerPresenceChanged(ref data, ref offset, value);
			}
		}

		// Token: 0x060027BE RID: 10174 RVA: 0x000F134C File Offset: 0x000EF54C
		public static PlayerPresenceChanged ReadPlayerPresenceChanged(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerPresenceChanged playerPresenceChanged = new PlayerPresenceChanged();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerPresenceChanged.DeserializeMessage(array);
			return playerPresenceChanged;
		}

		// Token: 0x060027BF RID: 10175 RVA: 0x000F1390 File Offset: 0x000EF590
		public static List<PlayerPresenceChanged> ReadListPlayerPresenceChanged(byte[] data, ref int offset)
		{
			List<PlayerPresenceChanged> list = new List<PlayerPresenceChanged>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerPresenceChanged item = ArrayManager.ReadPlayerPresenceChanged(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027C0 RID: 10176 RVA: 0x000F13D4 File Offset: 0x000EF5D4
		public static void WriteFriendRequestItem(ref byte[] data, ref int offset, FriendRequestItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027C1 RID: 10177 RVA: 0x000F13F0 File Offset: 0x000EF5F0
		public static void WriteListFriendRequestItem(ref byte[] data, ref int offset, List<FriendRequestItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FriendRequestItem value in values)
			{
				ArrayManager.WriteFriendRequestItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060027C2 RID: 10178 RVA: 0x000F146C File Offset: 0x000EF66C
		public static FriendRequestItem ReadFriendRequestItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FriendRequestItem friendRequestItem = new FriendRequestItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			friendRequestItem.DeserializeMessage(array);
			return friendRequestItem;
		}

		// Token: 0x060027C3 RID: 10179 RVA: 0x000F14B0 File Offset: 0x000EF6B0
		public static List<FriendRequestItem> ReadListFriendRequestItem(byte[] data, ref int offset)
		{
			List<FriendRequestItem> list = new List<FriendRequestItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FriendRequestItem item = ArrayManager.ReadFriendRequestItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027C4 RID: 10180 RVA: 0x000F14F4 File Offset: 0x000EF6F4
		public static void WriteFriendItem(ref byte[] data, ref int offset, FriendItem value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027C5 RID: 10181 RVA: 0x000F1510 File Offset: 0x000EF710
		public static void WriteListFriendItem(ref byte[] data, ref int offset, List<FriendItem> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FriendItem value in values)
			{
				ArrayManager.WriteFriendItem(ref data, ref offset, value);
			}
		}

		// Token: 0x060027C6 RID: 10182 RVA: 0x000F158C File Offset: 0x000EF78C
		public static FriendItem ReadFriendItem(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FriendItem friendItem = new FriendItem();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			friendItem.DeserializeMessage(array);
			return friendItem;
		}

		// Token: 0x060027C7 RID: 10183 RVA: 0x000F15D0 File Offset: 0x000EF7D0
		public static List<FriendItem> ReadListFriendItem(byte[] data, ref int offset)
		{
			List<FriendItem> list = new List<FriendItem>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FriendItem item = ArrayManager.ReadFriendItem(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027C8 RID: 10184 RVA: 0x000F1614 File Offset: 0x000EF814
		public static void WriteRequestCreateFriendRequest(ref byte[] data, ref int offset, RequestCreateFriendRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027C9 RID: 10185 RVA: 0x000F1630 File Offset: 0x000EF830
		public static void WriteListRequestCreateFriendRequest(ref byte[] data, ref int offset, List<RequestCreateFriendRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateFriendRequest value in values)
			{
				ArrayManager.WriteRequestCreateFriendRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x060027CA RID: 10186 RVA: 0x000F16AC File Offset: 0x000EF8AC
		public static RequestCreateFriendRequest ReadRequestCreateFriendRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateFriendRequest requestCreateFriendRequest = new RequestCreateFriendRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateFriendRequest.DeserializeMessage(array);
			return requestCreateFriendRequest;
		}

		// Token: 0x060027CB RID: 10187 RVA: 0x000F16F0 File Offset: 0x000EF8F0
		public static List<RequestCreateFriendRequest> ReadListRequestCreateFriendRequest(byte[] data, ref int offset)
		{
			List<RequestCreateFriendRequest> list = new List<RequestCreateFriendRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateFriendRequest item = ArrayManager.ReadRequestCreateFriendRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027CC RID: 10188 RVA: 0x000F1734 File Offset: 0x000EF934
		public static void WriteRequestCreateFriendRequestByName(ref byte[] data, ref int offset, RequestCreateFriendRequestByName value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027CD RID: 10189 RVA: 0x000F1750 File Offset: 0x000EF950
		public static void WriteListRequestCreateFriendRequestByName(ref byte[] data, ref int offset, List<RequestCreateFriendRequestByName> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateFriendRequestByName value in values)
			{
				ArrayManager.WriteRequestCreateFriendRequestByName(ref data, ref offset, value);
			}
		}

		// Token: 0x060027CE RID: 10190 RVA: 0x000F17CC File Offset: 0x000EF9CC
		public static RequestCreateFriendRequestByName ReadRequestCreateFriendRequestByName(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateFriendRequestByName requestCreateFriendRequestByName = new RequestCreateFriendRequestByName();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateFriendRequestByName.DeserializeMessage(array);
			return requestCreateFriendRequestByName;
		}

		// Token: 0x060027CF RID: 10191 RVA: 0x000F1810 File Offset: 0x000EFA10
		public static List<RequestCreateFriendRequestByName> ReadListRequestCreateFriendRequestByName(byte[] data, ref int offset)
		{
			List<RequestCreateFriendRequestByName> list = new List<RequestCreateFriendRequestByName>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateFriendRequestByName item = ArrayManager.ReadRequestCreateFriendRequestByName(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027D0 RID: 10192 RVA: 0x000F1854 File Offset: 0x000EFA54
		public static void WriteResponseCreateFriendRequestByName(ref byte[] data, ref int offset, ResponseCreateFriendRequestByName value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027D1 RID: 10193 RVA: 0x000F1870 File Offset: 0x000EFA70
		public static void WriteListResponseCreateFriendRequestByName(ref byte[] data, ref int offset, List<ResponseCreateFriendRequestByName> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCreateFriendRequestByName value in values)
			{
				ArrayManager.WriteResponseCreateFriendRequestByName(ref data, ref offset, value);
			}
		}

		// Token: 0x060027D2 RID: 10194 RVA: 0x000F18EC File Offset: 0x000EFAEC
		public static ResponseCreateFriendRequestByName ReadResponseCreateFriendRequestByName(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCreateFriendRequestByName responseCreateFriendRequestByName = new ResponseCreateFriendRequestByName();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCreateFriendRequestByName.DeserializeMessage(array);
			return responseCreateFriendRequestByName;
		}

		// Token: 0x060027D3 RID: 10195 RVA: 0x000F1930 File Offset: 0x000EFB30
		public static List<ResponseCreateFriendRequestByName> ReadListResponseCreateFriendRequestByName(byte[] data, ref int offset)
		{
			List<ResponseCreateFriendRequestByName> list = new List<ResponseCreateFriendRequestByName>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCreateFriendRequestByName item = ArrayManager.ReadResponseCreateFriendRequestByName(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027D4 RID: 10196 RVA: 0x000F1974 File Offset: 0x000EFB74
		public static void WriteRequestCreateFriendRequestByAccountSUID(ref byte[] data, ref int offset, RequestCreateFriendRequestByAccountSUID value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027D5 RID: 10197 RVA: 0x000F1990 File Offset: 0x000EFB90
		public static void WriteListRequestCreateFriendRequestByAccountSUID(ref byte[] data, ref int offset, List<RequestCreateFriendRequestByAccountSUID> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateFriendRequestByAccountSUID value in values)
			{
				ArrayManager.WriteRequestCreateFriendRequestByAccountSUID(ref data, ref offset, value);
			}
		}

		// Token: 0x060027D6 RID: 10198 RVA: 0x000F1A0C File Offset: 0x000EFC0C
		public static RequestCreateFriendRequestByAccountSUID ReadRequestCreateFriendRequestByAccountSUID(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateFriendRequestByAccountSUID requestCreateFriendRequestByAccountSUID = new RequestCreateFriendRequestByAccountSUID();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateFriendRequestByAccountSUID.DeserializeMessage(array);
			return requestCreateFriendRequestByAccountSUID;
		}

		// Token: 0x060027D7 RID: 10199 RVA: 0x000F1A50 File Offset: 0x000EFC50
		public static List<RequestCreateFriendRequestByAccountSUID> ReadListRequestCreateFriendRequestByAccountSUID(byte[] data, ref int offset)
		{
			List<RequestCreateFriendRequestByAccountSUID> list = new List<RequestCreateFriendRequestByAccountSUID>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateFriendRequestByAccountSUID item = ArrayManager.ReadRequestCreateFriendRequestByAccountSUID(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027D8 RID: 10200 RVA: 0x000F1A94 File Offset: 0x000EFC94
		public static void WriteResponseCreateFriendRequestByAccountSUID(ref byte[] data, ref int offset, ResponseCreateFriendRequestByAccountSUID value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027D9 RID: 10201 RVA: 0x000F1AB0 File Offset: 0x000EFCB0
		public static void WriteListResponseCreateFriendRequestByAccountSUID(ref byte[] data, ref int offset, List<ResponseCreateFriendRequestByAccountSUID> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCreateFriendRequestByAccountSUID value in values)
			{
				ArrayManager.WriteResponseCreateFriendRequestByAccountSUID(ref data, ref offset, value);
			}
		}

		// Token: 0x060027DA RID: 10202 RVA: 0x000F1B2C File Offset: 0x000EFD2C
		public static ResponseCreateFriendRequestByAccountSUID ReadResponseCreateFriendRequestByAccountSUID(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCreateFriendRequestByAccountSUID responseCreateFriendRequestByAccountSUID = new ResponseCreateFriendRequestByAccountSUID();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCreateFriendRequestByAccountSUID.DeserializeMessage(array);
			return responseCreateFriendRequestByAccountSUID;
		}

		// Token: 0x060027DB RID: 10203 RVA: 0x000F1B70 File Offset: 0x000EFD70
		public static List<ResponseCreateFriendRequestByAccountSUID> ReadListResponseCreateFriendRequestByAccountSUID(byte[] data, ref int offset)
		{
			List<ResponseCreateFriendRequestByAccountSUID> list = new List<ResponseCreateFriendRequestByAccountSUID>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCreateFriendRequestByAccountSUID item = ArrayManager.ReadResponseCreateFriendRequestByAccountSUID(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027DC RID: 10204 RVA: 0x000F1BB4 File Offset: 0x000EFDB4
		public static void WriteRequestDeleteFriend(ref byte[] data, ref int offset, RequestDeleteFriend value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027DD RID: 10205 RVA: 0x000F1BD0 File Offset: 0x000EFDD0
		public static void WriteListRequestDeleteFriend(ref byte[] data, ref int offset, List<RequestDeleteFriend> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestDeleteFriend value in values)
			{
				ArrayManager.WriteRequestDeleteFriend(ref data, ref offset, value);
			}
		}

		// Token: 0x060027DE RID: 10206 RVA: 0x000F1C4C File Offset: 0x000EFE4C
		public static RequestDeleteFriend ReadRequestDeleteFriend(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestDeleteFriend requestDeleteFriend = new RequestDeleteFriend();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestDeleteFriend.DeserializeMessage(array);
			return requestDeleteFriend;
		}

		// Token: 0x060027DF RID: 10207 RVA: 0x000F1C90 File Offset: 0x000EFE90
		public static List<RequestDeleteFriend> ReadListRequestDeleteFriend(byte[] data, ref int offset)
		{
			List<RequestDeleteFriend> list = new List<RequestDeleteFriend>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestDeleteFriend item = ArrayManager.ReadRequestDeleteFriend(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027E0 RID: 10208 RVA: 0x000F1CD4 File Offset: 0x000EFED4
		public static void WriteResponseDeleteFriend(ref byte[] data, ref int offset, ResponseDeleteFriend value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027E1 RID: 10209 RVA: 0x000F1CF0 File Offset: 0x000EFEF0
		public static void WriteListResponseDeleteFriend(ref byte[] data, ref int offset, List<ResponseDeleteFriend> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseDeleteFriend value in values)
			{
				ArrayManager.WriteResponseDeleteFriend(ref data, ref offset, value);
			}
		}

		// Token: 0x060027E2 RID: 10210 RVA: 0x000F1D6C File Offset: 0x000EFF6C
		public static ResponseDeleteFriend ReadResponseDeleteFriend(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseDeleteFriend responseDeleteFriend = new ResponseDeleteFriend();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseDeleteFriend.DeserializeMessage(array);
			return responseDeleteFriend;
		}

		// Token: 0x060027E3 RID: 10211 RVA: 0x000F1DB0 File Offset: 0x000EFFB0
		public static List<ResponseDeleteFriend> ReadListResponseDeleteFriend(byte[] data, ref int offset)
		{
			List<ResponseDeleteFriend> list = new List<ResponseDeleteFriend>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseDeleteFriend item = ArrayManager.ReadResponseDeleteFriend(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027E4 RID: 10212 RVA: 0x000F1DF4 File Offset: 0x000EFFF4
		public static void WriteRequestAcceptFriendRequest(ref byte[] data, ref int offset, RequestAcceptFriendRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027E5 RID: 10213 RVA: 0x000F1E10 File Offset: 0x000F0010
		public static void WriteListRequestAcceptFriendRequest(ref byte[] data, ref int offset, List<RequestAcceptFriendRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestAcceptFriendRequest value in values)
			{
				ArrayManager.WriteRequestAcceptFriendRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x060027E6 RID: 10214 RVA: 0x000F1E8C File Offset: 0x000F008C
		public static RequestAcceptFriendRequest ReadRequestAcceptFriendRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestAcceptFriendRequest requestAcceptFriendRequest = new RequestAcceptFriendRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestAcceptFriendRequest.DeserializeMessage(array);
			return requestAcceptFriendRequest;
		}

		// Token: 0x060027E7 RID: 10215 RVA: 0x000F1ED0 File Offset: 0x000F00D0
		public static List<RequestAcceptFriendRequest> ReadListRequestAcceptFriendRequest(byte[] data, ref int offset)
		{
			List<RequestAcceptFriendRequest> list = new List<RequestAcceptFriendRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestAcceptFriendRequest item = ArrayManager.ReadRequestAcceptFriendRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027E8 RID: 10216 RVA: 0x000F1F14 File Offset: 0x000F0114
		public static void WriteResponseAcceptFriendRequest(ref byte[] data, ref int offset, ResponseAcceptFriendRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027E9 RID: 10217 RVA: 0x000F1F30 File Offset: 0x000F0130
		public static void WriteListResponseAcceptFriendRequest(ref byte[] data, ref int offset, List<ResponseAcceptFriendRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseAcceptFriendRequest value in values)
			{
				ArrayManager.WriteResponseAcceptFriendRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x060027EA RID: 10218 RVA: 0x000F1FAC File Offset: 0x000F01AC
		public static ResponseAcceptFriendRequest ReadResponseAcceptFriendRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseAcceptFriendRequest responseAcceptFriendRequest = new ResponseAcceptFriendRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseAcceptFriendRequest.DeserializeMessage(array);
			return responseAcceptFriendRequest;
		}

		// Token: 0x060027EB RID: 10219 RVA: 0x000F1FF0 File Offset: 0x000F01F0
		public static List<ResponseAcceptFriendRequest> ReadListResponseAcceptFriendRequest(byte[] data, ref int offset)
		{
			List<ResponseAcceptFriendRequest> list = new List<ResponseAcceptFriendRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseAcceptFriendRequest item = ArrayManager.ReadResponseAcceptFriendRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027EC RID: 10220 RVA: 0x000F2034 File Offset: 0x000F0234
		public static void WriteRequestDenyFriendRequest(ref byte[] data, ref int offset, RequestDenyFriendRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027ED RID: 10221 RVA: 0x000F2050 File Offset: 0x000F0250
		public static void WriteListRequestDenyFriendRequest(ref byte[] data, ref int offset, List<RequestDenyFriendRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestDenyFriendRequest value in values)
			{
				ArrayManager.WriteRequestDenyFriendRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x060027EE RID: 10222 RVA: 0x000F20CC File Offset: 0x000F02CC
		public static RequestDenyFriendRequest ReadRequestDenyFriendRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestDenyFriendRequest requestDenyFriendRequest = new RequestDenyFriendRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestDenyFriendRequest.DeserializeMessage(array);
			return requestDenyFriendRequest;
		}

		// Token: 0x060027EF RID: 10223 RVA: 0x000F2110 File Offset: 0x000F0310
		public static List<RequestDenyFriendRequest> ReadListRequestDenyFriendRequest(byte[] data, ref int offset)
		{
			List<RequestDenyFriendRequest> list = new List<RequestDenyFriendRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestDenyFriendRequest item = ArrayManager.ReadRequestDenyFriendRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027F0 RID: 10224 RVA: 0x000F2154 File Offset: 0x000F0354
		public static void WriteResponseDenyFriendRequest(ref byte[] data, ref int offset, ResponseDenyFriendRequest value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027F1 RID: 10225 RVA: 0x000F2170 File Offset: 0x000F0370
		public static void WriteListResponseDenyFriendRequest(ref byte[] data, ref int offset, List<ResponseDenyFriendRequest> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseDenyFriendRequest value in values)
			{
				ArrayManager.WriteResponseDenyFriendRequest(ref data, ref offset, value);
			}
		}

		// Token: 0x060027F2 RID: 10226 RVA: 0x000F21EC File Offset: 0x000F03EC
		public static ResponseDenyFriendRequest ReadResponseDenyFriendRequest(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseDenyFriendRequest responseDenyFriendRequest = new ResponseDenyFriendRequest();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseDenyFriendRequest.DeserializeMessage(array);
			return responseDenyFriendRequest;
		}

		// Token: 0x060027F3 RID: 10227 RVA: 0x000F2230 File Offset: 0x000F0430
		public static List<ResponseDenyFriendRequest> ReadListResponseDenyFriendRequest(byte[] data, ref int offset)
		{
			List<ResponseDenyFriendRequest> list = new List<ResponseDenyFriendRequest>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseDenyFriendRequest item = ArrayManager.ReadResponseDenyFriendRequest(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027F4 RID: 10228 RVA: 0x000F2274 File Offset: 0x000F0474
		public static void WriteRequestGetFriendRequests(ref byte[] data, ref int offset, RequestGetFriendRequests value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027F5 RID: 10229 RVA: 0x000F2290 File Offset: 0x000F0490
		public static void WriteListRequestGetFriendRequests(ref byte[] data, ref int offset, List<RequestGetFriendRequests> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetFriendRequests value in values)
			{
				ArrayManager.WriteRequestGetFriendRequests(ref data, ref offset, value);
			}
		}

		// Token: 0x060027F6 RID: 10230 RVA: 0x000F230C File Offset: 0x000F050C
		public static RequestGetFriendRequests ReadRequestGetFriendRequests(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetFriendRequests requestGetFriendRequests = new RequestGetFriendRequests();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetFriendRequests.DeserializeMessage(array);
			return requestGetFriendRequests;
		}

		// Token: 0x060027F7 RID: 10231 RVA: 0x000F2350 File Offset: 0x000F0550
		public static List<RequestGetFriendRequests> ReadListRequestGetFriendRequests(byte[] data, ref int offset)
		{
			List<RequestGetFriendRequests> list = new List<RequestGetFriendRequests>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetFriendRequests item = ArrayManager.ReadRequestGetFriendRequests(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027F8 RID: 10232 RVA: 0x000F2394 File Offset: 0x000F0594
		public static void WriteResponseGetFriendRequests(ref byte[] data, ref int offset, ResponseGetFriendRequests value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027F9 RID: 10233 RVA: 0x000F23B0 File Offset: 0x000F05B0
		public static void WriteListResponseGetFriendRequests(ref byte[] data, ref int offset, List<ResponseGetFriendRequests> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetFriendRequests value in values)
			{
				ArrayManager.WriteResponseGetFriendRequests(ref data, ref offset, value);
			}
		}

		// Token: 0x060027FA RID: 10234 RVA: 0x000F242C File Offset: 0x000F062C
		public static ResponseGetFriendRequests ReadResponseGetFriendRequests(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetFriendRequests responseGetFriendRequests = new ResponseGetFriendRequests();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetFriendRequests.DeserializeMessage(array);
			return responseGetFriendRequests;
		}

		// Token: 0x060027FB RID: 10235 RVA: 0x000F2470 File Offset: 0x000F0670
		public static List<ResponseGetFriendRequests> ReadListResponseGetFriendRequests(byte[] data, ref int offset)
		{
			List<ResponseGetFriendRequests> list = new List<ResponseGetFriendRequests>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetFriendRequests item = ArrayManager.ReadResponseGetFriendRequests(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060027FC RID: 10236 RVA: 0x000F24B4 File Offset: 0x000F06B4
		public static void WriteRequestGetFriends(ref byte[] data, ref int offset, RequestGetFriends value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060027FD RID: 10237 RVA: 0x000F24D0 File Offset: 0x000F06D0
		public static void WriteListRequestGetFriends(ref byte[] data, ref int offset, List<RequestGetFriends> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetFriends value in values)
			{
				ArrayManager.WriteRequestGetFriends(ref data, ref offset, value);
			}
		}

		// Token: 0x060027FE RID: 10238 RVA: 0x000F254C File Offset: 0x000F074C
		public static RequestGetFriends ReadRequestGetFriends(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetFriends requestGetFriends = new RequestGetFriends();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetFriends.DeserializeMessage(array);
			return requestGetFriends;
		}

		// Token: 0x060027FF RID: 10239 RVA: 0x000F2590 File Offset: 0x000F0790
		public static List<RequestGetFriends> ReadListRequestGetFriends(byte[] data, ref int offset)
		{
			List<RequestGetFriends> list = new List<RequestGetFriends>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetFriends item = ArrayManager.ReadRequestGetFriends(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002800 RID: 10240 RVA: 0x000F25D4 File Offset: 0x000F07D4
		public static void WriteResponseGetFriends(ref byte[] data, ref int offset, ResponseGetFriends value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002801 RID: 10241 RVA: 0x000F25F0 File Offset: 0x000F07F0
		public static void WriteListResponseGetFriends(ref byte[] data, ref int offset, List<ResponseGetFriends> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetFriends value in values)
			{
				ArrayManager.WriteResponseGetFriends(ref data, ref offset, value);
			}
		}

		// Token: 0x06002802 RID: 10242 RVA: 0x000F266C File Offset: 0x000F086C
		public static ResponseGetFriends ReadResponseGetFriends(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetFriends responseGetFriends = new ResponseGetFriends();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetFriends.DeserializeMessage(array);
			return responseGetFriends;
		}

		// Token: 0x06002803 RID: 10243 RVA: 0x000F26B0 File Offset: 0x000F08B0
		public static List<ResponseGetFriends> ReadListResponseGetFriends(byte[] data, ref int offset)
		{
			List<ResponseGetFriends> list = new List<ResponseGetFriends>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetFriends item = ArrayManager.ReadResponseGetFriends(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002804 RID: 10244 RVA: 0x000F26F4 File Offset: 0x000F08F4
		public static void WriteFriendRequestReceived(ref byte[] data, ref int offset, FriendRequestReceived value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002805 RID: 10245 RVA: 0x000F2710 File Offset: 0x000F0910
		public static void WriteListFriendRequestReceived(ref byte[] data, ref int offset, List<FriendRequestReceived> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FriendRequestReceived value in values)
			{
				ArrayManager.WriteFriendRequestReceived(ref data, ref offset, value);
			}
		}

		// Token: 0x06002806 RID: 10246 RVA: 0x000F278C File Offset: 0x000F098C
		public static FriendRequestReceived ReadFriendRequestReceived(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FriendRequestReceived friendRequestReceived = new FriendRequestReceived();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			friendRequestReceived.DeserializeMessage(array);
			return friendRequestReceived;
		}

		// Token: 0x06002807 RID: 10247 RVA: 0x000F27D0 File Offset: 0x000F09D0
		public static List<FriendRequestReceived> ReadListFriendRequestReceived(byte[] data, ref int offset)
		{
			List<FriendRequestReceived> list = new List<FriendRequestReceived>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FriendRequestReceived item = ArrayManager.ReadFriendRequestReceived(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002808 RID: 10248 RVA: 0x000F2814 File Offset: 0x000F0A14
		public static void WriteFriendRequestAccepted(ref byte[] data, ref int offset, FriendRequestAccepted value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002809 RID: 10249 RVA: 0x000F2830 File Offset: 0x000F0A30
		public static void WriteListFriendRequestAccepted(ref byte[] data, ref int offset, List<FriendRequestAccepted> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FriendRequestAccepted value in values)
			{
				ArrayManager.WriteFriendRequestAccepted(ref data, ref offset, value);
			}
		}

		// Token: 0x0600280A RID: 10250 RVA: 0x000F28AC File Offset: 0x000F0AAC
		public static FriendRequestAccepted ReadFriendRequestAccepted(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FriendRequestAccepted friendRequestAccepted = new FriendRequestAccepted();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			friendRequestAccepted.DeserializeMessage(array);
			return friendRequestAccepted;
		}

		// Token: 0x0600280B RID: 10251 RVA: 0x000F28F0 File Offset: 0x000F0AF0
		public static List<FriendRequestAccepted> ReadListFriendRequestAccepted(byte[] data, ref int offset)
		{
			List<FriendRequestAccepted> list = new List<FriendRequestAccepted>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FriendRequestAccepted item = ArrayManager.ReadFriendRequestAccepted(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600280C RID: 10252 RVA: 0x000F2934 File Offset: 0x000F0B34
		public static void WriteFriendRemoved(ref byte[] data, ref int offset, FriendRemoved value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600280D RID: 10253 RVA: 0x000F2950 File Offset: 0x000F0B50
		public static void WriteListFriendRemoved(ref byte[] data, ref int offset, List<FriendRemoved> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FriendRemoved value in values)
			{
				ArrayManager.WriteFriendRemoved(ref data, ref offset, value);
			}
		}

		// Token: 0x0600280E RID: 10254 RVA: 0x000F29CC File Offset: 0x000F0BCC
		public static FriendRemoved ReadFriendRemoved(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FriendRemoved friendRemoved = new FriendRemoved();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			friendRemoved.DeserializeMessage(array);
			return friendRemoved;
		}

		// Token: 0x0600280F RID: 10255 RVA: 0x000F2A10 File Offset: 0x000F0C10
		public static List<FriendRemoved> ReadListFriendRemoved(byte[] data, ref int offset)
		{
			List<FriendRemoved> list = new List<FriendRemoved>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FriendRemoved item = ArrayManager.ReadFriendRemoved(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002810 RID: 10256 RVA: 0x000F2A54 File Offset: 0x000F0C54
		public static void WriteFriendPresenceChanged(ref byte[] data, ref int offset, FriendPresenceChanged value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002811 RID: 10257 RVA: 0x000F2A70 File Offset: 0x000F0C70
		public static void WriteListFriendPresenceChanged(ref byte[] data, ref int offset, List<FriendPresenceChanged> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (FriendPresenceChanged value in values)
			{
				ArrayManager.WriteFriendPresenceChanged(ref data, ref offset, value);
			}
		}

		// Token: 0x06002812 RID: 10258 RVA: 0x000F2AEC File Offset: 0x000F0CEC
		public static FriendPresenceChanged ReadFriendPresenceChanged(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			FriendPresenceChanged friendPresenceChanged = new FriendPresenceChanged();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			friendPresenceChanged.DeserializeMessage(array);
			return friendPresenceChanged;
		}

		// Token: 0x06002813 RID: 10259 RVA: 0x000F2B30 File Offset: 0x000F0D30
		public static List<FriendPresenceChanged> ReadListFriendPresenceChanged(byte[] data, ref int offset)
		{
			List<FriendPresenceChanged> list = new List<FriendPresenceChanged>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				FriendPresenceChanged item = ArrayManager.ReadFriendPresenceChanged(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002814 RID: 10260 RVA: 0x000F2B74 File Offset: 0x000F0D74
		public static void WritePushFriendUpdate(ref byte[] data, ref int offset, PushFriendUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002815 RID: 10261 RVA: 0x000F2B90 File Offset: 0x000F0D90
		public static void WriteListPushFriendUpdate(ref byte[] data, ref int offset, List<PushFriendUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushFriendUpdate value in values)
			{
				ArrayManager.WritePushFriendUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x06002816 RID: 10262 RVA: 0x000F2C0C File Offset: 0x000F0E0C
		public static PushFriendUpdate ReadPushFriendUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushFriendUpdate pushFriendUpdate = new PushFriendUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushFriendUpdate.DeserializeMessage(array);
			return pushFriendUpdate;
		}

		// Token: 0x06002817 RID: 10263 RVA: 0x000F2C50 File Offset: 0x000F0E50
		public static List<PushFriendUpdate> ReadListPushFriendUpdate(byte[] data, ref int offset)
		{
			List<PushFriendUpdate> list = new List<PushFriendUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushFriendUpdate item = ArrayManager.ReadPushFriendUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002818 RID: 10264 RVA: 0x000F2C94 File Offset: 0x000F0E94
		public static void WriteGuildPresenceChanged(ref byte[] data, ref int offset, GuildPresenceChanged value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002819 RID: 10265 RVA: 0x000F2CB0 File Offset: 0x000F0EB0
		public static void WriteListGuildPresenceChanged(ref byte[] data, ref int offset, List<GuildPresenceChanged> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildPresenceChanged value in values)
			{
				ArrayManager.WriteGuildPresenceChanged(ref data, ref offset, value);
			}
		}

		// Token: 0x0600281A RID: 10266 RVA: 0x000F2D2C File Offset: 0x000F0F2C
		public static GuildPresenceChanged ReadGuildPresenceChanged(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildPresenceChanged guildPresenceChanged = new GuildPresenceChanged();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildPresenceChanged.DeserializeMessage(array);
			return guildPresenceChanged;
		}

		// Token: 0x0600281B RID: 10267 RVA: 0x000F2D70 File Offset: 0x000F0F70
		public static List<GuildPresenceChanged> ReadListGuildPresenceChanged(byte[] data, ref int offset)
		{
			List<GuildPresenceChanged> list = new List<GuildPresenceChanged>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildPresenceChanged item = ArrayManager.ReadGuildPresenceChanged(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600281C RID: 10268 RVA: 0x000F2DB4 File Offset: 0x000F0FB4
		public static void WriteRequestRejectGuildApplication(ref byte[] data, ref int offset, RequestRejectGuildApplication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600281D RID: 10269 RVA: 0x000F2DD0 File Offset: 0x000F0FD0
		public static void WriteListRequestRejectGuildApplication(ref byte[] data, ref int offset, List<RequestRejectGuildApplication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestRejectGuildApplication value in values)
			{
				ArrayManager.WriteRequestRejectGuildApplication(ref data, ref offset, value);
			}
		}

		// Token: 0x0600281E RID: 10270 RVA: 0x000F2E4C File Offset: 0x000F104C
		public static RequestRejectGuildApplication ReadRequestRejectGuildApplication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestRejectGuildApplication requestRejectGuildApplication = new RequestRejectGuildApplication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestRejectGuildApplication.DeserializeMessage(array);
			return requestRejectGuildApplication;
		}

		// Token: 0x0600281F RID: 10271 RVA: 0x000F2E90 File Offset: 0x000F1090
		public static List<RequestRejectGuildApplication> ReadListRequestRejectGuildApplication(byte[] data, ref int offset)
		{
			List<RequestRejectGuildApplication> list = new List<RequestRejectGuildApplication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestRejectGuildApplication item = ArrayManager.ReadRequestRejectGuildApplication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002820 RID: 10272 RVA: 0x000F2ED4 File Offset: 0x000F10D4
		public static void WriteResponseRejectGuildApplication(ref byte[] data, ref int offset, ResponseRejectGuildApplication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002821 RID: 10273 RVA: 0x000F2EF0 File Offset: 0x000F10F0
		public static void WriteListResponseRejectGuildApplication(ref byte[] data, ref int offset, List<ResponseRejectGuildApplication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseRejectGuildApplication value in values)
			{
				ArrayManager.WriteResponseRejectGuildApplication(ref data, ref offset, value);
			}
		}

		// Token: 0x06002822 RID: 10274 RVA: 0x000F2F6C File Offset: 0x000F116C
		public static ResponseRejectGuildApplication ReadResponseRejectGuildApplication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseRejectGuildApplication responseRejectGuildApplication = new ResponseRejectGuildApplication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseRejectGuildApplication.DeserializeMessage(array);
			return responseRejectGuildApplication;
		}

		// Token: 0x06002823 RID: 10275 RVA: 0x000F2FB0 File Offset: 0x000F11B0
		public static List<ResponseRejectGuildApplication> ReadListResponseRejectGuildApplication(byte[] data, ref int offset)
		{
			List<ResponseRejectGuildApplication> list = new List<ResponseRejectGuildApplication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseRejectGuildApplication item = ArrayManager.ReadResponseRejectGuildApplication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002824 RID: 10276 RVA: 0x000F2FF4 File Offset: 0x000F11F4
		public static void WriteRequestRejectGuildInvite(ref byte[] data, ref int offset, RequestRejectGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002825 RID: 10277 RVA: 0x000F3010 File Offset: 0x000F1210
		public static void WriteListRequestRejectGuildInvite(ref byte[] data, ref int offset, List<RequestRejectGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestRejectGuildInvite value in values)
			{
				ArrayManager.WriteRequestRejectGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x06002826 RID: 10278 RVA: 0x000F308C File Offset: 0x000F128C
		public static RequestRejectGuildInvite ReadRequestRejectGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestRejectGuildInvite requestRejectGuildInvite = new RequestRejectGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestRejectGuildInvite.DeserializeMessage(array);
			return requestRejectGuildInvite;
		}

		// Token: 0x06002827 RID: 10279 RVA: 0x000F30D0 File Offset: 0x000F12D0
		public static List<RequestRejectGuildInvite> ReadListRequestRejectGuildInvite(byte[] data, ref int offset)
		{
			List<RequestRejectGuildInvite> list = new List<RequestRejectGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestRejectGuildInvite item = ArrayManager.ReadRequestRejectGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002828 RID: 10280 RVA: 0x000F3114 File Offset: 0x000F1314
		public static void WriteResponseRejectGuildInvite(ref byte[] data, ref int offset, ResponseRejectGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002829 RID: 10281 RVA: 0x000F3130 File Offset: 0x000F1330
		public static void WriteListResponseRejectGuildInvite(ref byte[] data, ref int offset, List<ResponseRejectGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseRejectGuildInvite value in values)
			{
				ArrayManager.WriteResponseRejectGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x0600282A RID: 10282 RVA: 0x000F31AC File Offset: 0x000F13AC
		public static ResponseRejectGuildInvite ReadResponseRejectGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseRejectGuildInvite responseRejectGuildInvite = new ResponseRejectGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseRejectGuildInvite.DeserializeMessage(array);
			return responseRejectGuildInvite;
		}

		// Token: 0x0600282B RID: 10283 RVA: 0x000F31F0 File Offset: 0x000F13F0
		public static List<ResponseRejectGuildInvite> ReadListResponseRejectGuildInvite(byte[] data, ref int offset)
		{
			List<ResponseRejectGuildInvite> list = new List<ResponseRejectGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseRejectGuildInvite item = ArrayManager.ReadResponseRejectGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600282C RID: 10284 RVA: 0x000F3234 File Offset: 0x000F1434
		public static void WriteRequestCreateGuild(ref byte[] data, ref int offset, RequestCreateGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600282D RID: 10285 RVA: 0x000F3250 File Offset: 0x000F1450
		public static void WriteListRequestCreateGuild(ref byte[] data, ref int offset, List<RequestCreateGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCreateGuild value in values)
			{
				ArrayManager.WriteRequestCreateGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x0600282E RID: 10286 RVA: 0x000F32CC File Offset: 0x000F14CC
		public static RequestCreateGuild ReadRequestCreateGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCreateGuild requestCreateGuild = new RequestCreateGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCreateGuild.DeserializeMessage(array);
			return requestCreateGuild;
		}

		// Token: 0x0600282F RID: 10287 RVA: 0x000F3310 File Offset: 0x000F1510
		public static List<RequestCreateGuild> ReadListRequestCreateGuild(byte[] data, ref int offset)
		{
			List<RequestCreateGuild> list = new List<RequestCreateGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCreateGuild item = ArrayManager.ReadRequestCreateGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002830 RID: 10288 RVA: 0x000F3354 File Offset: 0x000F1554
		public static void WriteRequestCheckGuildName(ref byte[] data, ref int offset, RequestCheckGuildName value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002831 RID: 10289 RVA: 0x000F3370 File Offset: 0x000F1570
		public static void WriteListRequestCheckGuildName(ref byte[] data, ref int offset, List<RequestCheckGuildName> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCheckGuildName value in values)
			{
				ArrayManager.WriteRequestCheckGuildName(ref data, ref offset, value);
			}
		}

		// Token: 0x06002832 RID: 10290 RVA: 0x000F33EC File Offset: 0x000F15EC
		public static RequestCheckGuildName ReadRequestCheckGuildName(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCheckGuildName requestCheckGuildName = new RequestCheckGuildName();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCheckGuildName.DeserializeMessage(array);
			return requestCheckGuildName;
		}

		// Token: 0x06002833 RID: 10291 RVA: 0x000F3430 File Offset: 0x000F1630
		public static List<RequestCheckGuildName> ReadListRequestCheckGuildName(byte[] data, ref int offset)
		{
			List<RequestCheckGuildName> list = new List<RequestCheckGuildName>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCheckGuildName item = ArrayManager.ReadRequestCheckGuildName(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002834 RID: 10292 RVA: 0x000F3474 File Offset: 0x000F1674
		public static void WriteResponseCheckGuildName(ref byte[] data, ref int offset, ResponseCheckGuildName value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002835 RID: 10293 RVA: 0x000F3490 File Offset: 0x000F1690
		public static void WriteListResponseCheckGuildName(ref byte[] data, ref int offset, List<ResponseCheckGuildName> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCheckGuildName value in values)
			{
				ArrayManager.WriteResponseCheckGuildName(ref data, ref offset, value);
			}
		}

		// Token: 0x06002836 RID: 10294 RVA: 0x000F350C File Offset: 0x000F170C
		public static ResponseCheckGuildName ReadResponseCheckGuildName(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCheckGuildName responseCheckGuildName = new ResponseCheckGuildName();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCheckGuildName.DeserializeMessage(array);
			return responseCheckGuildName;
		}

		// Token: 0x06002837 RID: 10295 RVA: 0x000F3550 File Offset: 0x000F1750
		public static List<ResponseCheckGuildName> ReadListResponseCheckGuildName(byte[] data, ref int offset)
		{
			List<ResponseCheckGuildName> list = new List<ResponseCheckGuildName>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCheckGuildName item = ArrayManager.ReadResponseCheckGuildName(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002838 RID: 10296 RVA: 0x000F3594 File Offset: 0x000F1794
		public static void WriteRequestCheckGuildTag(ref byte[] data, ref int offset, RequestCheckGuildTag value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002839 RID: 10297 RVA: 0x000F35B0 File Offset: 0x000F17B0
		public static void WriteListRequestCheckGuildTag(ref byte[] data, ref int offset, List<RequestCheckGuildTag> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCheckGuildTag value in values)
			{
				ArrayManager.WriteRequestCheckGuildTag(ref data, ref offset, value);
			}
		}

		// Token: 0x0600283A RID: 10298 RVA: 0x000F362C File Offset: 0x000F182C
		public static RequestCheckGuildTag ReadRequestCheckGuildTag(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCheckGuildTag requestCheckGuildTag = new RequestCheckGuildTag();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCheckGuildTag.DeserializeMessage(array);
			return requestCheckGuildTag;
		}

		// Token: 0x0600283B RID: 10299 RVA: 0x000F3670 File Offset: 0x000F1870
		public static List<RequestCheckGuildTag> ReadListRequestCheckGuildTag(byte[] data, ref int offset)
		{
			List<RequestCheckGuildTag> list = new List<RequestCheckGuildTag>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCheckGuildTag item = ArrayManager.ReadRequestCheckGuildTag(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600283C RID: 10300 RVA: 0x000F36B4 File Offset: 0x000F18B4
		public static void WriteResponseCheckGuildTag(ref byte[] data, ref int offset, ResponseCheckGuildTag value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600283D RID: 10301 RVA: 0x000F36D0 File Offset: 0x000F18D0
		public static void WriteListResponseCheckGuildTag(ref byte[] data, ref int offset, List<ResponseCheckGuildTag> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCheckGuildTag value in values)
			{
				ArrayManager.WriteResponseCheckGuildTag(ref data, ref offset, value);
			}
		}

		// Token: 0x0600283E RID: 10302 RVA: 0x000F374C File Offset: 0x000F194C
		public static ResponseCheckGuildTag ReadResponseCheckGuildTag(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCheckGuildTag responseCheckGuildTag = new ResponseCheckGuildTag();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCheckGuildTag.DeserializeMessage(array);
			return responseCheckGuildTag;
		}

		// Token: 0x0600283F RID: 10303 RVA: 0x000F3790 File Offset: 0x000F1990
		public static List<ResponseCheckGuildTag> ReadListResponseCheckGuildTag(byte[] data, ref int offset)
		{
			List<ResponseCheckGuildTag> list = new List<ResponseCheckGuildTag>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCheckGuildTag item = ArrayManager.ReadResponseCheckGuildTag(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002840 RID: 10304 RVA: 0x000F37D4 File Offset: 0x000F19D4
		public static void WriteResponseCreateGuild(ref byte[] data, ref int offset, ResponseCreateGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002841 RID: 10305 RVA: 0x000F37F0 File Offset: 0x000F19F0
		public static void WriteListResponseCreateGuild(ref byte[] data, ref int offset, List<ResponseCreateGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCreateGuild value in values)
			{
				ArrayManager.WriteResponseCreateGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x06002842 RID: 10306 RVA: 0x000F386C File Offset: 0x000F1A6C
		public static ResponseCreateGuild ReadResponseCreateGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCreateGuild responseCreateGuild = new ResponseCreateGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCreateGuild.DeserializeMessage(array);
			return responseCreateGuild;
		}

		// Token: 0x06002843 RID: 10307 RVA: 0x000F38B0 File Offset: 0x000F1AB0
		public static List<ResponseCreateGuild> ReadListResponseCreateGuild(byte[] data, ref int offset)
		{
			List<ResponseCreateGuild> list = new List<ResponseCreateGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCreateGuild item = ArrayManager.ReadResponseCreateGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002844 RID: 10308 RVA: 0x000F38F4 File Offset: 0x000F1AF4
		public static void WriteRequestPromoteGuildMember(ref byte[] data, ref int offset, RequestPromoteGuildMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002845 RID: 10309 RVA: 0x000F3910 File Offset: 0x000F1B10
		public static void WriteListRequestPromoteGuildMember(ref byte[] data, ref int offset, List<RequestPromoteGuildMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPromoteGuildMember value in values)
			{
				ArrayManager.WriteRequestPromoteGuildMember(ref data, ref offset, value);
			}
		}

		// Token: 0x06002846 RID: 10310 RVA: 0x000F398C File Offset: 0x000F1B8C
		public static RequestPromoteGuildMember ReadRequestPromoteGuildMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPromoteGuildMember requestPromoteGuildMember = new RequestPromoteGuildMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPromoteGuildMember.DeserializeMessage(array);
			return requestPromoteGuildMember;
		}

		// Token: 0x06002847 RID: 10311 RVA: 0x000F39D0 File Offset: 0x000F1BD0
		public static List<RequestPromoteGuildMember> ReadListRequestPromoteGuildMember(byte[] data, ref int offset)
		{
			List<RequestPromoteGuildMember> list = new List<RequestPromoteGuildMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPromoteGuildMember item = ArrayManager.ReadRequestPromoteGuildMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002848 RID: 10312 RVA: 0x000F3A14 File Offset: 0x000F1C14
		public static void WriteResponsePromoteGuildMember(ref byte[] data, ref int offset, ResponsePromoteGuildMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002849 RID: 10313 RVA: 0x000F3A30 File Offset: 0x000F1C30
		public static void WriteListResponsePromoteGuildMember(ref byte[] data, ref int offset, List<ResponsePromoteGuildMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponsePromoteGuildMember value in values)
			{
				ArrayManager.WriteResponsePromoteGuildMember(ref data, ref offset, value);
			}
		}

		// Token: 0x0600284A RID: 10314 RVA: 0x000F3AAC File Offset: 0x000F1CAC
		public static ResponsePromoteGuildMember ReadResponsePromoteGuildMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponsePromoteGuildMember responsePromoteGuildMember = new ResponsePromoteGuildMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responsePromoteGuildMember.DeserializeMessage(array);
			return responsePromoteGuildMember;
		}

		// Token: 0x0600284B RID: 10315 RVA: 0x000F3AF0 File Offset: 0x000F1CF0
		public static List<ResponsePromoteGuildMember> ReadListResponsePromoteGuildMember(byte[] data, ref int offset)
		{
			List<ResponsePromoteGuildMember> list = new List<ResponsePromoteGuildMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponsePromoteGuildMember item = ArrayManager.ReadResponsePromoteGuildMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600284C RID: 10316 RVA: 0x000F3B34 File Offset: 0x000F1D34
		public static void WriteRequestDemoteGuildMember(ref byte[] data, ref int offset, RequestDemoteGuildMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600284D RID: 10317 RVA: 0x000F3B50 File Offset: 0x000F1D50
		public static void WriteListRequestDemoteGuildMember(ref byte[] data, ref int offset, List<RequestDemoteGuildMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestDemoteGuildMember value in values)
			{
				ArrayManager.WriteRequestDemoteGuildMember(ref data, ref offset, value);
			}
		}

		// Token: 0x0600284E RID: 10318 RVA: 0x000F3BCC File Offset: 0x000F1DCC
		public static RequestDemoteGuildMember ReadRequestDemoteGuildMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestDemoteGuildMember requestDemoteGuildMember = new RequestDemoteGuildMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestDemoteGuildMember.DeserializeMessage(array);
			return requestDemoteGuildMember;
		}

		// Token: 0x0600284F RID: 10319 RVA: 0x000F3C10 File Offset: 0x000F1E10
		public static List<RequestDemoteGuildMember> ReadListRequestDemoteGuildMember(byte[] data, ref int offset)
		{
			List<RequestDemoteGuildMember> list = new List<RequestDemoteGuildMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestDemoteGuildMember item = ArrayManager.ReadRequestDemoteGuildMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002850 RID: 10320 RVA: 0x000F3C54 File Offset: 0x000F1E54
		public static void WriteResponseDemoteGuildMember(ref byte[] data, ref int offset, ResponseDemoteGuildMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002851 RID: 10321 RVA: 0x000F3C70 File Offset: 0x000F1E70
		public static void WriteListResponseDemoteGuildMember(ref byte[] data, ref int offset, List<ResponseDemoteGuildMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseDemoteGuildMember value in values)
			{
				ArrayManager.WriteResponseDemoteGuildMember(ref data, ref offset, value);
			}
		}

		// Token: 0x06002852 RID: 10322 RVA: 0x000F3CEC File Offset: 0x000F1EEC
		public static ResponseDemoteGuildMember ReadResponseDemoteGuildMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseDemoteGuildMember responseDemoteGuildMember = new ResponseDemoteGuildMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseDemoteGuildMember.DeserializeMessage(array);
			return responseDemoteGuildMember;
		}

		// Token: 0x06002853 RID: 10323 RVA: 0x000F3D30 File Offset: 0x000F1F30
		public static List<ResponseDemoteGuildMember> ReadListResponseDemoteGuildMember(byte[] data, ref int offset)
		{
			List<ResponseDemoteGuildMember> list = new List<ResponseDemoteGuildMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseDemoteGuildMember item = ArrayManager.ReadResponseDemoteGuildMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002854 RID: 10324 RVA: 0x000F3D74 File Offset: 0x000F1F74
		public static void WriteRequestApplyToGuild(ref byte[] data, ref int offset, RequestApplyToGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002855 RID: 10325 RVA: 0x000F3D90 File Offset: 0x000F1F90
		public static void WriteListRequestApplyToGuild(ref byte[] data, ref int offset, List<RequestApplyToGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestApplyToGuild value in values)
			{
				ArrayManager.WriteRequestApplyToGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x06002856 RID: 10326 RVA: 0x000F3E0C File Offset: 0x000F200C
		public static RequestApplyToGuild ReadRequestApplyToGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestApplyToGuild requestApplyToGuild = new RequestApplyToGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestApplyToGuild.DeserializeMessage(array);
			return requestApplyToGuild;
		}

		// Token: 0x06002857 RID: 10327 RVA: 0x000F3E50 File Offset: 0x000F2050
		public static List<RequestApplyToGuild> ReadListRequestApplyToGuild(byte[] data, ref int offset)
		{
			List<RequestApplyToGuild> list = new List<RequestApplyToGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestApplyToGuild item = ArrayManager.ReadRequestApplyToGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002858 RID: 10328 RVA: 0x000F3E94 File Offset: 0x000F2094
		public static void WriteResponseApplyToGuild(ref byte[] data, ref int offset, ResponseApplyToGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002859 RID: 10329 RVA: 0x000F3EB0 File Offset: 0x000F20B0
		public static void WriteListResponseApplyToGuild(ref byte[] data, ref int offset, List<ResponseApplyToGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseApplyToGuild value in values)
			{
				ArrayManager.WriteResponseApplyToGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x0600285A RID: 10330 RVA: 0x000F3F2C File Offset: 0x000F212C
		public static ResponseApplyToGuild ReadResponseApplyToGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseApplyToGuild responseApplyToGuild = new ResponseApplyToGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseApplyToGuild.DeserializeMessage(array);
			return responseApplyToGuild;
		}

		// Token: 0x0600285B RID: 10331 RVA: 0x000F3F70 File Offset: 0x000F2170
		public static List<ResponseApplyToGuild> ReadListResponseApplyToGuild(byte[] data, ref int offset)
		{
			List<ResponseApplyToGuild> list = new List<ResponseApplyToGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseApplyToGuild item = ArrayManager.ReadResponseApplyToGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600285C RID: 10332 RVA: 0x000F3FB4 File Offset: 0x000F21B4
		public static void WriteGuildApplication(ref byte[] data, ref int offset, GuildApplication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600285D RID: 10333 RVA: 0x000F3FD0 File Offset: 0x000F21D0
		public static void WriteListGuildApplication(ref byte[] data, ref int offset, List<GuildApplication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildApplication value in values)
			{
				ArrayManager.WriteGuildApplication(ref data, ref offset, value);
			}
		}

		// Token: 0x0600285E RID: 10334 RVA: 0x000F404C File Offset: 0x000F224C
		public static GuildApplication ReadGuildApplication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildApplication guildApplication = new GuildApplication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildApplication.DeserializeMessage(array);
			return guildApplication;
		}

		// Token: 0x0600285F RID: 10335 RVA: 0x000F4090 File Offset: 0x000F2290
		public static List<GuildApplication> ReadListGuildApplication(byte[] data, ref int offset)
		{
			List<GuildApplication> list = new List<GuildApplication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildApplication item = ArrayManager.ReadGuildApplication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002860 RID: 10336 RVA: 0x000F40D4 File Offset: 0x000F22D4
		public static void WriteRequestGetApplicationsForGuild(ref byte[] data, ref int offset, RequestGetApplicationsForGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002861 RID: 10337 RVA: 0x000F40F0 File Offset: 0x000F22F0
		public static void WriteListRequestGetApplicationsForGuild(ref byte[] data, ref int offset, List<RequestGetApplicationsForGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetApplicationsForGuild value in values)
			{
				ArrayManager.WriteRequestGetApplicationsForGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x06002862 RID: 10338 RVA: 0x000F416C File Offset: 0x000F236C
		public static RequestGetApplicationsForGuild ReadRequestGetApplicationsForGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetApplicationsForGuild requestGetApplicationsForGuild = new RequestGetApplicationsForGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetApplicationsForGuild.DeserializeMessage(array);
			return requestGetApplicationsForGuild;
		}

		// Token: 0x06002863 RID: 10339 RVA: 0x000F41B0 File Offset: 0x000F23B0
		public static List<RequestGetApplicationsForGuild> ReadListRequestGetApplicationsForGuild(byte[] data, ref int offset)
		{
			List<RequestGetApplicationsForGuild> list = new List<RequestGetApplicationsForGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetApplicationsForGuild item = ArrayManager.ReadRequestGetApplicationsForGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002864 RID: 10340 RVA: 0x000F41F4 File Offset: 0x000F23F4
		public static void WriteResponseGetApplicationsForGuild(ref byte[] data, ref int offset, ResponseGetApplicationsForGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002865 RID: 10341 RVA: 0x000F4210 File Offset: 0x000F2410
		public static void WriteListResponseGetApplicationsForGuild(ref byte[] data, ref int offset, List<ResponseGetApplicationsForGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetApplicationsForGuild value in values)
			{
				ArrayManager.WriteResponseGetApplicationsForGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x06002866 RID: 10342 RVA: 0x000F428C File Offset: 0x000F248C
		public static ResponseGetApplicationsForGuild ReadResponseGetApplicationsForGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetApplicationsForGuild responseGetApplicationsForGuild = new ResponseGetApplicationsForGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetApplicationsForGuild.DeserializeMessage(array);
			return responseGetApplicationsForGuild;
		}

		// Token: 0x06002867 RID: 10343 RVA: 0x000F42D0 File Offset: 0x000F24D0
		public static List<ResponseGetApplicationsForGuild> ReadListResponseGetApplicationsForGuild(byte[] data, ref int offset)
		{
			List<ResponseGetApplicationsForGuild> list = new List<ResponseGetApplicationsForGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetApplicationsForGuild item = ArrayManager.ReadResponseGetApplicationsForGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002868 RID: 10344 RVA: 0x000F4314 File Offset: 0x000F2514
		public static void WriteGuildInvite(ref byte[] data, ref int offset, GuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002869 RID: 10345 RVA: 0x000F4330 File Offset: 0x000F2530
		public static void WriteListGuildInvite(ref byte[] data, ref int offset, List<GuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildInvite value in values)
			{
				ArrayManager.WriteGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x0600286A RID: 10346 RVA: 0x000F43AC File Offset: 0x000F25AC
		public static GuildInvite ReadGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildInvite guildInvite = new GuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildInvite.DeserializeMessage(array);
			return guildInvite;
		}

		// Token: 0x0600286B RID: 10347 RVA: 0x000F43F0 File Offset: 0x000F25F0
		public static List<GuildInvite> ReadListGuildInvite(byte[] data, ref int offset)
		{
			List<GuildInvite> list = new List<GuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildInvite item = ArrayManager.ReadGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600286C RID: 10348 RVA: 0x000F4434 File Offset: 0x000F2634
		public static void WriteRequestGetGuildInvitesForGuild(ref byte[] data, ref int offset, RequestGetGuildInvitesForGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600286D RID: 10349 RVA: 0x000F4450 File Offset: 0x000F2650
		public static void WriteListRequestGetGuildInvitesForGuild(ref byte[] data, ref int offset, List<RequestGetGuildInvitesForGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetGuildInvitesForGuild value in values)
			{
				ArrayManager.WriteRequestGetGuildInvitesForGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x0600286E RID: 10350 RVA: 0x000F44CC File Offset: 0x000F26CC
		public static RequestGetGuildInvitesForGuild ReadRequestGetGuildInvitesForGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetGuildInvitesForGuild requestGetGuildInvitesForGuild = new RequestGetGuildInvitesForGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetGuildInvitesForGuild.DeserializeMessage(array);
			return requestGetGuildInvitesForGuild;
		}

		// Token: 0x0600286F RID: 10351 RVA: 0x000F4510 File Offset: 0x000F2710
		public static List<RequestGetGuildInvitesForGuild> ReadListRequestGetGuildInvitesForGuild(byte[] data, ref int offset)
		{
			List<RequestGetGuildInvitesForGuild> list = new List<RequestGetGuildInvitesForGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetGuildInvitesForGuild item = ArrayManager.ReadRequestGetGuildInvitesForGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002870 RID: 10352 RVA: 0x000F4554 File Offset: 0x000F2754
		public static void WriteResponseGetGuildInvitesForGuild(ref byte[] data, ref int offset, ResponseGetGuildInvitesForGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002871 RID: 10353 RVA: 0x000F4570 File Offset: 0x000F2770
		public static void WriteListResponseGetGuildInvitesForGuild(ref byte[] data, ref int offset, List<ResponseGetGuildInvitesForGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetGuildInvitesForGuild value in values)
			{
				ArrayManager.WriteResponseGetGuildInvitesForGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x06002872 RID: 10354 RVA: 0x000F45EC File Offset: 0x000F27EC
		public static ResponseGetGuildInvitesForGuild ReadResponseGetGuildInvitesForGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetGuildInvitesForGuild responseGetGuildInvitesForGuild = new ResponseGetGuildInvitesForGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetGuildInvitesForGuild.DeserializeMessage(array);
			return responseGetGuildInvitesForGuild;
		}

		// Token: 0x06002873 RID: 10355 RVA: 0x000F4630 File Offset: 0x000F2830
		public static List<ResponseGetGuildInvitesForGuild> ReadListResponseGetGuildInvitesForGuild(byte[] data, ref int offset)
		{
			List<ResponseGetGuildInvitesForGuild> list = new List<ResponseGetGuildInvitesForGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetGuildInvitesForGuild item = ArrayManager.ReadResponseGetGuildInvitesForGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002874 RID: 10356 RVA: 0x000F4674 File Offset: 0x000F2874
		public static void WriteRequestAcceptGuildApplication(ref byte[] data, ref int offset, RequestAcceptGuildApplication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002875 RID: 10357 RVA: 0x000F4690 File Offset: 0x000F2890
		public static void WriteListRequestAcceptGuildApplication(ref byte[] data, ref int offset, List<RequestAcceptGuildApplication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestAcceptGuildApplication value in values)
			{
				ArrayManager.WriteRequestAcceptGuildApplication(ref data, ref offset, value);
			}
		}

		// Token: 0x06002876 RID: 10358 RVA: 0x000F470C File Offset: 0x000F290C
		public static RequestAcceptGuildApplication ReadRequestAcceptGuildApplication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestAcceptGuildApplication requestAcceptGuildApplication = new RequestAcceptGuildApplication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestAcceptGuildApplication.DeserializeMessage(array);
			return requestAcceptGuildApplication;
		}

		// Token: 0x06002877 RID: 10359 RVA: 0x000F4750 File Offset: 0x000F2950
		public static List<RequestAcceptGuildApplication> ReadListRequestAcceptGuildApplication(byte[] data, ref int offset)
		{
			List<RequestAcceptGuildApplication> list = new List<RequestAcceptGuildApplication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestAcceptGuildApplication item = ArrayManager.ReadRequestAcceptGuildApplication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002878 RID: 10360 RVA: 0x000F4794 File Offset: 0x000F2994
		public static void WriteResponseAcceptGuildApplication(ref byte[] data, ref int offset, ResponseAcceptGuildApplication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002879 RID: 10361 RVA: 0x000F47B0 File Offset: 0x000F29B0
		public static void WriteListResponseAcceptGuildApplication(ref byte[] data, ref int offset, List<ResponseAcceptGuildApplication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseAcceptGuildApplication value in values)
			{
				ArrayManager.WriteResponseAcceptGuildApplication(ref data, ref offset, value);
			}
		}

		// Token: 0x0600287A RID: 10362 RVA: 0x000F482C File Offset: 0x000F2A2C
		public static ResponseAcceptGuildApplication ReadResponseAcceptGuildApplication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseAcceptGuildApplication responseAcceptGuildApplication = new ResponseAcceptGuildApplication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseAcceptGuildApplication.DeserializeMessage(array);
			return responseAcceptGuildApplication;
		}

		// Token: 0x0600287B RID: 10363 RVA: 0x000F4870 File Offset: 0x000F2A70
		public static List<ResponseAcceptGuildApplication> ReadListResponseAcceptGuildApplication(byte[] data, ref int offset)
		{
			List<ResponseAcceptGuildApplication> list = new List<ResponseAcceptGuildApplication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseAcceptGuildApplication item = ArrayManager.ReadResponseAcceptGuildApplication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600287C RID: 10364 RVA: 0x000F48B4 File Offset: 0x000F2AB4
		public static void WriteRequestSendGuildInvite(ref byte[] data, ref int offset, RequestSendGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600287D RID: 10365 RVA: 0x000F48D0 File Offset: 0x000F2AD0
		public static void WriteListRequestSendGuildInvite(ref byte[] data, ref int offset, List<RequestSendGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSendGuildInvite value in values)
			{
				ArrayManager.WriteRequestSendGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x0600287E RID: 10366 RVA: 0x000F494C File Offset: 0x000F2B4C
		public static RequestSendGuildInvite ReadRequestSendGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSendGuildInvite requestSendGuildInvite = new RequestSendGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSendGuildInvite.DeserializeMessage(array);
			return requestSendGuildInvite;
		}

		// Token: 0x0600287F RID: 10367 RVA: 0x000F4990 File Offset: 0x000F2B90
		public static List<RequestSendGuildInvite> ReadListRequestSendGuildInvite(byte[] data, ref int offset)
		{
			List<RequestSendGuildInvite> list = new List<RequestSendGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSendGuildInvite item = ArrayManager.ReadRequestSendGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002880 RID: 10368 RVA: 0x000F49D4 File Offset: 0x000F2BD4
		public static void WriteResponseSendGuildInvite(ref byte[] data, ref int offset, ResponseSendGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002881 RID: 10369 RVA: 0x000F49F0 File Offset: 0x000F2BF0
		public static void WriteListResponseSendGuildInvite(ref byte[] data, ref int offset, List<ResponseSendGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSendGuildInvite value in values)
			{
				ArrayManager.WriteResponseSendGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x06002882 RID: 10370 RVA: 0x000F4A6C File Offset: 0x000F2C6C
		public static ResponseSendGuildInvite ReadResponseSendGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSendGuildInvite responseSendGuildInvite = new ResponseSendGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSendGuildInvite.DeserializeMessage(array);
			return responseSendGuildInvite;
		}

		// Token: 0x06002883 RID: 10371 RVA: 0x000F4AB0 File Offset: 0x000F2CB0
		public static List<ResponseSendGuildInvite> ReadListResponseSendGuildInvite(byte[] data, ref int offset)
		{
			List<ResponseSendGuildInvite> list = new List<ResponseSendGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSendGuildInvite item = ArrayManager.ReadResponseSendGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002884 RID: 10372 RVA: 0x000F4AF4 File Offset: 0x000F2CF4
		public static void WriteRequestAcceptGuildInvite(ref byte[] data, ref int offset, RequestAcceptGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002885 RID: 10373 RVA: 0x000F4B10 File Offset: 0x000F2D10
		public static void WriteListRequestAcceptGuildInvite(ref byte[] data, ref int offset, List<RequestAcceptGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestAcceptGuildInvite value in values)
			{
				ArrayManager.WriteRequestAcceptGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x06002886 RID: 10374 RVA: 0x000F4B8C File Offset: 0x000F2D8C
		public static RequestAcceptGuildInvite ReadRequestAcceptGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestAcceptGuildInvite requestAcceptGuildInvite = new RequestAcceptGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestAcceptGuildInvite.DeserializeMessage(array);
			return requestAcceptGuildInvite;
		}

		// Token: 0x06002887 RID: 10375 RVA: 0x000F4BD0 File Offset: 0x000F2DD0
		public static List<RequestAcceptGuildInvite> ReadListRequestAcceptGuildInvite(byte[] data, ref int offset)
		{
			List<RequestAcceptGuildInvite> list = new List<RequestAcceptGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestAcceptGuildInvite item = ArrayManager.ReadRequestAcceptGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002888 RID: 10376 RVA: 0x000F4C14 File Offset: 0x000F2E14
		public static void WriteResponseAcceptGuildInvite(ref byte[] data, ref int offset, ResponseAcceptGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002889 RID: 10377 RVA: 0x000F4C30 File Offset: 0x000F2E30
		public static void WriteListResponseAcceptGuildInvite(ref byte[] data, ref int offset, List<ResponseAcceptGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseAcceptGuildInvite value in values)
			{
				ArrayManager.WriteResponseAcceptGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x0600288A RID: 10378 RVA: 0x000F4CAC File Offset: 0x000F2EAC
		public static ResponseAcceptGuildInvite ReadResponseAcceptGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseAcceptGuildInvite responseAcceptGuildInvite = new ResponseAcceptGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseAcceptGuildInvite.DeserializeMessage(array);
			return responseAcceptGuildInvite;
		}

		// Token: 0x0600288B RID: 10379 RVA: 0x000F4CF0 File Offset: 0x000F2EF0
		public static List<ResponseAcceptGuildInvite> ReadListResponseAcceptGuildInvite(byte[] data, ref int offset)
		{
			List<ResponseAcceptGuildInvite> list = new List<ResponseAcceptGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseAcceptGuildInvite item = ArrayManager.ReadResponseAcceptGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600288C RID: 10380 RVA: 0x000F4D34 File Offset: 0x000F2F34
		public static void WriteRequestCancelGuildApplication(ref byte[] data, ref int offset, RequestCancelGuildApplication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600288D RID: 10381 RVA: 0x000F4D50 File Offset: 0x000F2F50
		public static void WriteListRequestCancelGuildApplication(ref byte[] data, ref int offset, List<RequestCancelGuildApplication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCancelGuildApplication value in values)
			{
				ArrayManager.WriteRequestCancelGuildApplication(ref data, ref offset, value);
			}
		}

		// Token: 0x0600288E RID: 10382 RVA: 0x000F4DCC File Offset: 0x000F2FCC
		public static RequestCancelGuildApplication ReadRequestCancelGuildApplication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCancelGuildApplication requestCancelGuildApplication = new RequestCancelGuildApplication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCancelGuildApplication.DeserializeMessage(array);
			return requestCancelGuildApplication;
		}

		// Token: 0x0600288F RID: 10383 RVA: 0x000F4E10 File Offset: 0x000F3010
		public static List<RequestCancelGuildApplication> ReadListRequestCancelGuildApplication(byte[] data, ref int offset)
		{
			List<RequestCancelGuildApplication> list = new List<RequestCancelGuildApplication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCancelGuildApplication item = ArrayManager.ReadRequestCancelGuildApplication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002890 RID: 10384 RVA: 0x000F4E54 File Offset: 0x000F3054
		public static void WriteResponseCancelGuildApplication(ref byte[] data, ref int offset, ResponseCancelGuildApplication value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002891 RID: 10385 RVA: 0x000F4E70 File Offset: 0x000F3070
		public static void WriteListResponseCancelGuildApplication(ref byte[] data, ref int offset, List<ResponseCancelGuildApplication> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCancelGuildApplication value in values)
			{
				ArrayManager.WriteResponseCancelGuildApplication(ref data, ref offset, value);
			}
		}

		// Token: 0x06002892 RID: 10386 RVA: 0x000F4EEC File Offset: 0x000F30EC
		public static ResponseCancelGuildApplication ReadResponseCancelGuildApplication(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCancelGuildApplication responseCancelGuildApplication = new ResponseCancelGuildApplication();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCancelGuildApplication.DeserializeMessage(array);
			return responseCancelGuildApplication;
		}

		// Token: 0x06002893 RID: 10387 RVA: 0x000F4F30 File Offset: 0x000F3130
		public static List<ResponseCancelGuildApplication> ReadListResponseCancelGuildApplication(byte[] data, ref int offset)
		{
			List<ResponseCancelGuildApplication> list = new List<ResponseCancelGuildApplication>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCancelGuildApplication item = ArrayManager.ReadResponseCancelGuildApplication(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002894 RID: 10388 RVA: 0x000F4F74 File Offset: 0x000F3174
		public static void WriteRequestCancelGuildInvite(ref byte[] data, ref int offset, RequestCancelGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002895 RID: 10389 RVA: 0x000F4F90 File Offset: 0x000F3190
		public static void WriteListRequestCancelGuildInvite(ref byte[] data, ref int offset, List<RequestCancelGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCancelGuildInvite value in values)
			{
				ArrayManager.WriteRequestCancelGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x06002896 RID: 10390 RVA: 0x000F500C File Offset: 0x000F320C
		public static RequestCancelGuildInvite ReadRequestCancelGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCancelGuildInvite requestCancelGuildInvite = new RequestCancelGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCancelGuildInvite.DeserializeMessage(array);
			return requestCancelGuildInvite;
		}

		// Token: 0x06002897 RID: 10391 RVA: 0x000F5050 File Offset: 0x000F3250
		public static List<RequestCancelGuildInvite> ReadListRequestCancelGuildInvite(byte[] data, ref int offset)
		{
			List<RequestCancelGuildInvite> list = new List<RequestCancelGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCancelGuildInvite item = ArrayManager.ReadRequestCancelGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002898 RID: 10392 RVA: 0x000F5094 File Offset: 0x000F3294
		public static void WriteResponseCancelGuildInvite(ref byte[] data, ref int offset, ResponseCancelGuildInvite value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002899 RID: 10393 RVA: 0x000F50B0 File Offset: 0x000F32B0
		public static void WriteListResponseCancelGuildInvite(ref byte[] data, ref int offset, List<ResponseCancelGuildInvite> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseCancelGuildInvite value in values)
			{
				ArrayManager.WriteResponseCancelGuildInvite(ref data, ref offset, value);
			}
		}

		// Token: 0x0600289A RID: 10394 RVA: 0x000F512C File Offset: 0x000F332C
		public static ResponseCancelGuildInvite ReadResponseCancelGuildInvite(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseCancelGuildInvite responseCancelGuildInvite = new ResponseCancelGuildInvite();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseCancelGuildInvite.DeserializeMessage(array);
			return responseCancelGuildInvite;
		}

		// Token: 0x0600289B RID: 10395 RVA: 0x000F5170 File Offset: 0x000F3370
		public static List<ResponseCancelGuildInvite> ReadListResponseCancelGuildInvite(byte[] data, ref int offset)
		{
			List<ResponseCancelGuildInvite> list = new List<ResponseCancelGuildInvite>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseCancelGuildInvite item = ArrayManager.ReadResponseCancelGuildInvite(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600289C RID: 10396 RVA: 0x000F51B4 File Offset: 0x000F33B4
		public static void WriteRequestRemoveGuildMember(ref byte[] data, ref int offset, RequestRemoveGuildMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600289D RID: 10397 RVA: 0x000F51D0 File Offset: 0x000F33D0
		public static void WriteListRequestRemoveGuildMember(ref byte[] data, ref int offset, List<RequestRemoveGuildMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestRemoveGuildMember value in values)
			{
				ArrayManager.WriteRequestRemoveGuildMember(ref data, ref offset, value);
			}
		}

		// Token: 0x0600289E RID: 10398 RVA: 0x000F524C File Offset: 0x000F344C
		public static RequestRemoveGuildMember ReadRequestRemoveGuildMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestRemoveGuildMember requestRemoveGuildMember = new RequestRemoveGuildMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestRemoveGuildMember.DeserializeMessage(array);
			return requestRemoveGuildMember;
		}

		// Token: 0x0600289F RID: 10399 RVA: 0x000F5290 File Offset: 0x000F3490
		public static List<RequestRemoveGuildMember> ReadListRequestRemoveGuildMember(byte[] data, ref int offset)
		{
			List<RequestRemoveGuildMember> list = new List<RequestRemoveGuildMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestRemoveGuildMember item = ArrayManager.ReadRequestRemoveGuildMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028A0 RID: 10400 RVA: 0x000F52D4 File Offset: 0x000F34D4
		public static void WriteResponseRemoveGuildMember(ref byte[] data, ref int offset, ResponseRemoveGuildMember value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028A1 RID: 10401 RVA: 0x000F52F0 File Offset: 0x000F34F0
		public static void WriteListResponseRemoveGuildMember(ref byte[] data, ref int offset, List<ResponseRemoveGuildMember> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseRemoveGuildMember value in values)
			{
				ArrayManager.WriteResponseRemoveGuildMember(ref data, ref offset, value);
			}
		}

		// Token: 0x060028A2 RID: 10402 RVA: 0x000F536C File Offset: 0x000F356C
		public static ResponseRemoveGuildMember ReadResponseRemoveGuildMember(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseRemoveGuildMember responseRemoveGuildMember = new ResponseRemoveGuildMember();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseRemoveGuildMember.DeserializeMessage(array);
			return responseRemoveGuildMember;
		}

		// Token: 0x060028A3 RID: 10403 RVA: 0x000F53B0 File Offset: 0x000F35B0
		public static List<ResponseRemoveGuildMember> ReadListResponseRemoveGuildMember(byte[] data, ref int offset)
		{
			List<ResponseRemoveGuildMember> list = new List<ResponseRemoveGuildMember>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseRemoveGuildMember item = ArrayManager.ReadResponseRemoveGuildMember(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028A4 RID: 10404 RVA: 0x000F53F4 File Offset: 0x000F35F4
		public static void WriteRequestLeaveGuild(ref byte[] data, ref int offset, RequestLeaveGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028A5 RID: 10405 RVA: 0x000F5410 File Offset: 0x000F3610
		public static void WriteListRequestLeaveGuild(ref byte[] data, ref int offset, List<RequestLeaveGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestLeaveGuild value in values)
			{
				ArrayManager.WriteRequestLeaveGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x060028A6 RID: 10406 RVA: 0x000F548C File Offset: 0x000F368C
		public static RequestLeaveGuild ReadRequestLeaveGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestLeaveGuild requestLeaveGuild = new RequestLeaveGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestLeaveGuild.DeserializeMessage(array);
			return requestLeaveGuild;
		}

		// Token: 0x060028A7 RID: 10407 RVA: 0x000F54D0 File Offset: 0x000F36D0
		public static List<RequestLeaveGuild> ReadListRequestLeaveGuild(byte[] data, ref int offset)
		{
			List<RequestLeaveGuild> list = new List<RequestLeaveGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestLeaveGuild item = ArrayManager.ReadRequestLeaveGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028A8 RID: 10408 RVA: 0x000F5514 File Offset: 0x000F3714
		public static void WriteResponseLeaveGuild(ref byte[] data, ref int offset, ResponseLeaveGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028A9 RID: 10409 RVA: 0x000F5530 File Offset: 0x000F3730
		public static void WriteListResponseLeaveGuild(ref byte[] data, ref int offset, List<ResponseLeaveGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseLeaveGuild value in values)
			{
				ArrayManager.WriteResponseLeaveGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x060028AA RID: 10410 RVA: 0x000F55AC File Offset: 0x000F37AC
		public static ResponseLeaveGuild ReadResponseLeaveGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseLeaveGuild responseLeaveGuild = new ResponseLeaveGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseLeaveGuild.DeserializeMessage(array);
			return responseLeaveGuild;
		}

		// Token: 0x060028AB RID: 10411 RVA: 0x000F55F0 File Offset: 0x000F37F0
		public static List<ResponseLeaveGuild> ReadListResponseLeaveGuild(byte[] data, ref int offset)
		{
			List<ResponseLeaveGuild> list = new List<ResponseLeaveGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseLeaveGuild item = ArrayManager.ReadResponseLeaveGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028AC RID: 10412 RVA: 0x000F5634 File Offset: 0x000F3834
		public static void WriteRequestDisbandGuild(ref byte[] data, ref int offset, RequestDisbandGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028AD RID: 10413 RVA: 0x000F5650 File Offset: 0x000F3850
		public static void WriteListRequestDisbandGuild(ref byte[] data, ref int offset, List<RequestDisbandGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestDisbandGuild value in values)
			{
				ArrayManager.WriteRequestDisbandGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x060028AE RID: 10414 RVA: 0x000F56CC File Offset: 0x000F38CC
		public static RequestDisbandGuild ReadRequestDisbandGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestDisbandGuild requestDisbandGuild = new RequestDisbandGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestDisbandGuild.DeserializeMessage(array);
			return requestDisbandGuild;
		}

		// Token: 0x060028AF RID: 10415 RVA: 0x000F5710 File Offset: 0x000F3910
		public static List<RequestDisbandGuild> ReadListRequestDisbandGuild(byte[] data, ref int offset)
		{
			List<RequestDisbandGuild> list = new List<RequestDisbandGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestDisbandGuild item = ArrayManager.ReadRequestDisbandGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028B0 RID: 10416 RVA: 0x000F5754 File Offset: 0x000F3954
		public static void WriteResponseDisbandGuild(ref byte[] data, ref int offset, ResponseDisbandGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028B1 RID: 10417 RVA: 0x000F5770 File Offset: 0x000F3970
		public static void WriteListResponseDisbandGuild(ref byte[] data, ref int offset, List<ResponseDisbandGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseDisbandGuild value in values)
			{
				ArrayManager.WriteResponseDisbandGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x060028B2 RID: 10418 RVA: 0x000F57EC File Offset: 0x000F39EC
		public static ResponseDisbandGuild ReadResponseDisbandGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseDisbandGuild responseDisbandGuild = new ResponseDisbandGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseDisbandGuild.DeserializeMessage(array);
			return responseDisbandGuild;
		}

		// Token: 0x060028B3 RID: 10419 RVA: 0x000F5830 File Offset: 0x000F3A30
		public static List<ResponseDisbandGuild> ReadListResponseDisbandGuild(byte[] data, ref int offset)
		{
			List<ResponseDisbandGuild> list = new List<ResponseDisbandGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseDisbandGuild item = ArrayManager.ReadResponseDisbandGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028B4 RID: 10420 RVA: 0x000F5874 File Offset: 0x000F3A74
		public static void WriteGuildEntry(ref byte[] data, ref int offset, GuildEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028B5 RID: 10421 RVA: 0x000F5890 File Offset: 0x000F3A90
		public static void WriteListGuildEntry(ref byte[] data, ref int offset, List<GuildEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildEntry value in values)
			{
				ArrayManager.WriteGuildEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x060028B6 RID: 10422 RVA: 0x000F590C File Offset: 0x000F3B0C
		public static GuildEntry ReadGuildEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildEntry guildEntry = new GuildEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildEntry.DeserializeMessage(array);
			return guildEntry;
		}

		// Token: 0x060028B7 RID: 10423 RVA: 0x000F5950 File Offset: 0x000F3B50
		public static List<GuildEntry> ReadListGuildEntry(byte[] data, ref int offset)
		{
			List<GuildEntry> list = new List<GuildEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildEntry item = ArrayManager.ReadGuildEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028B8 RID: 10424 RVA: 0x000F5994 File Offset: 0x000F3B94
		public static void WriteRequestGetGuildDetail(ref byte[] data, ref int offset, RequestGetGuildDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028B9 RID: 10425 RVA: 0x000F59B0 File Offset: 0x000F3BB0
		public static void WriteListRequestGetGuildDetail(ref byte[] data, ref int offset, List<RequestGetGuildDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetGuildDetail value in values)
			{
				ArrayManager.WriteRequestGetGuildDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x060028BA RID: 10426 RVA: 0x000F5A2C File Offset: 0x000F3C2C
		public static RequestGetGuildDetail ReadRequestGetGuildDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetGuildDetail requestGetGuildDetail = new RequestGetGuildDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetGuildDetail.DeserializeMessage(array);
			return requestGetGuildDetail;
		}

		// Token: 0x060028BB RID: 10427 RVA: 0x000F5A70 File Offset: 0x000F3C70
		public static List<RequestGetGuildDetail> ReadListRequestGetGuildDetail(byte[] data, ref int offset)
		{
			List<RequestGetGuildDetail> list = new List<RequestGetGuildDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetGuildDetail item = ArrayManager.ReadRequestGetGuildDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028BC RID: 10428 RVA: 0x000F5AB4 File Offset: 0x000F3CB4
		public static void WriteRequestGetGuildDetailByTag(ref byte[] data, ref int offset, RequestGetGuildDetailByTag value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028BD RID: 10429 RVA: 0x000F5AD0 File Offset: 0x000F3CD0
		public static void WriteListRequestGetGuildDetailByTag(ref byte[] data, ref int offset, List<RequestGetGuildDetailByTag> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetGuildDetailByTag value in values)
			{
				ArrayManager.WriteRequestGetGuildDetailByTag(ref data, ref offset, value);
			}
		}

		// Token: 0x060028BE RID: 10430 RVA: 0x000F5B4C File Offset: 0x000F3D4C
		public static RequestGetGuildDetailByTag ReadRequestGetGuildDetailByTag(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetGuildDetailByTag requestGetGuildDetailByTag = new RequestGetGuildDetailByTag();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetGuildDetailByTag.DeserializeMessage(array);
			return requestGetGuildDetailByTag;
		}

		// Token: 0x060028BF RID: 10431 RVA: 0x000F5B90 File Offset: 0x000F3D90
		public static List<RequestGetGuildDetailByTag> ReadListRequestGetGuildDetailByTag(byte[] data, ref int offset)
		{
			List<RequestGetGuildDetailByTag> list = new List<RequestGetGuildDetailByTag>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetGuildDetailByTag item = ArrayManager.ReadRequestGetGuildDetailByTag(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028C0 RID: 10432 RVA: 0x000F5BD4 File Offset: 0x000F3DD4
		public static void WriteGuildMemberEntry(ref byte[] data, ref int offset, GuildMemberEntry value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028C1 RID: 10433 RVA: 0x000F5BF0 File Offset: 0x000F3DF0
		public static void WriteListGuildMemberEntry(ref byte[] data, ref int offset, List<GuildMemberEntry> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildMemberEntry value in values)
			{
				ArrayManager.WriteGuildMemberEntry(ref data, ref offset, value);
			}
		}

		// Token: 0x060028C2 RID: 10434 RVA: 0x000F5C6C File Offset: 0x000F3E6C
		public static GuildMemberEntry ReadGuildMemberEntry(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildMemberEntry guildMemberEntry = new GuildMemberEntry();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildMemberEntry.DeserializeMessage(array);
			return guildMemberEntry;
		}

		// Token: 0x060028C3 RID: 10435 RVA: 0x000F5CB0 File Offset: 0x000F3EB0
		public static List<GuildMemberEntry> ReadListGuildMemberEntry(byte[] data, ref int offset)
		{
			List<GuildMemberEntry> list = new List<GuildMemberEntry>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildMemberEntry item = ArrayManager.ReadGuildMemberEntry(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028C4 RID: 10436 RVA: 0x000F5CF4 File Offset: 0x000F3EF4
		public static void WriteGuildDetail(ref byte[] data, ref int offset, GuildDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028C5 RID: 10437 RVA: 0x000F5D10 File Offset: 0x000F3F10
		public static void WriteListGuildDetail(ref byte[] data, ref int offset, List<GuildDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildDetail value in values)
			{
				ArrayManager.WriteGuildDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x060028C6 RID: 10438 RVA: 0x000F5D8C File Offset: 0x000F3F8C
		public static GuildDetail ReadGuildDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildDetail guildDetail = new GuildDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildDetail.DeserializeMessage(array);
			return guildDetail;
		}

		// Token: 0x060028C7 RID: 10439 RVA: 0x000F5DD0 File Offset: 0x000F3FD0
		public static List<GuildDetail> ReadListGuildDetail(byte[] data, ref int offset)
		{
			List<GuildDetail> list = new List<GuildDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildDetail item = ArrayManager.ReadGuildDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028C8 RID: 10440 RVA: 0x000F5E14 File Offset: 0x000F4014
		public static void WriteResponseGetGuildDetail(ref byte[] data, ref int offset, ResponseGetGuildDetail value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028C9 RID: 10441 RVA: 0x000F5E30 File Offset: 0x000F4030
		public static void WriteListResponseGetGuildDetail(ref byte[] data, ref int offset, List<ResponseGetGuildDetail> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetGuildDetail value in values)
			{
				ArrayManager.WriteResponseGetGuildDetail(ref data, ref offset, value);
			}
		}

		// Token: 0x060028CA RID: 10442 RVA: 0x000F5EAC File Offset: 0x000F40AC
		public static ResponseGetGuildDetail ReadResponseGetGuildDetail(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetGuildDetail responseGetGuildDetail = new ResponseGetGuildDetail();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetGuildDetail.DeserializeMessage(array);
			return responseGetGuildDetail;
		}

		// Token: 0x060028CB RID: 10443 RVA: 0x000F5EF0 File Offset: 0x000F40F0
		public static List<ResponseGetGuildDetail> ReadListResponseGetGuildDetail(byte[] data, ref int offset)
		{
			List<ResponseGetGuildDetail> list = new List<ResponseGetGuildDetail>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetGuildDetail item = ArrayManager.ReadResponseGetGuildDetail(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028CC RID: 10444 RVA: 0x000F5F34 File Offset: 0x000F4134
		public static void WriteAccountPlayerProfile(ref byte[] data, ref int offset, AccountPlayerProfile value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028CD RID: 10445 RVA: 0x000F5F50 File Offset: 0x000F4150
		public static void WriteListAccountPlayerProfile(ref byte[] data, ref int offset, List<AccountPlayerProfile> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AccountPlayerProfile value in values)
			{
				ArrayManager.WriteAccountPlayerProfile(ref data, ref offset, value);
			}
		}

		// Token: 0x060028CE RID: 10446 RVA: 0x000F5FCC File Offset: 0x000F41CC
		public static AccountPlayerProfile ReadAccountPlayerProfile(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AccountPlayerProfile accountPlayerProfile = new AccountPlayerProfile();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			accountPlayerProfile.DeserializeMessage(array);
			return accountPlayerProfile;
		}

		// Token: 0x060028CF RID: 10447 RVA: 0x000F6010 File Offset: 0x000F4210
		public static List<AccountPlayerProfile> ReadListAccountPlayerProfile(byte[] data, ref int offset)
		{
			List<AccountPlayerProfile> list = new List<AccountPlayerProfile>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AccountPlayerProfile item = ArrayManager.ReadAccountPlayerProfile(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028D0 RID: 10448 RVA: 0x000F6054 File Offset: 0x000F4254
		public static void WriteRequestGetPlayerProfile(ref byte[] data, ref int offset, RequestGetPlayerProfile value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028D1 RID: 10449 RVA: 0x000F6070 File Offset: 0x000F4270
		public static void WriteListRequestGetPlayerProfile(ref byte[] data, ref int offset, List<RequestGetPlayerProfile> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetPlayerProfile value in values)
			{
				ArrayManager.WriteRequestGetPlayerProfile(ref data, ref offset, value);
			}
		}

		// Token: 0x060028D2 RID: 10450 RVA: 0x000F60EC File Offset: 0x000F42EC
		public static RequestGetPlayerProfile ReadRequestGetPlayerProfile(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetPlayerProfile requestGetPlayerProfile = new RequestGetPlayerProfile();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetPlayerProfile.DeserializeMessage(array);
			return requestGetPlayerProfile;
		}

		// Token: 0x060028D3 RID: 10451 RVA: 0x000F6130 File Offset: 0x000F4330
		public static List<RequestGetPlayerProfile> ReadListRequestGetPlayerProfile(byte[] data, ref int offset)
		{
			List<RequestGetPlayerProfile> list = new List<RequestGetPlayerProfile>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetPlayerProfile item = ArrayManager.ReadRequestGetPlayerProfile(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028D4 RID: 10452 RVA: 0x000F6174 File Offset: 0x000F4374
		public static void WriteResponseGetPlayerProfile(ref byte[] data, ref int offset, ResponseGetPlayerProfile value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028D5 RID: 10453 RVA: 0x000F6190 File Offset: 0x000F4390
		public static void WriteListResponseGetPlayerProfile(ref byte[] data, ref int offset, List<ResponseGetPlayerProfile> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetPlayerProfile value in values)
			{
				ArrayManager.WriteResponseGetPlayerProfile(ref data, ref offset, value);
			}
		}

		// Token: 0x060028D6 RID: 10454 RVA: 0x000F620C File Offset: 0x000F440C
		public static ResponseGetPlayerProfile ReadResponseGetPlayerProfile(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetPlayerProfile responseGetPlayerProfile = new ResponseGetPlayerProfile();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetPlayerProfile.DeserializeMessage(array);
			return responseGetPlayerProfile;
		}

		// Token: 0x060028D7 RID: 10455 RVA: 0x000F6250 File Offset: 0x000F4450
		public static List<ResponseGetPlayerProfile> ReadListResponseGetPlayerProfile(byte[] data, ref int offset)
		{
			List<ResponseGetPlayerProfile> list = new List<ResponseGetPlayerProfile>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetPlayerProfile item = ArrayManager.ReadResponseGetPlayerProfile(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028D8 RID: 10456 RVA: 0x000F6294 File Offset: 0x000F4494
		public static void WriteGuildCreationRequirements(ref byte[] data, ref int offset, GuildCreationRequirements value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028D9 RID: 10457 RVA: 0x000F62B0 File Offset: 0x000F44B0
		public static void WriteListGuildCreationRequirements(ref byte[] data, ref int offset, List<GuildCreationRequirements> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildCreationRequirements value in values)
			{
				ArrayManager.WriteGuildCreationRequirements(ref data, ref offset, value);
			}
		}

		// Token: 0x060028DA RID: 10458 RVA: 0x000F632C File Offset: 0x000F452C
		public static GuildCreationRequirements ReadGuildCreationRequirements(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildCreationRequirements guildCreationRequirements = new GuildCreationRequirements();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildCreationRequirements.DeserializeMessage(array);
			return guildCreationRequirements;
		}

		// Token: 0x060028DB RID: 10459 RVA: 0x000F6370 File Offset: 0x000F4570
		public static List<GuildCreationRequirements> ReadListGuildCreationRequirements(byte[] data, ref int offset)
		{
			List<GuildCreationRequirements> list = new List<GuildCreationRequirements>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildCreationRequirements item = ArrayManager.ReadGuildCreationRequirements(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028DC RID: 10460 RVA: 0x000F63B4 File Offset: 0x000F45B4
		public static void WriteGuildJoinRequirements(ref byte[] data, ref int offset, GuildJoinRequirements value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028DD RID: 10461 RVA: 0x000F63D0 File Offset: 0x000F45D0
		public static void WriteListGuildJoinRequirements(ref byte[] data, ref int offset, List<GuildJoinRequirements> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildJoinRequirements value in values)
			{
				ArrayManager.WriteGuildJoinRequirements(ref data, ref offset, value);
			}
		}

		// Token: 0x060028DE RID: 10462 RVA: 0x000F644C File Offset: 0x000F464C
		public static GuildJoinRequirements ReadGuildJoinRequirements(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildJoinRequirements guildJoinRequirements = new GuildJoinRequirements();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildJoinRequirements.DeserializeMessage(array);
			return guildJoinRequirements;
		}

		// Token: 0x060028DF RID: 10463 RVA: 0x000F6490 File Offset: 0x000F4690
		public static List<GuildJoinRequirements> ReadListGuildJoinRequirements(byte[] data, ref int offset)
		{
			List<GuildJoinRequirements> list = new List<GuildJoinRequirements>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildJoinRequirements item = ArrayManager.ReadGuildJoinRequirements(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028E0 RID: 10464 RVA: 0x000F64D4 File Offset: 0x000F46D4
		public static void WriteResponseGuildCreationRequirements(ref byte[] data, ref int offset, ResponseGuildCreationRequirements value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028E1 RID: 10465 RVA: 0x000F64F0 File Offset: 0x000F46F0
		public static void WriteListResponseGuildCreationRequirements(ref byte[] data, ref int offset, List<ResponseGuildCreationRequirements> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGuildCreationRequirements value in values)
			{
				ArrayManager.WriteResponseGuildCreationRequirements(ref data, ref offset, value);
			}
		}

		// Token: 0x060028E2 RID: 10466 RVA: 0x000F656C File Offset: 0x000F476C
		public static ResponseGuildCreationRequirements ReadResponseGuildCreationRequirements(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGuildCreationRequirements responseGuildCreationRequirements = new ResponseGuildCreationRequirements();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGuildCreationRequirements.DeserializeMessage(array);
			return responseGuildCreationRequirements;
		}

		// Token: 0x060028E3 RID: 10467 RVA: 0x000F65B0 File Offset: 0x000F47B0
		public static List<ResponseGuildCreationRequirements> ReadListResponseGuildCreationRequirements(byte[] data, ref int offset)
		{
			List<ResponseGuildCreationRequirements> list = new List<ResponseGuildCreationRequirements>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGuildCreationRequirements item = ArrayManager.ReadResponseGuildCreationRequirements(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028E4 RID: 10468 RVA: 0x000F65F4 File Offset: 0x000F47F4
		public static void WriteRequestSetGuildMOTD(ref byte[] data, ref int offset, RequestSetGuildMOTD value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028E5 RID: 10469 RVA: 0x000F6610 File Offset: 0x000F4810
		public static void WriteListRequestSetGuildMOTD(ref byte[] data, ref int offset, List<RequestSetGuildMOTD> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSetGuildMOTD value in values)
			{
				ArrayManager.WriteRequestSetGuildMOTD(ref data, ref offset, value);
			}
		}

		// Token: 0x060028E6 RID: 10470 RVA: 0x000F668C File Offset: 0x000F488C
		public static RequestSetGuildMOTD ReadRequestSetGuildMOTD(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSetGuildMOTD requestSetGuildMOTD = new RequestSetGuildMOTD();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSetGuildMOTD.DeserializeMessage(array);
			return requestSetGuildMOTD;
		}

		// Token: 0x060028E7 RID: 10471 RVA: 0x000F66D0 File Offset: 0x000F48D0
		public static List<RequestSetGuildMOTD> ReadListRequestSetGuildMOTD(byte[] data, ref int offset)
		{
			List<RequestSetGuildMOTD> list = new List<RequestSetGuildMOTD>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSetGuildMOTD item = ArrayManager.ReadRequestSetGuildMOTD(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028E8 RID: 10472 RVA: 0x000F6714 File Offset: 0x000F4914
		public static void WriteResponseSetGuildMOTD(ref byte[] data, ref int offset, ResponseSetGuildMOTD value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028E9 RID: 10473 RVA: 0x000F6730 File Offset: 0x000F4930
		public static void WriteListResponseSetGuildMOTD(ref byte[] data, ref int offset, List<ResponseSetGuildMOTD> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSetGuildMOTD value in values)
			{
				ArrayManager.WriteResponseSetGuildMOTD(ref data, ref offset, value);
			}
		}

		// Token: 0x060028EA RID: 10474 RVA: 0x000F67AC File Offset: 0x000F49AC
		public static ResponseSetGuildMOTD ReadResponseSetGuildMOTD(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSetGuildMOTD responseSetGuildMOTD = new ResponseSetGuildMOTD();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSetGuildMOTD.DeserializeMessage(array);
			return responseSetGuildMOTD;
		}

		// Token: 0x060028EB RID: 10475 RVA: 0x000F67F0 File Offset: 0x000F49F0
		public static List<ResponseSetGuildMOTD> ReadListResponseSetGuildMOTD(byte[] data, ref int offset)
		{
			List<ResponseSetGuildMOTD> list = new List<ResponseSetGuildMOTD>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSetGuildMOTD item = ArrayManager.ReadResponseSetGuildMOTD(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028EC RID: 10476 RVA: 0x000F6834 File Offset: 0x000F4A34
		public static void WriteRequestSetGuildDescription(ref byte[] data, ref int offset, RequestSetGuildDescription value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028ED RID: 10477 RVA: 0x000F6850 File Offset: 0x000F4A50
		public static void WriteListRequestSetGuildDescription(ref byte[] data, ref int offset, List<RequestSetGuildDescription> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestSetGuildDescription value in values)
			{
				ArrayManager.WriteRequestSetGuildDescription(ref data, ref offset, value);
			}
		}

		// Token: 0x060028EE RID: 10478 RVA: 0x000F68CC File Offset: 0x000F4ACC
		public static RequestSetGuildDescription ReadRequestSetGuildDescription(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestSetGuildDescription requestSetGuildDescription = new RequestSetGuildDescription();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestSetGuildDescription.DeserializeMessage(array);
			return requestSetGuildDescription;
		}

		// Token: 0x060028EF RID: 10479 RVA: 0x000F6910 File Offset: 0x000F4B10
		public static List<RequestSetGuildDescription> ReadListRequestSetGuildDescription(byte[] data, ref int offset)
		{
			List<RequestSetGuildDescription> list = new List<RequestSetGuildDescription>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestSetGuildDescription item = ArrayManager.ReadRequestSetGuildDescription(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028F0 RID: 10480 RVA: 0x000F6954 File Offset: 0x000F4B54
		public static void WriteResponseSetGuildDescription(ref byte[] data, ref int offset, ResponseSetGuildDescription value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028F1 RID: 10481 RVA: 0x000F6970 File Offset: 0x000F4B70
		public static void WriteListResponseSetGuildDescription(ref byte[] data, ref int offset, List<ResponseSetGuildDescription> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseSetGuildDescription value in values)
			{
				ArrayManager.WriteResponseSetGuildDescription(ref data, ref offset, value);
			}
		}

		// Token: 0x060028F2 RID: 10482 RVA: 0x000F69EC File Offset: 0x000F4BEC
		public static ResponseSetGuildDescription ReadResponseSetGuildDescription(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseSetGuildDescription responseSetGuildDescription = new ResponseSetGuildDescription();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseSetGuildDescription.DeserializeMessage(array);
			return responseSetGuildDescription;
		}

		// Token: 0x060028F3 RID: 10483 RVA: 0x000F6A30 File Offset: 0x000F4C30
		public static List<ResponseSetGuildDescription> ReadListResponseSetGuildDescription(byte[] data, ref int offset)
		{
			List<ResponseSetGuildDescription> list = new List<ResponseSetGuildDescription>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseSetGuildDescription item = ArrayManager.ReadResponseSetGuildDescription(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028F4 RID: 10484 RVA: 0x000F6A74 File Offset: 0x000F4C74
		public static void WriteRequestPushGuildMOTD(ref byte[] data, ref int offset, RequestPushGuildMOTD value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028F5 RID: 10485 RVA: 0x000F6A90 File Offset: 0x000F4C90
		public static void WriteListRequestPushGuildMOTD(ref byte[] data, ref int offset, List<RequestPushGuildMOTD> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestPushGuildMOTD value in values)
			{
				ArrayManager.WriteRequestPushGuildMOTD(ref data, ref offset, value);
			}
		}

		// Token: 0x060028F6 RID: 10486 RVA: 0x000F6B0C File Offset: 0x000F4D0C
		public static RequestPushGuildMOTD ReadRequestPushGuildMOTD(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestPushGuildMOTD requestPushGuildMOTD = new RequestPushGuildMOTD();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestPushGuildMOTD.DeserializeMessage(array);
			return requestPushGuildMOTD;
		}

		// Token: 0x060028F7 RID: 10487 RVA: 0x000F6B50 File Offset: 0x000F4D50
		public static List<RequestPushGuildMOTD> ReadListRequestPushGuildMOTD(byte[] data, ref int offset)
		{
			List<RequestPushGuildMOTD> list = new List<RequestPushGuildMOTD>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestPushGuildMOTD item = ArrayManager.ReadRequestPushGuildMOTD(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028F8 RID: 10488 RVA: 0x000F6B94 File Offset: 0x000F4D94
		public static void WritePushGuildMOTD(ref byte[] data, ref int offset, PushGuildMOTD value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028F9 RID: 10489 RVA: 0x000F6BB0 File Offset: 0x000F4DB0
		public static void WriteListPushGuildMOTD(ref byte[] data, ref int offset, List<PushGuildMOTD> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildMOTD value in values)
			{
				ArrayManager.WritePushGuildMOTD(ref data, ref offset, value);
			}
		}

		// Token: 0x060028FA RID: 10490 RVA: 0x000F6C2C File Offset: 0x000F4E2C
		public static PushGuildMOTD ReadPushGuildMOTD(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildMOTD pushGuildMOTD = new PushGuildMOTD();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildMOTD.DeserializeMessage(array);
			return pushGuildMOTD;
		}

		// Token: 0x060028FB RID: 10491 RVA: 0x000F6C70 File Offset: 0x000F4E70
		public static List<PushGuildMOTD> ReadListPushGuildMOTD(byte[] data, ref int offset)
		{
			List<PushGuildMOTD> list = new List<PushGuildMOTD>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildMOTD item = ArrayManager.ReadPushGuildMOTD(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060028FC RID: 10492 RVA: 0x000F6CB4 File Offset: 0x000F4EB4
		public static void WritePushGuildTransactionLogEntryAdded(ref byte[] data, ref int offset, PushGuildTransactionLogEntryAdded value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060028FD RID: 10493 RVA: 0x000F6CD0 File Offset: 0x000F4ED0
		public static void WriteListPushGuildTransactionLogEntryAdded(ref byte[] data, ref int offset, List<PushGuildTransactionLogEntryAdded> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildTransactionLogEntryAdded value in values)
			{
				ArrayManager.WritePushGuildTransactionLogEntryAdded(ref data, ref offset, value);
			}
		}

		// Token: 0x060028FE RID: 10494 RVA: 0x000F6D4C File Offset: 0x000F4F4C
		public static PushGuildTransactionLogEntryAdded ReadPushGuildTransactionLogEntryAdded(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildTransactionLogEntryAdded pushGuildTransactionLogEntryAdded = new PushGuildTransactionLogEntryAdded();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildTransactionLogEntryAdded.DeserializeMessage(array);
			return pushGuildTransactionLogEntryAdded;
		}

		// Token: 0x060028FF RID: 10495 RVA: 0x000F6D90 File Offset: 0x000F4F90
		public static List<PushGuildTransactionLogEntryAdded> ReadListPushGuildTransactionLogEntryAdded(byte[] data, ref int offset)
		{
			List<PushGuildTransactionLogEntryAdded> list = new List<PushGuildTransactionLogEntryAdded>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildTransactionLogEntryAdded item = ArrayManager.ReadPushGuildTransactionLogEntryAdded(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002900 RID: 10496 RVA: 0x000F6DD4 File Offset: 0x000F4FD4
		public static void WritePushGuildApplicationRejected(ref byte[] data, ref int offset, PushGuildApplicationRejected value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002901 RID: 10497 RVA: 0x000F6DF0 File Offset: 0x000F4FF0
		public static void WriteListPushGuildApplicationRejected(ref byte[] data, ref int offset, List<PushGuildApplicationRejected> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildApplicationRejected value in values)
			{
				ArrayManager.WritePushGuildApplicationRejected(ref data, ref offset, value);
			}
		}

		// Token: 0x06002902 RID: 10498 RVA: 0x000F6E6C File Offset: 0x000F506C
		public static PushGuildApplicationRejected ReadPushGuildApplicationRejected(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildApplicationRejected pushGuildApplicationRejected = new PushGuildApplicationRejected();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildApplicationRejected.DeserializeMessage(array);
			return pushGuildApplicationRejected;
		}

		// Token: 0x06002903 RID: 10499 RVA: 0x000F6EB0 File Offset: 0x000F50B0
		public static List<PushGuildApplicationRejected> ReadListPushGuildApplicationRejected(byte[] data, ref int offset)
		{
			List<PushGuildApplicationRejected> list = new List<PushGuildApplicationRejected>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildApplicationRejected item = ArrayManager.ReadPushGuildApplicationRejected(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002904 RID: 10500 RVA: 0x000F6EF4 File Offset: 0x000F50F4
		public static void WritePushGuildApplicationCancelled(ref byte[] data, ref int offset, PushGuildApplicationCancelled value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002905 RID: 10501 RVA: 0x000F6F10 File Offset: 0x000F5110
		public static void WriteListPushGuildApplicationCancelled(ref byte[] data, ref int offset, List<PushGuildApplicationCancelled> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildApplicationCancelled value in values)
			{
				ArrayManager.WritePushGuildApplicationCancelled(ref data, ref offset, value);
			}
		}

		// Token: 0x06002906 RID: 10502 RVA: 0x000F6F8C File Offset: 0x000F518C
		public static PushGuildApplicationCancelled ReadPushGuildApplicationCancelled(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildApplicationCancelled pushGuildApplicationCancelled = new PushGuildApplicationCancelled();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildApplicationCancelled.DeserializeMessage(array);
			return pushGuildApplicationCancelled;
		}

		// Token: 0x06002907 RID: 10503 RVA: 0x000F6FD0 File Offset: 0x000F51D0
		public static List<PushGuildApplicationCancelled> ReadListPushGuildApplicationCancelled(byte[] data, ref int offset)
		{
			List<PushGuildApplicationCancelled> list = new List<PushGuildApplicationCancelled>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildApplicationCancelled item = ArrayManager.ReadPushGuildApplicationCancelled(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002908 RID: 10504 RVA: 0x000F7014 File Offset: 0x000F5214
		public static void WritePushGuildApplicationAdded(ref byte[] data, ref int offset, PushGuildApplicationAdded value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002909 RID: 10505 RVA: 0x000F7030 File Offset: 0x000F5230
		public static void WriteListPushGuildApplicationAdded(ref byte[] data, ref int offset, List<PushGuildApplicationAdded> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildApplicationAdded value in values)
			{
				ArrayManager.WritePushGuildApplicationAdded(ref data, ref offset, value);
			}
		}

		// Token: 0x0600290A RID: 10506 RVA: 0x000F70AC File Offset: 0x000F52AC
		public static PushGuildApplicationAdded ReadPushGuildApplicationAdded(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildApplicationAdded pushGuildApplicationAdded = new PushGuildApplicationAdded();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildApplicationAdded.DeserializeMessage(array);
			return pushGuildApplicationAdded;
		}

		// Token: 0x0600290B RID: 10507 RVA: 0x000F70F0 File Offset: 0x000F52F0
		public static List<PushGuildApplicationAdded> ReadListPushGuildApplicationAdded(byte[] data, ref int offset)
		{
			List<PushGuildApplicationAdded> list = new List<PushGuildApplicationAdded>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildApplicationAdded item = ArrayManager.ReadPushGuildApplicationAdded(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600290C RID: 10508 RVA: 0x000F7134 File Offset: 0x000F5334
		public static void WritePushGuildInviteRemoved(ref byte[] data, ref int offset, PushGuildInviteRemoved value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600290D RID: 10509 RVA: 0x000F7150 File Offset: 0x000F5350
		public static void WriteListPushGuildInviteRemoved(ref byte[] data, ref int offset, List<PushGuildInviteRemoved> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildInviteRemoved value in values)
			{
				ArrayManager.WritePushGuildInviteRemoved(ref data, ref offset, value);
			}
		}

		// Token: 0x0600290E RID: 10510 RVA: 0x000F71CC File Offset: 0x000F53CC
		public static PushGuildInviteRemoved ReadPushGuildInviteRemoved(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildInviteRemoved pushGuildInviteRemoved = new PushGuildInviteRemoved();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildInviteRemoved.DeserializeMessage(array);
			return pushGuildInviteRemoved;
		}

		// Token: 0x0600290F RID: 10511 RVA: 0x000F7210 File Offset: 0x000F5410
		public static List<PushGuildInviteRemoved> ReadListPushGuildInviteRemoved(byte[] data, ref int offset)
		{
			List<PushGuildInviteRemoved> list = new List<PushGuildInviteRemoved>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildInviteRemoved item = ArrayManager.ReadPushGuildInviteRemoved(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002910 RID: 10512 RVA: 0x000F7254 File Offset: 0x000F5454
		public static void WritePushGuildInviteAdded(ref byte[] data, ref int offset, PushGuildInviteAdded value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002911 RID: 10513 RVA: 0x000F7270 File Offset: 0x000F5470
		public static void WriteListPushGuildInviteAdded(ref byte[] data, ref int offset, List<PushGuildInviteAdded> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildInviteAdded value in values)
			{
				ArrayManager.WritePushGuildInviteAdded(ref data, ref offset, value);
			}
		}

		// Token: 0x06002912 RID: 10514 RVA: 0x000F72EC File Offset: 0x000F54EC
		public static PushGuildInviteAdded ReadPushGuildInviteAdded(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildInviteAdded pushGuildInviteAdded = new PushGuildInviteAdded();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildInviteAdded.DeserializeMessage(array);
			return pushGuildInviteAdded;
		}

		// Token: 0x06002913 RID: 10515 RVA: 0x000F7330 File Offset: 0x000F5530
		public static List<PushGuildInviteAdded> ReadListPushGuildInviteAdded(byte[] data, ref int offset)
		{
			List<PushGuildInviteAdded> list = new List<PushGuildInviteAdded>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildInviteAdded item = ArrayManager.ReadPushGuildInviteAdded(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002914 RID: 10516 RVA: 0x000F7374 File Offset: 0x000F5574
		public static void WriteRequestAssignGuildLeader(ref byte[] data, ref int offset, RequestAssignGuildLeader value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002915 RID: 10517 RVA: 0x000F7390 File Offset: 0x000F5590
		public static void WriteListRequestAssignGuildLeader(ref byte[] data, ref int offset, List<RequestAssignGuildLeader> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestAssignGuildLeader value in values)
			{
				ArrayManager.WriteRequestAssignGuildLeader(ref data, ref offset, value);
			}
		}

		// Token: 0x06002916 RID: 10518 RVA: 0x000F740C File Offset: 0x000F560C
		public static RequestAssignGuildLeader ReadRequestAssignGuildLeader(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestAssignGuildLeader requestAssignGuildLeader = new RequestAssignGuildLeader();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestAssignGuildLeader.DeserializeMessage(array);
			return requestAssignGuildLeader;
		}

		// Token: 0x06002917 RID: 10519 RVA: 0x000F7450 File Offset: 0x000F5650
		public static List<RequestAssignGuildLeader> ReadListRequestAssignGuildLeader(byte[] data, ref int offset)
		{
			List<RequestAssignGuildLeader> list = new List<RequestAssignGuildLeader>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestAssignGuildLeader item = ArrayManager.ReadRequestAssignGuildLeader(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002918 RID: 10520 RVA: 0x000F7494 File Offset: 0x000F5694
		public static void WriteResponseAssignGuildLeader(ref byte[] data, ref int offset, ResponseAssignGuildLeader value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002919 RID: 10521 RVA: 0x000F74B0 File Offset: 0x000F56B0
		public static void WriteListResponseAssignGuildLeader(ref byte[] data, ref int offset, List<ResponseAssignGuildLeader> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseAssignGuildLeader value in values)
			{
				ArrayManager.WriteResponseAssignGuildLeader(ref data, ref offset, value);
			}
		}

		// Token: 0x0600291A RID: 10522 RVA: 0x000F752C File Offset: 0x000F572C
		public static ResponseAssignGuildLeader ReadResponseAssignGuildLeader(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseAssignGuildLeader responseAssignGuildLeader = new ResponseAssignGuildLeader();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseAssignGuildLeader.DeserializeMessage(array);
			return responseAssignGuildLeader;
		}

		// Token: 0x0600291B RID: 10523 RVA: 0x000F7570 File Offset: 0x000F5770
		public static List<ResponseAssignGuildLeader> ReadListResponseAssignGuildLeader(byte[] data, ref int offset)
		{
			List<ResponseAssignGuildLeader> list = new List<ResponseAssignGuildLeader>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseAssignGuildLeader item = ArrayManager.ReadResponseAssignGuildLeader(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600291C RID: 10524 RVA: 0x000F75B4 File Offset: 0x000F57B4
		public static void WritePushGuildMemberEntryUpdated(ref byte[] data, ref int offset, PushGuildMemberEntryUpdated value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600291D RID: 10525 RVA: 0x000F75D0 File Offset: 0x000F57D0
		public static void WriteListPushGuildMemberEntryUpdated(ref byte[] data, ref int offset, List<PushGuildMemberEntryUpdated> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildMemberEntryUpdated value in values)
			{
				ArrayManager.WritePushGuildMemberEntryUpdated(ref data, ref offset, value);
			}
		}

		// Token: 0x0600291E RID: 10526 RVA: 0x000F764C File Offset: 0x000F584C
		public static PushGuildMemberEntryUpdated ReadPushGuildMemberEntryUpdated(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildMemberEntryUpdated pushGuildMemberEntryUpdated = new PushGuildMemberEntryUpdated();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildMemberEntryUpdated.DeserializeMessage(array);
			return pushGuildMemberEntryUpdated;
		}

		// Token: 0x0600291F RID: 10527 RVA: 0x000F7690 File Offset: 0x000F5890
		public static List<PushGuildMemberEntryUpdated> ReadListPushGuildMemberEntryUpdated(byte[] data, ref int offset)
		{
			List<PushGuildMemberEntryUpdated> list = new List<PushGuildMemberEntryUpdated>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildMemberEntryUpdated item = ArrayManager.ReadPushGuildMemberEntryUpdated(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002920 RID: 10528 RVA: 0x000F76D4 File Offset: 0x000F58D4
		public static void WritePushGuildMemberEntryAdded(ref byte[] data, ref int offset, PushGuildMemberEntryAdded value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002921 RID: 10529 RVA: 0x000F76F0 File Offset: 0x000F58F0
		public static void WriteListPushGuildMemberEntryAdded(ref byte[] data, ref int offset, List<PushGuildMemberEntryAdded> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildMemberEntryAdded value in values)
			{
				ArrayManager.WritePushGuildMemberEntryAdded(ref data, ref offset, value);
			}
		}

		// Token: 0x06002922 RID: 10530 RVA: 0x000F776C File Offset: 0x000F596C
		public static PushGuildMemberEntryAdded ReadPushGuildMemberEntryAdded(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildMemberEntryAdded pushGuildMemberEntryAdded = new PushGuildMemberEntryAdded();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildMemberEntryAdded.DeserializeMessage(array);
			return pushGuildMemberEntryAdded;
		}

		// Token: 0x06002923 RID: 10531 RVA: 0x000F77B0 File Offset: 0x000F59B0
		public static List<PushGuildMemberEntryAdded> ReadListPushGuildMemberEntryAdded(byte[] data, ref int offset)
		{
			List<PushGuildMemberEntryAdded> list = new List<PushGuildMemberEntryAdded>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildMemberEntryAdded item = ArrayManager.ReadPushGuildMemberEntryAdded(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002924 RID: 10532 RVA: 0x000F77F4 File Offset: 0x000F59F4
		public static void WritePushGuildMemberEntryRemoved(ref byte[] data, ref int offset, PushGuildMemberEntryRemoved value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002925 RID: 10533 RVA: 0x000F7810 File Offset: 0x000F5A10
		public static void WriteListPushGuildMemberEntryRemoved(ref byte[] data, ref int offset, List<PushGuildMemberEntryRemoved> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildMemberEntryRemoved value in values)
			{
				ArrayManager.WritePushGuildMemberEntryRemoved(ref data, ref offset, value);
			}
		}

		// Token: 0x06002926 RID: 10534 RVA: 0x000F788C File Offset: 0x000F5A8C
		public static PushGuildMemberEntryRemoved ReadPushGuildMemberEntryRemoved(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildMemberEntryRemoved pushGuildMemberEntryRemoved = new PushGuildMemberEntryRemoved();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildMemberEntryRemoved.DeserializeMessage(array);
			return pushGuildMemberEntryRemoved;
		}

		// Token: 0x06002927 RID: 10535 RVA: 0x000F78D0 File Offset: 0x000F5AD0
		public static List<PushGuildMemberEntryRemoved> ReadListPushGuildMemberEntryRemoved(byte[] data, ref int offset)
		{
			List<PushGuildMemberEntryRemoved> list = new List<PushGuildMemberEntryRemoved>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildMemberEntryRemoved item = ArrayManager.ReadPushGuildMemberEntryRemoved(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002928 RID: 10536 RVA: 0x000F7914 File Offset: 0x000F5B14
		public static void WritePushGuildDetailUpdate(ref byte[] data, ref int offset, PushGuildDetailUpdate value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002929 RID: 10537 RVA: 0x000F7930 File Offset: 0x000F5B30
		public static void WriteListPushGuildDetailUpdate(ref byte[] data, ref int offset, List<PushGuildDetailUpdate> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildDetailUpdate value in values)
			{
				ArrayManager.WritePushGuildDetailUpdate(ref data, ref offset, value);
			}
		}

		// Token: 0x0600292A RID: 10538 RVA: 0x000F79AC File Offset: 0x000F5BAC
		public static PushGuildDetailUpdate ReadPushGuildDetailUpdate(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildDetailUpdate pushGuildDetailUpdate = new PushGuildDetailUpdate();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildDetailUpdate.DeserializeMessage(array);
			return pushGuildDetailUpdate;
		}

		// Token: 0x0600292B RID: 10539 RVA: 0x000F79F0 File Offset: 0x000F5BF0
		public static List<PushGuildDetailUpdate> ReadListPushGuildDetailUpdate(byte[] data, ref int offset)
		{
			List<PushGuildDetailUpdate> list = new List<PushGuildDetailUpdate>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildDetailUpdate item = ArrayManager.ReadPushGuildDetailUpdate(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600292C RID: 10540 RVA: 0x000F7A34 File Offset: 0x000F5C34
		public static void WritePushGuildDisbanded(ref byte[] data, ref int offset, PushGuildDisbanded value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600292D RID: 10541 RVA: 0x000F7A50 File Offset: 0x000F5C50
		public static void WriteListPushGuildDisbanded(ref byte[] data, ref int offset, List<PushGuildDisbanded> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildDisbanded value in values)
			{
				ArrayManager.WritePushGuildDisbanded(ref data, ref offset, value);
			}
		}

		// Token: 0x0600292E RID: 10542 RVA: 0x000F7ACC File Offset: 0x000F5CCC
		public static PushGuildDisbanded ReadPushGuildDisbanded(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildDisbanded pushGuildDisbanded = new PushGuildDisbanded();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildDisbanded.DeserializeMessage(array);
			return pushGuildDisbanded;
		}

		// Token: 0x0600292F RID: 10543 RVA: 0x000F7B10 File Offset: 0x000F5D10
		public static List<PushGuildDisbanded> ReadListPushGuildDisbanded(byte[] data, ref int offset)
		{
			List<PushGuildDisbanded> list = new List<PushGuildDisbanded>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildDisbanded item = ArrayManager.ReadPushGuildDisbanded(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002930 RID: 10544 RVA: 0x000F7B54 File Offset: 0x000F5D54
		public static void WritePushGuildApplicationAccepted(ref byte[] data, ref int offset, PushGuildApplicationAccepted value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002931 RID: 10545 RVA: 0x000F7B70 File Offset: 0x000F5D70
		public static void WriteListPushGuildApplicationAccepted(ref byte[] data, ref int offset, List<PushGuildApplicationAccepted> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushGuildApplicationAccepted value in values)
			{
				ArrayManager.WritePushGuildApplicationAccepted(ref data, ref offset, value);
			}
		}

		// Token: 0x06002932 RID: 10546 RVA: 0x000F7BEC File Offset: 0x000F5DEC
		public static PushGuildApplicationAccepted ReadPushGuildApplicationAccepted(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushGuildApplicationAccepted pushGuildApplicationAccepted = new PushGuildApplicationAccepted();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushGuildApplicationAccepted.DeserializeMessage(array);
			return pushGuildApplicationAccepted;
		}

		// Token: 0x06002933 RID: 10547 RVA: 0x000F7C30 File Offset: 0x000F5E30
		public static List<PushGuildApplicationAccepted> ReadListPushGuildApplicationAccepted(byte[] data, ref int offset)
		{
			List<PushGuildApplicationAccepted> list = new List<PushGuildApplicationAccepted>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushGuildApplicationAccepted item = ArrayManager.ReadPushGuildApplicationAccepted(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002934 RID: 10548 RVA: 0x000F7C74 File Offset: 0x000F5E74
		public static void WritePushLeftGuild(ref byte[] data, ref int offset, PushLeftGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002935 RID: 10549 RVA: 0x000F7C90 File Offset: 0x000F5E90
		public static void WriteListPushLeftGuild(ref byte[] data, ref int offset, List<PushLeftGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PushLeftGuild value in values)
			{
				ArrayManager.WritePushLeftGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x06002936 RID: 10550 RVA: 0x000F7D0C File Offset: 0x000F5F0C
		public static PushLeftGuild ReadPushLeftGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PushLeftGuild pushLeftGuild = new PushLeftGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			pushLeftGuild.DeserializeMessage(array);
			return pushLeftGuild;
		}

		// Token: 0x06002937 RID: 10551 RVA: 0x000F7D50 File Offset: 0x000F5F50
		public static List<PushLeftGuild> ReadListPushLeftGuild(byte[] data, ref int offset)
		{
			List<PushLeftGuild> list = new List<PushLeftGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PushLeftGuild item = ArrayManager.ReadPushLeftGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002938 RID: 10552 RVA: 0x000F7D94 File Offset: 0x000F5F94
		public static void WriteGuildLeaderboardInfoForNetwork(ref byte[] data, ref int offset, GuildLeaderboardInfoForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002939 RID: 10553 RVA: 0x000F7DB0 File Offset: 0x000F5FB0
		public static void WriteListGuildLeaderboardInfoForNetwork(ref byte[] data, ref int offset, List<GuildLeaderboardInfoForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildLeaderboardInfoForNetwork value in values)
			{
				ArrayManager.WriteGuildLeaderboardInfoForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600293A RID: 10554 RVA: 0x000F7E2C File Offset: 0x000F602C
		public static GuildLeaderboardInfoForNetwork ReadGuildLeaderboardInfoForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildLeaderboardInfoForNetwork guildLeaderboardInfoForNetwork = new GuildLeaderboardInfoForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildLeaderboardInfoForNetwork.DeserializeMessage(array);
			return guildLeaderboardInfoForNetwork;
		}

		// Token: 0x0600293B RID: 10555 RVA: 0x000F7E70 File Offset: 0x000F6070
		public static List<GuildLeaderboardInfoForNetwork> ReadListGuildLeaderboardInfoForNetwork(byte[] data, ref int offset)
		{
			List<GuildLeaderboardInfoForNetwork> list = new List<GuildLeaderboardInfoForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildLeaderboardInfoForNetwork item = ArrayManager.ReadGuildLeaderboardInfoForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600293C RID: 10556 RVA: 0x000F7EB4 File Offset: 0x000F60B4
		public static void WriteRequestGuildListSearchByTag(ref byte[] data, ref int offset, RequestGuildListSearchByTag value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600293D RID: 10557 RVA: 0x000F7ED0 File Offset: 0x000F60D0
		public static void WriteListRequestGuildListSearchByTag(ref byte[] data, ref int offset, List<RequestGuildListSearchByTag> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGuildListSearchByTag value in values)
			{
				ArrayManager.WriteRequestGuildListSearchByTag(ref data, ref offset, value);
			}
		}

		// Token: 0x0600293E RID: 10558 RVA: 0x000F7F4C File Offset: 0x000F614C
		public static RequestGuildListSearchByTag ReadRequestGuildListSearchByTag(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGuildListSearchByTag requestGuildListSearchByTag = new RequestGuildListSearchByTag();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGuildListSearchByTag.DeserializeMessage(array);
			return requestGuildListSearchByTag;
		}

		// Token: 0x0600293F RID: 10559 RVA: 0x000F7F90 File Offset: 0x000F6190
		public static List<RequestGuildListSearchByTag> ReadListRequestGuildListSearchByTag(byte[] data, ref int offset)
		{
			List<RequestGuildListSearchByTag> list = new List<RequestGuildListSearchByTag>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGuildListSearchByTag item = ArrayManager.ReadRequestGuildListSearchByTag(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002940 RID: 10560 RVA: 0x000F7FD4 File Offset: 0x000F61D4
		public static void WriteRequestGuildListFindByTag(ref byte[] data, ref int offset, RequestGuildListFindByTag value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002941 RID: 10561 RVA: 0x000F7FF0 File Offset: 0x000F61F0
		public static void WriteListRequestGuildListFindByTag(ref byte[] data, ref int offset, List<RequestGuildListFindByTag> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGuildListFindByTag value in values)
			{
				ArrayManager.WriteRequestGuildListFindByTag(ref data, ref offset, value);
			}
		}

		// Token: 0x06002942 RID: 10562 RVA: 0x000F806C File Offset: 0x000F626C
		public static RequestGuildListFindByTag ReadRequestGuildListFindByTag(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGuildListFindByTag requestGuildListFindByTag = new RequestGuildListFindByTag();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGuildListFindByTag.DeserializeMessage(array);
			return requestGuildListFindByTag;
		}

		// Token: 0x06002943 RID: 10563 RVA: 0x000F80B0 File Offset: 0x000F62B0
		public static List<RequestGuildListFindByTag> ReadListRequestGuildListFindByTag(byte[] data, ref int offset)
		{
			List<RequestGuildListFindByTag> list = new List<RequestGuildListFindByTag>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGuildListFindByTag item = ArrayManager.ReadRequestGuildListFindByTag(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002944 RID: 10564 RVA: 0x000F80F4 File Offset: 0x000F62F4
		public static void WriteRequestGuildListSearchByName(ref byte[] data, ref int offset, RequestGuildListSearchByName value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002945 RID: 10565 RVA: 0x000F8110 File Offset: 0x000F6310
		public static void WriteListRequestGuildListSearchByName(ref byte[] data, ref int offset, List<RequestGuildListSearchByName> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGuildListSearchByName value in values)
			{
				ArrayManager.WriteRequestGuildListSearchByName(ref data, ref offset, value);
			}
		}

		// Token: 0x06002946 RID: 10566 RVA: 0x000F818C File Offset: 0x000F638C
		public static RequestGuildListSearchByName ReadRequestGuildListSearchByName(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGuildListSearchByName requestGuildListSearchByName = new RequestGuildListSearchByName();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGuildListSearchByName.DeserializeMessage(array);
			return requestGuildListSearchByName;
		}

		// Token: 0x06002947 RID: 10567 RVA: 0x000F81D0 File Offset: 0x000F63D0
		public static List<RequestGuildListSearchByName> ReadListRequestGuildListSearchByName(byte[] data, ref int offset)
		{
			List<RequestGuildListSearchByName> list = new List<RequestGuildListSearchByName>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGuildListSearchByName item = ArrayManager.ReadRequestGuildListSearchByName(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002948 RID: 10568 RVA: 0x000F8214 File Offset: 0x000F6414
		public static void WriteRequestGuildListFindByName(ref byte[] data, ref int offset, RequestGuildListFindByName value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002949 RID: 10569 RVA: 0x000F8230 File Offset: 0x000F6430
		public static void WriteListRequestGuildListFindByName(ref byte[] data, ref int offset, List<RequestGuildListFindByName> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGuildListFindByName value in values)
			{
				ArrayManager.WriteRequestGuildListFindByName(ref data, ref offset, value);
			}
		}

		// Token: 0x0600294A RID: 10570 RVA: 0x000F82AC File Offset: 0x000F64AC
		public static RequestGuildListFindByName ReadRequestGuildListFindByName(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGuildListFindByName requestGuildListFindByName = new RequestGuildListFindByName();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGuildListFindByName.DeserializeMessage(array);
			return requestGuildListFindByName;
		}

		// Token: 0x0600294B RID: 10571 RVA: 0x000F82F0 File Offset: 0x000F64F0
		public static List<RequestGuildListFindByName> ReadListRequestGuildListFindByName(byte[] data, ref int offset)
		{
			List<RequestGuildListFindByName> list = new List<RequestGuildListFindByName>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGuildListFindByName item = ArrayManager.ReadRequestGuildListFindByName(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600294C RID: 10572 RVA: 0x000F8334 File Offset: 0x000F6534
		public static void WriteResponseGuildListInfo(ref byte[] data, ref int offset, ResponseGuildListInfo value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600294D RID: 10573 RVA: 0x000F8350 File Offset: 0x000F6550
		public static void WriteListResponseGuildListInfo(ref byte[] data, ref int offset, List<ResponseGuildListInfo> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGuildListInfo value in values)
			{
				ArrayManager.WriteResponseGuildListInfo(ref data, ref offset, value);
			}
		}

		// Token: 0x0600294E RID: 10574 RVA: 0x000F83CC File Offset: 0x000F65CC
		public static ResponseGuildListInfo ReadResponseGuildListInfo(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGuildListInfo responseGuildListInfo = new ResponseGuildListInfo();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGuildListInfo.DeserializeMessage(array);
			return responseGuildListInfo;
		}

		// Token: 0x0600294F RID: 10575 RVA: 0x000F8410 File Offset: 0x000F6610
		public static List<ResponseGuildListInfo> ReadListResponseGuildListInfo(byte[] data, ref int offset)
		{
			List<ResponseGuildListInfo> list = new List<ResponseGuildListInfo>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGuildListInfo item = ArrayManager.ReadResponseGuildListInfo(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002950 RID: 10576 RVA: 0x000F8454 File Offset: 0x000F6654
		public static void WriteGuildLogEntryForNetwork(ref byte[] data, ref int offset, GuildLogEntryForNetwork value)
		{
			uint value2 = 0u;
			if (value == null)
			{
				value2 = 0u;
			}
			else if (value.GetType() == typeof(CreateGuildLogEntryForNetwork))
			{
				value2 = 1486585326u;
			}
			else if (value.GetType() == typeof(DisbandGuildLogEntryForNetwork))
			{
				value2 = 2995116941u;
			}
			else if (value.GetType() == typeof(PlayerAcceptInviteLogEntryForNetwork))
			{
				value2 = 3483166037u;
			}
			else if (value.GetType() == typeof(OfficerAcceptApplicationLogEntryForNetwork))
			{
				value2 = 1455330346u;
			}
			else if (value.GetType() == typeof(MemberLeaveGuildLogEntryForNetwork))
			{
				value2 = 303520518u;
			}
			else if (value.GetType() == typeof(OfficerKickMemberLogEntryForNetwork))
			{
				value2 = 3917609880u;
			}
			else if (value.GetType() == typeof(PromoteMemberLogEntryForNetwork))
			{
				value2 = 1764802419u;
			}
			else if (value.GetType() == typeof(DemoteMemberLogEntryForNetwork))
			{
				value2 = 2449400184u;
			}
			else if (value.GetType() == typeof(AssignLeaderLogEntryForNetwork))
			{
				value2 = 934871032u;
			}
			else if (value.GetType() == typeof(AbsenteeLeaderReplacedLogEntryForNetwork))
			{
				value2 = 1943638642u;
			}
			else if (value.GetType() == typeof(GuildSeasonalRewardLogEntryForNetwork))
			{
				value2 = 1780481054u;
			}
			else if (value.GetType() == typeof(ChangeMOTDLogEntryForNetwork))
			{
				value2 = 2341844887u;
			}
			else if (value.GetType() == typeof(ChangeDescriptionLogEntryForNetwork))
			{
				value2 = 320400704u;
			}
			byte[] array = value.SerializeMessage();
			byte[] array2 = new byte[array.Length + 4];
			Array.Copy(BitConverter.GetBytes(value2), 0, array2, 0, 4);
			Array.Copy(array, 0, array2, 4, array.Length);
			ArrayManager.WriteByteArray(ref data, ref offset, array2);
		}

		// Token: 0x06002951 RID: 10577 RVA: 0x000F8640 File Offset: 0x000F6840
		public static void WriteListGuildLogEntryForNetwork(ref byte[] data, ref int offset, List<GuildLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildLogEntryForNetwork value in values)
			{
				ArrayManager.WriteGuildLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002952 RID: 10578 RVA: 0x000F86BC File Offset: 0x000F68BC
		public static GuildLogEntryForNetwork ReadGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			uint num2 = BitConverter.ToUInt32(data, offset);
			offset += 4;
			GuildLogEntryForNetwork guildLogEntryForNetwork = null;
			if (num2 == 0u)
			{
				return guildLogEntryForNetwork;
			}
			if (num2 == 1486585326u)
			{
				guildLogEntryForNetwork = new CreateGuildLogEntryForNetwork();
			}
			else if (num2 == 2995116941u)
			{
				guildLogEntryForNetwork = new DisbandGuildLogEntryForNetwork();
			}
			else if (num2 == 3483166037u)
			{
				guildLogEntryForNetwork = new PlayerAcceptInviteLogEntryForNetwork();
			}
			else if (num2 == 1455330346u)
			{
				guildLogEntryForNetwork = new OfficerAcceptApplicationLogEntryForNetwork();
			}
			else if (num2 == 303520518u)
			{
				guildLogEntryForNetwork = new MemberLeaveGuildLogEntryForNetwork();
			}
			else if (num2 == 3917609880u)
			{
				guildLogEntryForNetwork = new OfficerKickMemberLogEntryForNetwork();
			}
			else if (num2 == 1764802419u)
			{
				guildLogEntryForNetwork = new PromoteMemberLogEntryForNetwork();
			}
			else if (num2 == 2449400184u)
			{
				guildLogEntryForNetwork = new DemoteMemberLogEntryForNetwork();
			}
			else if (num2 == 934871032u)
			{
				guildLogEntryForNetwork = new AssignLeaderLogEntryForNetwork();
			}
			else if (num2 == 1943638642u)
			{
				guildLogEntryForNetwork = new AbsenteeLeaderReplacedLogEntryForNetwork();
			}
			else if (num2 == 1780481054u)
			{
				guildLogEntryForNetwork = new GuildSeasonalRewardLogEntryForNetwork();
			}
			else if (num2 == 2341844887u)
			{
				guildLogEntryForNetwork = new ChangeMOTDLogEntryForNetwork();
			}
			else if (num2 == 320400704u)
			{
				guildLogEntryForNetwork = new ChangeDescriptionLogEntryForNetwork();
			}
			num -= 4;
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildLogEntryForNetwork.DeserializeMessage(array);
			return guildLogEntryForNetwork;
		}

		// Token: 0x06002953 RID: 10579 RVA: 0x000F8830 File Offset: 0x000F6A30
		public static List<GuildLogEntryForNetwork> ReadListGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<GuildLogEntryForNetwork> list = new List<GuildLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildLogEntryForNetwork item = ArrayManager.ReadGuildLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002954 RID: 10580 RVA: 0x000F8874 File Offset: 0x000F6A74
		public static void WriteCreateGuildLogEntryForNetwork(ref byte[] data, ref int offset, CreateGuildLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002955 RID: 10581 RVA: 0x000F8890 File Offset: 0x000F6A90
		public static void WriteListCreateGuildLogEntryForNetwork(ref byte[] data, ref int offset, List<CreateGuildLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (CreateGuildLogEntryForNetwork value in values)
			{
				ArrayManager.WriteCreateGuildLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002956 RID: 10582 RVA: 0x000F890C File Offset: 0x000F6B0C
		public static CreateGuildLogEntryForNetwork ReadCreateGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			CreateGuildLogEntryForNetwork createGuildLogEntryForNetwork = new CreateGuildLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			createGuildLogEntryForNetwork.DeserializeMessage(array);
			return createGuildLogEntryForNetwork;
		}

		// Token: 0x06002957 RID: 10583 RVA: 0x000F8950 File Offset: 0x000F6B50
		public static List<CreateGuildLogEntryForNetwork> ReadListCreateGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<CreateGuildLogEntryForNetwork> list = new List<CreateGuildLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				CreateGuildLogEntryForNetwork item = ArrayManager.ReadCreateGuildLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002958 RID: 10584 RVA: 0x000F8994 File Offset: 0x000F6B94
		public static void WriteDisbandGuildLogEntryForNetwork(ref byte[] data, ref int offset, DisbandGuildLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002959 RID: 10585 RVA: 0x000F89B0 File Offset: 0x000F6BB0
		public static void WriteListDisbandGuildLogEntryForNetwork(ref byte[] data, ref int offset, List<DisbandGuildLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DisbandGuildLogEntryForNetwork value in values)
			{
				ArrayManager.WriteDisbandGuildLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600295A RID: 10586 RVA: 0x000F8A2C File Offset: 0x000F6C2C
		public static DisbandGuildLogEntryForNetwork ReadDisbandGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DisbandGuildLogEntryForNetwork disbandGuildLogEntryForNetwork = new DisbandGuildLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			disbandGuildLogEntryForNetwork.DeserializeMessage(array);
			return disbandGuildLogEntryForNetwork;
		}

		// Token: 0x0600295B RID: 10587 RVA: 0x000F8A70 File Offset: 0x000F6C70
		public static List<DisbandGuildLogEntryForNetwork> ReadListDisbandGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<DisbandGuildLogEntryForNetwork> list = new List<DisbandGuildLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DisbandGuildLogEntryForNetwork item = ArrayManager.ReadDisbandGuildLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600295C RID: 10588 RVA: 0x000F8AB4 File Offset: 0x000F6CB4
		public static void WritePlayerAcceptInviteLogEntryForNetwork(ref byte[] data, ref int offset, PlayerAcceptInviteLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600295D RID: 10589 RVA: 0x000F8AD0 File Offset: 0x000F6CD0
		public static void WriteListPlayerAcceptInviteLogEntryForNetwork(ref byte[] data, ref int offset, List<PlayerAcceptInviteLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PlayerAcceptInviteLogEntryForNetwork value in values)
			{
				ArrayManager.WritePlayerAcceptInviteLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600295E RID: 10590 RVA: 0x000F8B4C File Offset: 0x000F6D4C
		public static PlayerAcceptInviteLogEntryForNetwork ReadPlayerAcceptInviteLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PlayerAcceptInviteLogEntryForNetwork playerAcceptInviteLogEntryForNetwork = new PlayerAcceptInviteLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			playerAcceptInviteLogEntryForNetwork.DeserializeMessage(array);
			return playerAcceptInviteLogEntryForNetwork;
		}

		// Token: 0x0600295F RID: 10591 RVA: 0x000F8B90 File Offset: 0x000F6D90
		public static List<PlayerAcceptInviteLogEntryForNetwork> ReadListPlayerAcceptInviteLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<PlayerAcceptInviteLogEntryForNetwork> list = new List<PlayerAcceptInviteLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PlayerAcceptInviteLogEntryForNetwork item = ArrayManager.ReadPlayerAcceptInviteLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002960 RID: 10592 RVA: 0x000F8BD4 File Offset: 0x000F6DD4
		public static void WriteOfficerAcceptApplicationLogEntryForNetwork(ref byte[] data, ref int offset, OfficerAcceptApplicationLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002961 RID: 10593 RVA: 0x000F8BF0 File Offset: 0x000F6DF0
		public static void WriteListOfficerAcceptApplicationLogEntryForNetwork(ref byte[] data, ref int offset, List<OfficerAcceptApplicationLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (OfficerAcceptApplicationLogEntryForNetwork value in values)
			{
				ArrayManager.WriteOfficerAcceptApplicationLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002962 RID: 10594 RVA: 0x000F8C6C File Offset: 0x000F6E6C
		public static OfficerAcceptApplicationLogEntryForNetwork ReadOfficerAcceptApplicationLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			OfficerAcceptApplicationLogEntryForNetwork officerAcceptApplicationLogEntryForNetwork = new OfficerAcceptApplicationLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			officerAcceptApplicationLogEntryForNetwork.DeserializeMessage(array);
			return officerAcceptApplicationLogEntryForNetwork;
		}

		// Token: 0x06002963 RID: 10595 RVA: 0x000F8CB0 File Offset: 0x000F6EB0
		public static List<OfficerAcceptApplicationLogEntryForNetwork> ReadListOfficerAcceptApplicationLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<OfficerAcceptApplicationLogEntryForNetwork> list = new List<OfficerAcceptApplicationLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				OfficerAcceptApplicationLogEntryForNetwork item = ArrayManager.ReadOfficerAcceptApplicationLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002964 RID: 10596 RVA: 0x000F8CF4 File Offset: 0x000F6EF4
		public static void WriteMemberLeaveGuildLogEntryForNetwork(ref byte[] data, ref int offset, MemberLeaveGuildLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002965 RID: 10597 RVA: 0x000F8D10 File Offset: 0x000F6F10
		public static void WriteListMemberLeaveGuildLogEntryForNetwork(ref byte[] data, ref int offset, List<MemberLeaveGuildLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (MemberLeaveGuildLogEntryForNetwork value in values)
			{
				ArrayManager.WriteMemberLeaveGuildLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002966 RID: 10598 RVA: 0x000F8D8C File Offset: 0x000F6F8C
		public static MemberLeaveGuildLogEntryForNetwork ReadMemberLeaveGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			MemberLeaveGuildLogEntryForNetwork memberLeaveGuildLogEntryForNetwork = new MemberLeaveGuildLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			memberLeaveGuildLogEntryForNetwork.DeserializeMessage(array);
			return memberLeaveGuildLogEntryForNetwork;
		}

		// Token: 0x06002967 RID: 10599 RVA: 0x000F8DD0 File Offset: 0x000F6FD0
		public static List<MemberLeaveGuildLogEntryForNetwork> ReadListMemberLeaveGuildLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<MemberLeaveGuildLogEntryForNetwork> list = new List<MemberLeaveGuildLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				MemberLeaveGuildLogEntryForNetwork item = ArrayManager.ReadMemberLeaveGuildLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002968 RID: 10600 RVA: 0x000F8E14 File Offset: 0x000F7014
		public static void WriteOfficerKickMemberLogEntryForNetwork(ref byte[] data, ref int offset, OfficerKickMemberLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002969 RID: 10601 RVA: 0x000F8E30 File Offset: 0x000F7030
		public static void WriteListOfficerKickMemberLogEntryForNetwork(ref byte[] data, ref int offset, List<OfficerKickMemberLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (OfficerKickMemberLogEntryForNetwork value in values)
			{
				ArrayManager.WriteOfficerKickMemberLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600296A RID: 10602 RVA: 0x000F8EAC File Offset: 0x000F70AC
		public static OfficerKickMemberLogEntryForNetwork ReadOfficerKickMemberLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			OfficerKickMemberLogEntryForNetwork officerKickMemberLogEntryForNetwork = new OfficerKickMemberLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			officerKickMemberLogEntryForNetwork.DeserializeMessage(array);
			return officerKickMemberLogEntryForNetwork;
		}

		// Token: 0x0600296B RID: 10603 RVA: 0x000F8EF0 File Offset: 0x000F70F0
		public static List<OfficerKickMemberLogEntryForNetwork> ReadListOfficerKickMemberLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<OfficerKickMemberLogEntryForNetwork> list = new List<OfficerKickMemberLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				OfficerKickMemberLogEntryForNetwork item = ArrayManager.ReadOfficerKickMemberLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600296C RID: 10604 RVA: 0x000F8F34 File Offset: 0x000F7134
		public static void WritePromoteMemberLogEntryForNetwork(ref byte[] data, ref int offset, PromoteMemberLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600296D RID: 10605 RVA: 0x000F8F50 File Offset: 0x000F7150
		public static void WriteListPromoteMemberLogEntryForNetwork(ref byte[] data, ref int offset, List<PromoteMemberLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (PromoteMemberLogEntryForNetwork value in values)
			{
				ArrayManager.WritePromoteMemberLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600296E RID: 10606 RVA: 0x000F8FCC File Offset: 0x000F71CC
		public static PromoteMemberLogEntryForNetwork ReadPromoteMemberLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			PromoteMemberLogEntryForNetwork promoteMemberLogEntryForNetwork = new PromoteMemberLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			promoteMemberLogEntryForNetwork.DeserializeMessage(array);
			return promoteMemberLogEntryForNetwork;
		}

		// Token: 0x0600296F RID: 10607 RVA: 0x000F9010 File Offset: 0x000F7210
		public static List<PromoteMemberLogEntryForNetwork> ReadListPromoteMemberLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<PromoteMemberLogEntryForNetwork> list = new List<PromoteMemberLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				PromoteMemberLogEntryForNetwork item = ArrayManager.ReadPromoteMemberLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002970 RID: 10608 RVA: 0x000F9054 File Offset: 0x000F7254
		public static void WriteDemoteMemberLogEntryForNetwork(ref byte[] data, ref int offset, DemoteMemberLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002971 RID: 10609 RVA: 0x000F9070 File Offset: 0x000F7270
		public static void WriteListDemoteMemberLogEntryForNetwork(ref byte[] data, ref int offset, List<DemoteMemberLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (DemoteMemberLogEntryForNetwork value in values)
			{
				ArrayManager.WriteDemoteMemberLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002972 RID: 10610 RVA: 0x000F90EC File Offset: 0x000F72EC
		public static DemoteMemberLogEntryForNetwork ReadDemoteMemberLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			DemoteMemberLogEntryForNetwork demoteMemberLogEntryForNetwork = new DemoteMemberLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			demoteMemberLogEntryForNetwork.DeserializeMessage(array);
			return demoteMemberLogEntryForNetwork;
		}

		// Token: 0x06002973 RID: 10611 RVA: 0x000F9130 File Offset: 0x000F7330
		public static List<DemoteMemberLogEntryForNetwork> ReadListDemoteMemberLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<DemoteMemberLogEntryForNetwork> list = new List<DemoteMemberLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				DemoteMemberLogEntryForNetwork item = ArrayManager.ReadDemoteMemberLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002974 RID: 10612 RVA: 0x000F9174 File Offset: 0x000F7374
		public static void WriteAssignLeaderLogEntryForNetwork(ref byte[] data, ref int offset, AssignLeaderLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002975 RID: 10613 RVA: 0x000F9190 File Offset: 0x000F7390
		public static void WriteListAssignLeaderLogEntryForNetwork(ref byte[] data, ref int offset, List<AssignLeaderLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AssignLeaderLogEntryForNetwork value in values)
			{
				ArrayManager.WriteAssignLeaderLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002976 RID: 10614 RVA: 0x000F920C File Offset: 0x000F740C
		public static AssignLeaderLogEntryForNetwork ReadAssignLeaderLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AssignLeaderLogEntryForNetwork assignLeaderLogEntryForNetwork = new AssignLeaderLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			assignLeaderLogEntryForNetwork.DeserializeMessage(array);
			return assignLeaderLogEntryForNetwork;
		}

		// Token: 0x06002977 RID: 10615 RVA: 0x000F9250 File Offset: 0x000F7450
		public static List<AssignLeaderLogEntryForNetwork> ReadListAssignLeaderLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<AssignLeaderLogEntryForNetwork> list = new List<AssignLeaderLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AssignLeaderLogEntryForNetwork item = ArrayManager.ReadAssignLeaderLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002978 RID: 10616 RVA: 0x000F9294 File Offset: 0x000F7494
		public static void WriteAbsenteeLeaderReplacedLogEntryForNetwork(ref byte[] data, ref int offset, AbsenteeLeaderReplacedLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002979 RID: 10617 RVA: 0x000F92B0 File Offset: 0x000F74B0
		public static void WriteListAbsenteeLeaderReplacedLogEntryForNetwork(ref byte[] data, ref int offset, List<AbsenteeLeaderReplacedLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (AbsenteeLeaderReplacedLogEntryForNetwork value in values)
			{
				ArrayManager.WriteAbsenteeLeaderReplacedLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600297A RID: 10618 RVA: 0x000F932C File Offset: 0x000F752C
		public static AbsenteeLeaderReplacedLogEntryForNetwork ReadAbsenteeLeaderReplacedLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			AbsenteeLeaderReplacedLogEntryForNetwork absenteeLeaderReplacedLogEntryForNetwork = new AbsenteeLeaderReplacedLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			absenteeLeaderReplacedLogEntryForNetwork.DeserializeMessage(array);
			return absenteeLeaderReplacedLogEntryForNetwork;
		}

		// Token: 0x0600297B RID: 10619 RVA: 0x000F9370 File Offset: 0x000F7570
		public static List<AbsenteeLeaderReplacedLogEntryForNetwork> ReadListAbsenteeLeaderReplacedLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<AbsenteeLeaderReplacedLogEntryForNetwork> list = new List<AbsenteeLeaderReplacedLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				AbsenteeLeaderReplacedLogEntryForNetwork item = ArrayManager.ReadAbsenteeLeaderReplacedLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600297C RID: 10620 RVA: 0x000F93B4 File Offset: 0x000F75B4
		public static void WriteGuildSeasonalRewardLogEntryForNetwork(ref byte[] data, ref int offset, GuildSeasonalRewardLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600297D RID: 10621 RVA: 0x000F93D0 File Offset: 0x000F75D0
		public static void WriteListGuildSeasonalRewardLogEntryForNetwork(ref byte[] data, ref int offset, List<GuildSeasonalRewardLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (GuildSeasonalRewardLogEntryForNetwork value in values)
			{
				ArrayManager.WriteGuildSeasonalRewardLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x0600297E RID: 10622 RVA: 0x000F944C File Offset: 0x000F764C
		public static GuildSeasonalRewardLogEntryForNetwork ReadGuildSeasonalRewardLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			GuildSeasonalRewardLogEntryForNetwork guildSeasonalRewardLogEntryForNetwork = new GuildSeasonalRewardLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			guildSeasonalRewardLogEntryForNetwork.DeserializeMessage(array);
			return guildSeasonalRewardLogEntryForNetwork;
		}

		// Token: 0x0600297F RID: 10623 RVA: 0x000F9490 File Offset: 0x000F7690
		public static List<GuildSeasonalRewardLogEntryForNetwork> ReadListGuildSeasonalRewardLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<GuildSeasonalRewardLogEntryForNetwork> list = new List<GuildSeasonalRewardLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				GuildSeasonalRewardLogEntryForNetwork item = ArrayManager.ReadGuildSeasonalRewardLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002980 RID: 10624 RVA: 0x000F94D4 File Offset: 0x000F76D4
		public static void WriteChangeMOTDLogEntryForNetwork(ref byte[] data, ref int offset, ChangeMOTDLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002981 RID: 10625 RVA: 0x000F94F0 File Offset: 0x000F76F0
		public static void WriteListChangeMOTDLogEntryForNetwork(ref byte[] data, ref int offset, List<ChangeMOTDLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ChangeMOTDLogEntryForNetwork value in values)
			{
				ArrayManager.WriteChangeMOTDLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002982 RID: 10626 RVA: 0x000F956C File Offset: 0x000F776C
		public static ChangeMOTDLogEntryForNetwork ReadChangeMOTDLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ChangeMOTDLogEntryForNetwork changeMOTDLogEntryForNetwork = new ChangeMOTDLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			changeMOTDLogEntryForNetwork.DeserializeMessage(array);
			return changeMOTDLogEntryForNetwork;
		}

		// Token: 0x06002983 RID: 10627 RVA: 0x000F95B0 File Offset: 0x000F77B0
		public static List<ChangeMOTDLogEntryForNetwork> ReadListChangeMOTDLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<ChangeMOTDLogEntryForNetwork> list = new List<ChangeMOTDLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ChangeMOTDLogEntryForNetwork item = ArrayManager.ReadChangeMOTDLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002984 RID: 10628 RVA: 0x000F95F4 File Offset: 0x000F77F4
		public static void WriteChangeDescriptionLogEntryForNetwork(ref byte[] data, ref int offset, ChangeDescriptionLogEntryForNetwork value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002985 RID: 10629 RVA: 0x000F9610 File Offset: 0x000F7810
		public static void WriteListChangeDescriptionLogEntryForNetwork(ref byte[] data, ref int offset, List<ChangeDescriptionLogEntryForNetwork> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ChangeDescriptionLogEntryForNetwork value in values)
			{
				ArrayManager.WriteChangeDescriptionLogEntryForNetwork(ref data, ref offset, value);
			}
		}

		// Token: 0x06002986 RID: 10630 RVA: 0x000F968C File Offset: 0x000F788C
		public static ChangeDescriptionLogEntryForNetwork ReadChangeDescriptionLogEntryForNetwork(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ChangeDescriptionLogEntryForNetwork changeDescriptionLogEntryForNetwork = new ChangeDescriptionLogEntryForNetwork();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			changeDescriptionLogEntryForNetwork.DeserializeMessage(array);
			return changeDescriptionLogEntryForNetwork;
		}

		// Token: 0x06002987 RID: 10631 RVA: 0x000F96D0 File Offset: 0x000F78D0
		public static List<ChangeDescriptionLogEntryForNetwork> ReadListChangeDescriptionLogEntryForNetwork(byte[] data, ref int offset)
		{
			List<ChangeDescriptionLogEntryForNetwork> list = new List<ChangeDescriptionLogEntryForNetwork>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ChangeDescriptionLogEntryForNetwork item = ArrayManager.ReadChangeDescriptionLogEntryForNetwork(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002988 RID: 10632 RVA: 0x000F9714 File Offset: 0x000F7914
		public static void WriteRequestGetIncomingGuildInvites(ref byte[] data, ref int offset, RequestGetIncomingGuildInvites value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002989 RID: 10633 RVA: 0x000F9730 File Offset: 0x000F7930
		public static void WriteListRequestGetIncomingGuildInvites(ref byte[] data, ref int offset, List<RequestGetIncomingGuildInvites> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetIncomingGuildInvites value in values)
			{
				ArrayManager.WriteRequestGetIncomingGuildInvites(ref data, ref offset, value);
			}
		}

		// Token: 0x0600298A RID: 10634 RVA: 0x000F97AC File Offset: 0x000F79AC
		public static RequestGetIncomingGuildInvites ReadRequestGetIncomingGuildInvites(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetIncomingGuildInvites requestGetIncomingGuildInvites = new RequestGetIncomingGuildInvites();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetIncomingGuildInvites.DeserializeMessage(array);
			return requestGetIncomingGuildInvites;
		}

		// Token: 0x0600298B RID: 10635 RVA: 0x000F97F0 File Offset: 0x000F79F0
		public static List<RequestGetIncomingGuildInvites> ReadListRequestGetIncomingGuildInvites(byte[] data, ref int offset)
		{
			List<RequestGetIncomingGuildInvites> list = new List<RequestGetIncomingGuildInvites>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetIncomingGuildInvites item = ArrayManager.ReadRequestGetIncomingGuildInvites(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600298C RID: 10636 RVA: 0x000F9834 File Offset: 0x000F7A34
		public static void WriteResponseGetIncomingGuildInvites(ref byte[] data, ref int offset, ResponseGetIncomingGuildInvites value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600298D RID: 10637 RVA: 0x000F9850 File Offset: 0x000F7A50
		public static void WriteListResponseGetIncomingGuildInvites(ref byte[] data, ref int offset, List<ResponseGetIncomingGuildInvites> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetIncomingGuildInvites value in values)
			{
				ArrayManager.WriteResponseGetIncomingGuildInvites(ref data, ref offset, value);
			}
		}

		// Token: 0x0600298E RID: 10638 RVA: 0x000F98CC File Offset: 0x000F7ACC
		public static ResponseGetIncomingGuildInvites ReadResponseGetIncomingGuildInvites(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetIncomingGuildInvites responseGetIncomingGuildInvites = new ResponseGetIncomingGuildInvites();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetIncomingGuildInvites.DeserializeMessage(array);
			return responseGetIncomingGuildInvites;
		}

		// Token: 0x0600298F RID: 10639 RVA: 0x000F9910 File Offset: 0x000F7B10
		public static List<ResponseGetIncomingGuildInvites> ReadListResponseGetIncomingGuildInvites(byte[] data, ref int offset)
		{
			List<ResponseGetIncomingGuildInvites> list = new List<ResponseGetIncomingGuildInvites>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetIncomingGuildInvites item = ArrayManager.ReadResponseGetIncomingGuildInvites(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002990 RID: 10640 RVA: 0x000F9954 File Offset: 0x000F7B54
		public static void WriteRequestGetOutgoingGuildApplications(ref byte[] data, ref int offset, RequestGetOutgoingGuildApplications value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002991 RID: 10641 RVA: 0x000F9970 File Offset: 0x000F7B70
		public static void WriteListRequestGetOutgoingGuildApplications(ref byte[] data, ref int offset, List<RequestGetOutgoingGuildApplications> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestGetOutgoingGuildApplications value in values)
			{
				ArrayManager.WriteRequestGetOutgoingGuildApplications(ref data, ref offset, value);
			}
		}

		// Token: 0x06002992 RID: 10642 RVA: 0x000F99EC File Offset: 0x000F7BEC
		public static RequestGetOutgoingGuildApplications ReadRequestGetOutgoingGuildApplications(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestGetOutgoingGuildApplications requestGetOutgoingGuildApplications = new RequestGetOutgoingGuildApplications();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestGetOutgoingGuildApplications.DeserializeMessage(array);
			return requestGetOutgoingGuildApplications;
		}

		// Token: 0x06002993 RID: 10643 RVA: 0x000F9A30 File Offset: 0x000F7C30
		public static List<RequestGetOutgoingGuildApplications> ReadListRequestGetOutgoingGuildApplications(byte[] data, ref int offset)
		{
			List<RequestGetOutgoingGuildApplications> list = new List<RequestGetOutgoingGuildApplications>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestGetOutgoingGuildApplications item = ArrayManager.ReadRequestGetOutgoingGuildApplications(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002994 RID: 10644 RVA: 0x000F9A74 File Offset: 0x000F7C74
		public static void WriteResponseGetOutgoingGuildApplications(ref byte[] data, ref int offset, ResponseGetOutgoingGuildApplications value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002995 RID: 10645 RVA: 0x000F9A90 File Offset: 0x000F7C90
		public static void WriteListResponseGetOutgoingGuildApplications(ref byte[] data, ref int offset, List<ResponseGetOutgoingGuildApplications> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseGetOutgoingGuildApplications value in values)
			{
				ArrayManager.WriteResponseGetOutgoingGuildApplications(ref data, ref offset, value);
			}
		}

		// Token: 0x06002996 RID: 10646 RVA: 0x000F9B0C File Offset: 0x000F7D0C
		public static ResponseGetOutgoingGuildApplications ReadResponseGetOutgoingGuildApplications(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseGetOutgoingGuildApplications responseGetOutgoingGuildApplications = new ResponseGetOutgoingGuildApplications();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseGetOutgoingGuildApplications.DeserializeMessage(array);
			return responseGetOutgoingGuildApplications;
		}

		// Token: 0x06002997 RID: 10647 RVA: 0x000F9B50 File Offset: 0x000F7D50
		public static List<ResponseGetOutgoingGuildApplications> ReadListResponseGetOutgoingGuildApplications(byte[] data, ref int offset)
		{
			List<ResponseGetOutgoingGuildApplications> list = new List<ResponseGetOutgoingGuildApplications>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseGetOutgoingGuildApplications item = ArrayManager.ReadResponseGetOutgoingGuildApplications(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x06002998 RID: 10648 RVA: 0x000F9B94 File Offset: 0x000F7D94
		public static void WriteClearChatIDForGuild(ref byte[] data, ref int offset, ClearChatIDForGuild value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x06002999 RID: 10649 RVA: 0x000F9BB0 File Offset: 0x000F7DB0
		public static void WriteListClearChatIDForGuild(ref byte[] data, ref int offset, List<ClearChatIDForGuild> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ClearChatIDForGuild value in values)
			{
				ArrayManager.WriteClearChatIDForGuild(ref data, ref offset, value);
			}
		}

		// Token: 0x0600299A RID: 10650 RVA: 0x000F9C2C File Offset: 0x000F7E2C
		public static ClearChatIDForGuild ReadClearChatIDForGuild(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ClearChatIDForGuild clearChatIDForGuild = new ClearChatIDForGuild();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			clearChatIDForGuild.DeserializeMessage(array);
			return clearChatIDForGuild;
		}

		// Token: 0x0600299B RID: 10651 RVA: 0x000F9C70 File Offset: 0x000F7E70
		public static List<ClearChatIDForGuild> ReadListClearChatIDForGuild(byte[] data, ref int offset)
		{
			List<ClearChatIDForGuild> list = new List<ClearChatIDForGuild>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ClearChatIDForGuild item = ArrayManager.ReadClearChatIDForGuild(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0600299C RID: 10652 RVA: 0x000F9CB4 File Offset: 0x000F7EB4
		public static void WriteRequestCheckForAbsenteeLeader(ref byte[] data, ref int offset, RequestCheckForAbsenteeLeader value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x0600299D RID: 10653 RVA: 0x000F9CD0 File Offset: 0x000F7ED0
		public static void WriteListRequestCheckForAbsenteeLeader(ref byte[] data, ref int offset, List<RequestCheckForAbsenteeLeader> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestCheckForAbsenteeLeader value in values)
			{
				ArrayManager.WriteRequestCheckForAbsenteeLeader(ref data, ref offset, value);
			}
		}

		// Token: 0x0600299E RID: 10654 RVA: 0x000F9D4C File Offset: 0x000F7F4C
		public static RequestCheckForAbsenteeLeader ReadRequestCheckForAbsenteeLeader(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestCheckForAbsenteeLeader requestCheckForAbsenteeLeader = new RequestCheckForAbsenteeLeader();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestCheckForAbsenteeLeader.DeserializeMessage(array);
			return requestCheckForAbsenteeLeader;
		}

		// Token: 0x0600299F RID: 10655 RVA: 0x000F9D90 File Offset: 0x000F7F90
		public static List<RequestCheckForAbsenteeLeader> ReadListRequestCheckForAbsenteeLeader(byte[] data, ref int offset)
		{
			List<RequestCheckForAbsenteeLeader> list = new List<RequestCheckForAbsenteeLeader>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestCheckForAbsenteeLeader item = ArrayManager.ReadRequestCheckForAbsenteeLeader(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060029A0 RID: 10656 RVA: 0x000F9DD4 File Offset: 0x000F7FD4
		public static void WriteRequestToggleGuildAcceptingApplications(ref byte[] data, ref int offset, RequestToggleGuildAcceptingApplications value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060029A1 RID: 10657 RVA: 0x000F9DF0 File Offset: 0x000F7FF0
		public static void WriteListRequestToggleGuildAcceptingApplications(ref byte[] data, ref int offset, List<RequestToggleGuildAcceptingApplications> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (RequestToggleGuildAcceptingApplications value in values)
			{
				ArrayManager.WriteRequestToggleGuildAcceptingApplications(ref data, ref offset, value);
			}
		}

		// Token: 0x060029A2 RID: 10658 RVA: 0x000F9E6C File Offset: 0x000F806C
		public static RequestToggleGuildAcceptingApplications ReadRequestToggleGuildAcceptingApplications(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			RequestToggleGuildAcceptingApplications requestToggleGuildAcceptingApplications = new RequestToggleGuildAcceptingApplications();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			requestToggleGuildAcceptingApplications.DeserializeMessage(array);
			return requestToggleGuildAcceptingApplications;
		}

		// Token: 0x060029A3 RID: 10659 RVA: 0x000F9EB0 File Offset: 0x000F80B0
		public static List<RequestToggleGuildAcceptingApplications> ReadListRequestToggleGuildAcceptingApplications(byte[] data, ref int offset)
		{
			List<RequestToggleGuildAcceptingApplications> list = new List<RequestToggleGuildAcceptingApplications>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				RequestToggleGuildAcceptingApplications item = ArrayManager.ReadRequestToggleGuildAcceptingApplications(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060029A4 RID: 10660 RVA: 0x000F9EF4 File Offset: 0x000F80F4
		public static void WriteResponseToggleGuildAcceptingApplications(ref byte[] data, ref int offset, ResponseToggleGuildAcceptingApplications value)
		{
			byte[] value2 = value.SerializeMessage();
			ArrayManager.WriteByteArray(ref data, ref offset, value2);
		}

		// Token: 0x060029A5 RID: 10661 RVA: 0x000F9F10 File Offset: 0x000F8110
		public static void WriteListResponseToggleGuildAcceptingApplications(ref byte[] data, ref int offset, List<ResponseToggleGuildAcceptingApplications> values)
		{
			ArrayManager.EnsureArrayIsLargeEnough(ref data, offset, 4);
			Array.Copy(BitConverter.GetBytes(values.Count), 0, data, offset, 4);
			offset += 4;
			foreach (ResponseToggleGuildAcceptingApplications value in values)
			{
				ArrayManager.WriteResponseToggleGuildAcceptingApplications(ref data, ref offset, value);
			}
		}

		// Token: 0x060029A6 RID: 10662 RVA: 0x000F9F8C File Offset: 0x000F818C
		public static ResponseToggleGuildAcceptingApplications ReadResponseToggleGuildAcceptingApplications(byte[] data, ref int offset)
		{
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			ResponseToggleGuildAcceptingApplications responseToggleGuildAcceptingApplications = new ResponseToggleGuildAcceptingApplications();
			byte[] array = new byte[num];
			Array.Copy(data, offset, array, 0, num);
			offset += num;
			responseToggleGuildAcceptingApplications.DeserializeMessage(array);
			return responseToggleGuildAcceptingApplications;
		}

		// Token: 0x060029A7 RID: 10663 RVA: 0x000F9FD0 File Offset: 0x000F81D0
		public static List<ResponseToggleGuildAcceptingApplications> ReadListResponseToggleGuildAcceptingApplications(byte[] data, ref int offset)
		{
			List<ResponseToggleGuildAcceptingApplications> list = new List<ResponseToggleGuildAcceptingApplications>();
			int num = BitConverter.ToInt32(data, offset);
			offset += 4;
			for (int i = 0; i < num; i++)
			{
				ResponseToggleGuildAcceptingApplications item = ArrayManager.ReadResponseToggleGuildAcceptingApplications(data, ref offset);
				list.Add(item);
			}
			return list;
		}

		// Token: 0x0400167E RID: 5758
		private const int cArrayChunkSize = 128;
	}
}
